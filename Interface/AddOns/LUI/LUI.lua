--[[
	Project.: LUI NextGenWoWUserInterface
	File....: LUI.lua
	Version.: 3.025
	Rev Date: 07/04/2010
	Author..: Lou√≠ [EU-Das Syndikat] <In Fidem>
]] 

local AceAddon = LibStub("AceAddon-3.0")
local L = AceLibrary("AceLocale-2.2"):new("Grid")
local LSM = LibStub("LibSharedMedia-3.0")
local widgetLists = AceGUIWidgetLSMlists
LUI = AceAddon:NewAddon("LUI", "AceConsole-3.0", "AceEvent-3.0", "AceHook-3.0")
local dewdrop = LibStub('Dewdrop-2.0', true)
local icon = LibStub('LibDBIcon-1.0')
local Position = LUI:NewModule("Position", "AceHook-3.0")
local AceConfigDialog = LibStub("AceConfigDialog-3.0")

local GridLayout = nil

if IsAddOnLoaded("Grid") then
	GridLayout = Grid:GetModule("GridLayout")
end

Bartender4 = LibStub("AceAddon-3.0"):GetAddon("Bartender4")
BT4ActionBars = Bartender4:GetModule("ActionBars")
Bartender4.ActionBar = ActionBar

local L = GetLocale()
local SML = LibStub('LibSharedMedia-3.0')
SML:Register("font", "vibrocen", [[Interface\Addons\SharedMedia_MyMedia\font\vibrocen.ttf]])
SML:Register("font", "Prototype", [[Interface\Addons\SharedMedia_MyMedia\font\Prototype.ttf]])
SML:Register("font", "neuropol", [[Interface\AddOns\SharedMedia_MyMedia\font\neuropol x cd rg.ttf]])
SML:Register("border", "glow", [[Interface\Addons\oUF_LUI\media\textures\glowTex.tga]])
SML:Register("border", "glow2", [[Interface\Addons\oUF_LUI\media\textures\border.tga]])
SML:Register("statusbar", "oUF LUI", [[Interface\AddOns\LUI\textures\oUF_LUI.tga]])
SML:Register("statusbar", "LUI_Gradient", [[Interface\AddOns\LUI\textures\gradient32x32.tga]])
SML:Register("statusbar", "LUI_Minimalist", [[Interface\AddOns\LUI\textures\Minimalist.tga]])

local positions = {"TOP", "TOPRIGHT", "TOPLEFT","BOTTOM", "BOTTOMRIGHT", "BOTTOMLEFT","RIGHT", "LEFT", "CENTER"}
local growthY = {"UP", "DOWN"}
local growthX = {"LEFT", "RIGHT"}
local chatAlignments = {'LEFT', 'CENTER', 'RIGHT'}
local fontflags = {'OUTLINE', 'THICKOUTLINE', 'MONOCHROME', 'NONE'}
local frameBackgrounds = {'TOPLEFT', 'TOPRIGHT', 'TOPLEFT AND TOPRIGHT', 'BOTTOMLEFT AND BOTTOMRIGHT', 'BOTTOMRIGHT', 'BOTTOMLEFT', 'NONE'}
local barAnchors = {'BT4Bar1', 'BT4Bar2', 'BT4Bar3', 'BT4Bar4', 'BT4Bar5', 'BT4Bar6', 'BT4Bar7', 'BT4Bar8', 'BT4Bar9', 'BT4Bar10'}
local chatTextureAnchors = {'ChatFrame2', 'ChatFrame3', 'ChatFrame4', 'ChatFrame5', 'ChatFrame6', 'ChatFrame7', 'ChatFrame8', 'ChatFrame9', 'ChatFrame10'}
local valueFormat = {'Absolut', 'Absolut & Percent', 'Absolut Short', 'Absolut Short & Percent', 'Standard', 'Standard Short'}
local nameFormat = {'Name', 'Name + Level', 'Name + Level + Class', 'Name + Level + Race + Class', 'Level + Name', 'Level + Name + Class', 'Level + Class + Name', 'Level + Name + Race + Class', 'Level + Race + Class + Name'}
local nameLenghts = {'Short', 'Medium', 'Long'}
local editboxanchors = {'TOP', 'BOTTOM', 'INDIVIDUAL'}
local isLocked = false
local screen_height = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "%d+x(%d+)")
local screen_width = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "(%d+)x%d+")
local _, class = UnitClass("player")
local hooks = { }

local versions = {
	lui = 3025,
	omnicc = 30000,
	grid = 30000,
	pminimap = 30000,
	recount = 30000,
	omen = 30000,
	bartender = 30000,
	xloot = 30000,
	forte = 30000,
	tiptop = 30000,
	sbc = 30000,
	stuffing = 30000
}

local scale = UIParent:GetEffectiveScale()
local mult = 768/string.match(GetCVar("gxResolution"), "%d+x(%d+)")/scale
local function scale(x)
	return mult*math.floor(x/mult+.5)
end

------------------------------------------------------
-- / CREATING DEFAULTS / --
------------------------------------------------------

local defaults = {   
	profile = {
		General = {
			IsConfigured = false,
			WatchFrame_movable = true,
			AutoScale = true,
			AutoInvite = false,
			AutoInviteKeyword = "",
			AutoAcceptInvite = false,
			DamageFont = "neuropol",
			DamageFontSize = 38,
			DamageFontSizeCrit = 41,
			Info = {
				Gold = {
					Enable = true,
					X = "-200",
					Y = "0",
				},
				Bags = {
					Enable = true,
					X = "-50",
					Y = "0",
				},
				Armor = {
					Enable = true,
					X = "100",
					Y = "0",
				},
				Fps = {
					Enable = true,
					X = "260",
					Y = "0",
				},
				Memory = {
					Enable = true,
					X = "340",
					Y = "0",
				},
				Clock = {
					Enable = true,
					LocalTime = true,
					Time24 = true,
					ShowInstanceDifficulty = true,
					X = "-5",
					Y = "0",
				},
				Friends = {
					Enable = false,
					X = "-300",
					Y = "0",
				},
				Guild = {
					Enable = false,
					X = "-430",
					Y = "0",
				},
			},
			InfoFont = "vibroceb",
			InfoFontSize = 12,
			InfoColor = {
				r = 1,
				g = 1,
				b = 1,
			},
			Recount = {
				X = "-452",
				Y = "8",
			},
			Omen = {
				X = "428.6",
				Y = "26.5",
				IndividualAggrobarColor = false,
				ThemeColor = true,
				AggroBarColor = {
					r = 0.5,
					g = 0.5,
					b = 0.5,
				},
			},
			Grid = {
				X = "436",
				Y = "225",
				Background = "TOPLEFT",
				Width = "416",
			},
			Forte = {
				CDLock = "true",
				Lock = "true",
				X = "0",
				Y = "500",
				CDX = "0",
				CDY = "500",
				IndividualColor = false,
				IndividualSparkColor = false,
				UseHealthbarColor = true,
				UseThemeColor = true,
				Color = {
					r = 0.24,
					g = 0.24,
					b = 0.24,
				},
				SparkColor = {
					r = 0.8,
					g = 0.8,
					b = 0.8,
				},
				Timer_PaddingX = "0",
				Timer_PaddingY = "0",
				Cooldown_PaddingX = "0",
				Cooldown_PaddingY = "0",
			},
		},
		Minimap = {
			Enable = true,
			ShowTextures = true,
			AlwaysUpFrameX = "300",
			AlwaysUpFrameY = "-35",
			VehicleSeatIndicatorX = "-10",
			VehicleSeatIndicatorY = "-225",
			DurabilityFrameX = "-20",
			DurabilityFrameY = "-220",
			WatchFrameX = "-100",
			WatchFrameY = "-300",
			Boss1TargetFrameX = "-20",
			Boss1TargetFrameY = "-150",
			CaptureX = "-5",
			CaptureY = "-205",
			TicketX = "-175",
			TicketY = "-70",
		},
		Frames = {
			AlwaysShowMinimap = false,
			AlwaysShowChat = false,
			AlwaysShowOmen = false,
			AlwaysShowRecount = false,
			AlwaysShowGrid = false,
			AlwaysShowMicroMenu = true,
			IsMinimapShown = false,
			IsChatShown = false,
			IsOmenShown = false,
			IsRecountShown = false,
			IsGridShown = false,
			UseFullTexture_Chat = false,
			UseFullTexture_Omen = false,
			UseFullTexture_Recount = false,
			UseFullTexture_Grid = false,
			IndividualColor = false,
			IndividualColor_r = 0.75,
			IndividualColor_g = 0.25,
			IndividualColor_b = 0.20,
			IndividualColor_a = 0.65,
			IndividualFillColor_r = 0.75,
			IndividualFillColor_g = 0.25,
			IndividualFillColor_b = 0.20,
			IndividualFillColor_a = 0.65,
			IndividualBarColor_r = 0.75,
			IndividualBarColor_g = 0.25,
			IndividualBarColor_b = 0.20,
			IndividualBarColor_a = 0.65,
			IndividualSidebarColor_r = 0.75,
			IndividualSidebarColor_g = 0.25,
			IndividualSidebarColor_b = 0.20,
			IndividualSidebarColor_a = 0.65,
			IndividualMinimapColor_r = 0.75,
			IndividualMinimapColor_g = 0.25,
			IndividualMinimapColor_b = 0.20,
			IndividualMinimapColor_a = 0.65,
			IndividualMicroMenuColor_r = 0.75,
			IndividualMicroMenuColor_g = 0.25,
			IndividualMicroMenuColor_b = 0.20,
			IndividualTopMenuColor_r = 0.75,
			IndividualTopMenuColor_g = 0.25,
			IndividualTopMenuColor_b = 0.20,
			IndividualTopMenuColor_a = 0.20,
			IndividualOrbColor_r = 0.75,
			IndividualOrbColor_g = 0.25,
			IndividualOrbColor_b = 0.20,
			IsMicroMenuShown = false,
			Scheme = 1
		},
		Castbar = {
			Enable = true,
			Player = {
				Enable = true,
				Height = "33",
				Width = "360",
				X = "13",
				Y = "155",
				Texture = "LUI_Gradient",
				TextureBG = "LUI_Minimalist",
				IndividualColor = false,
				Latency = true,
				Icon = true,
				Text = {
					Name = {
						Enable = true,
						Font = "neuropol",
						Size = 15,
						OffsetX = "5",
						OffsetY = "1",
					},
					Time = {
						Enable = true,
						ShowMax = true,
						Font = "neuropol",
						Size = 13,
						OffsetX = "-5",
						OffsetY = "1",
					},
				},
				Border = {
					Texture = "glow",
					Thickness = "4",
					Inset = {
						left = "3",
						right = "3",
						top = "3",
						bottom = "3",
					},
				},
				Colors = {
					Bar = {
						r = 0.13,
						g = 0.59,
						b = 1,
						a = 0.68,
					},
					Background = {
						r = 0.15,
						g = 0.15,
						b = 0.15,
						a = 0.67,
					},
					Latency = {
						r = 0.11,
						g = 0.11,
						b = 0.11,
						a = 0.74,
					},
					Border = {
						r = 0,
						g = 0,
						b = 0,
						a = 0.7,
					},
					Name = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
					Time = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
				},
			},
			Target = {
				Enable = true,
				Height = "33",
				Width = "360",
				X = "13",
				Y = "205",
				Texture = "LUI_Gradient",
				TextureBG = "LUI_Minimalist",
				IndividualColor = false,
				Icon = true,
				Text = {
					Name = {
						Enable = true,
						Font = "neuropol",
						Size = 15,
						OffsetX = "5",
						OffsetY = "1",
					},
					Time = {
						Enable = true,
						ShowMax = true,
						Font = "neuropol",
						Size = 13,
						OffsetX = "-5",
						OffsetY = "1",
					},
				},
				Border = {
					Texture = "glow",
					Thickness = "4",
					Inset = {
						left = "3",
						right = "3",
						top = "3",
						bottom = "3",
					},
				},
				Colors = {
					Bar = {
						r = 0.13,
						g = 0.59,
						b = 1,
						a = 0.68,
					},
					Background = {
						r = 0.15,
						g = 0.15,
						b = 0.15,
						a = 0.67,
					},
					Border = {
						r = 0,
						g = 0,
						b = 0,
						a = 0.7,
					},
					Name = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
					Time = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
				},
			},
			Focus = {
				Enable = true,
				Height = "26",
				Width = "200",
				X = "0",
				Y = "70",
				Texture = "LUI_Gradient",
				TextureBG = "LUI_Minimalist",
				IndividualColor = false,
				Icon = false,
				Text = {
					Name = {
						Enable = true,
						Font = "neuropol",
						Size = 13,
						OffsetX = "5",
						OffsetY = "1",
					},
					Time = {
						Enable = true,
						ShowMax = false,
						Font = "neuropol",
						Size = 13,
						OffsetX = "-5",
						OffsetY = "1",
					},
				},
				Border = {
					Texture = "glow",
					Thickness = "4",
					Inset = {
						left = "3",
						right = "3",
						top = "3",
						bottom = "3",
					},
				},
				Colors = {
					Bar = {
						r = 0.13,
						g = 0.59,
						b = 1,
						a = 0.68,
					},
					Background = {
						r = 0.15,
						g = 0.15,
						b = 0.15,
						a = 0.67,
					},
					Border = {
						r = 0,
						g = 0,
						b = 0,
						a = 0.7,
					},
					Name = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
					Time = {
						r = 0.9,
						g = 0.9,
						b = 0.9,
					},
				},
			},
		},
		Theme = {
			Design = 2,
			IndividualColor = false,
			IndividualColor_r = 0.75,
			IndividualColor_g = 0.25,
			IndividualColor_b = 0.20,
			IndividualColor_a = 0.65
		},
		SidebarRight = { 
			Enable = true,
			OpenInstant = false,
			Offset = "0",
			IsOpen = false,
		},
		SidebarLeft = {
			Enable = false,
			OpenInstant = false,
			Offset = "0",
			IsOpen = false,
		},
		Bars = {
			Amount = 2,
			Scale = 0.9,
			PositionX = "-240",
			PositionY = "60",
			Anchor = "BT4Bar2",
			SidebarRightAnchor = "BT4Bar10",
			SidebarLeftAnchor = "BT4Bar9",
			OffsetX = "200",
			OffsetY = "-70",
			AnimationHeight = "35",
			Animation = true,
			Anchor2 = "BT4Bar1",
			ShowBottom = true,
			OffsetBottomX = "210",
			OffsetBottomY = "-105",
		},
		oUF = {
			Settings = {
				Enable = true,
				show_v2_textures = true,
			},
			Colors = {
				Class = {
					Warrior = {
						r = "1",
						g = "0.78",
						b = "0.55",
					},
					Priest = {
						r = "0.9",
						g = "0.9",
						b = "0.9",
					},
					Druid = {
						r = "1",
						g = "0.44",
						b = "0.15",
					},
					Hunter = {
						r = "0.22",
						g = "0.91",
						b = "0.18",
					},
					Mage = {
						r = "0.12",
						g = "0.58",
						b = "0.89",
					},
					Paladin = {
						r = "0.96",
						g = "0.21",
						b = "0.73",
					},
					Shaman = {
						r = "0.04",
						g = "0.39",
						b = "0.98",
					},
					Warlock = {
						r = "0.57",
						g = "0.22",
						b = "1",
					},
					Rogue = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
					DeathKnight = {
						r = "0.8",
						g = "0.1",
						b = "0.1",
					},
				},
				Power = {
					Mana = {
						r = "0.31",
						g = "0.45",
						b = "0.63",
					},
					Rage = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Focus = {
						r = "0.71",
						g = "0.43",
						b = "0.27",
					},
					Energy = {
						r = "0.65",
						g = "0.63",
						b = "0.35",
					},
					Runes = {
						r = "0.55",
						g = "0.57",
						b = "0.61",
					},
					RunicPower = {
						r = "0",
						g = "0.82",
						b = "1",
					},
					AmmoSlot = {
						r = "0.8",
						g = "0.6",
						b = "0",
					},
					Fuel = {
						r = "0",
						g = "0.55",
						b = "0.5",
					},
				},
				Runes = {
					Rune1 = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Rune2 = {
						r = "0.33",
						g = "0.59",
						b = "0.33",
					},
					Rune3 = {
						r = "0.31",
						g = "0.45",
						b = "0.63",
					},
					Rune4 = {
						r = "0.84",
						g = "0.75",
						b = "0.65",
					},
				},
				Happiness = {
					Happiness1 = {
						r = "0.8",
						g = "0.05",
						b = "0.05",
					},
					Happiness2 = {
						r = "0.85",
						g = "0.80",
						b = "0.30",
					},
					Happiness3 = {
						r = "0.05",
						g = "0.95",
						b = "0.05",
					},
				},
				Tapped = {
					r = "0.55",
					g = "0.57",
					b = "0.61",
				},
				Smooth = {
					Smooth1 = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Smooth2 = {
						r = "0.69",
						g = "0.69",
						b = "0.31",
					},
					Smooth3 = {
						r = "0.31",
						g = "0.69",
						b = "0.31",
					},
				},
				Runebar = {
					Rune1 = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Rune2 = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Rune3 = {
						r = "0.33",
						g = "0.59",
						b = "0.33",
					},
					Rune4 = {
						r = "0.33",
						g = "0.59",
						b = "0.33",
					},
					Rune5 = {
						r = "0.31",
						g = "0.45",
						b = "0.63",
					},
					Rune6 = {
						r = "0.31",
						g = "0.45",
						b = "0.63",
					},
				},
				ComboPoints = {
					Combo1 = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
					Combo2 = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
					Combo3 = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
					Combo4 = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
					Combo5 = {
						r = "0.95",
						g = "0.86",
						b = "0.16",
					},
				},
				Diff = {
					Diff1 = {
						r = "0.69",
						g = "0.31",
						b = "0.31",
					},
					Diff2 = {
						r = "0.71",
						g = "0.43",
						b = "0.27",
					},
					Diff3 = {
						r = "0.84",
						g = "0.75",
						b = "0.65",
					},
					Diff4 = {
						r = "0.33",
						g = "0.59",
						b = "0.33",
					},
					Diff5 = {
						r = "0.55",
						g = "0.57",
						b = "0.61",
					},
				},
				Totems = {
					Fire = {
						r = "0.752",
						g = "0.172",
						b = "0.02",
					},
					Earth = {
						r = "0.741",
						g = "0.580",
						b = "0.04",
					},
					Water = {
						r = "0",
						g = "0.443",
						b = "0.631",
					},
					Air = {
						r = "0.6",
						g = "1.0",
						b = "0.945",
					},
				},
			},
			Player = {
				Height = "43",
				Width = "250",
				X = "-200",
				Y = "-200",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "30",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = true,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "17",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Totems = {
					Enable = true,
					X = "0",
					Y = "0.5",
					Height = "8",
					Width = "250",
					Texture = "LUI_Minimalist",
					Multiplier = 0.5,
					Lock = true,
				},
				Runes = {
					Enable = true,
					X = "0",
					Y = "0.5",
					Height = "8",
					Width = "250",
					Texture = "LUI_Minimalist",
					Padding = 1,
					Lock = true,
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "110",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = true,
						Size = 15,
						X = "16",
						Y = "10",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = true,
						Size = 17,
						X = "0",
						Y = "10",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = true,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "10",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Level + Name",
						Length = "Medium",
						ColorNameByClass = true,
						ColorClassByClass = true,
						ColorLevelByDifficulty = true,
						ShowClassification = true,
						ShortClassification = false,
					},
					Health = {
						Enable = true,
						Font = "Prototype",
						Size = 28,
						X = "0",
						Y = "-31",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "BOTTOMRIGHT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Standard",
						ShowDead = false,
					},
					Power = {
						Enable = true,
						Font = "Prototype",
						Size = 21,
						X = "0",
						Y = "-52",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "BOTTOMRIGHT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Standard",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 16,
						X = "0",
						Y = "6",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 14,
						X = "0",
						Y = "-15",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 15,
						X = "-3",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "BOTTOMRIGHT",
						RelativePoint = "BOTTOMRIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 13,
						X = "-3",
						Y = "-15",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					DruidMana = {
						Enable = true,
						ShowIndicator = true,
						ShowPercent = true,
						ShowShortValue = true,
						HideIfNoPower = true,
						Font = "vibrocen",
						Outline = "NONE",
						Size = 12,
						X = "1",
						Y = "0",
						Color = {
							r = 1,
							g = 0.49,
							b = 0.04,
						},
					},
				},
			},
			Target = {
				Height = "43",
				Width = "250",
				X = "200",
				Y = "-200",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "30",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					Tapping = false,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = true,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "17",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				ComboPoints = {
					Enable = true,
					ShowAlways = false,
					X = "0",
					Y = "0.5",
					Height = "5",
					Width = "249",
					Texture = "Ruben",
					Multiplier = 0.4,
					BackgroundColor = {
						Enable = true,
						r = 0.23,
						g = 0.23,
						b = 0.23,
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = true,
						Size = 15,
						X = "16",
						Y = "10",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = true,
						Size = 17,
						X = "0",
						Y = "10",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = true,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "10",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 25,
						X = "5",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Level + Name",
						Length = "Medium",
						ColorNameByClass = true,
						ColorClassByClass = true,
						ColorLevelByDifficulty = true,
						ShowClassification = true,
						ShortClassification = false,
					},
					Health = {
						Enable = true,
						Font = "Prototype",
						Size = 28,
						X = "0",
						Y = "-31",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMLEFT",
						Format = "Standard",
						ShowDead = false,
					},
					Power = {
						Enable = true,
						Font = "Prototype",
						Size = 21,
						X = "0",
						Y = "-51",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMLEFT",
						Format = "Standard",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 16,
						X = "0",
						Y = "6",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			ToT = {
				Enable = true,
				Height = "24",
				Width = "200",
				X = "435",
				Y = "-250",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = true,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.3,
						g = 0.3,
						b = 0.3,
					},
				},
				Power = {
					Enable = false,
					Height = "5",
					Padding = "-2",
					ColorClass = false,
					ColorType = true,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "11",
					Texture = "LUI_Minimalist",
					Padding = "-7",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "10",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "10",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "5",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "LEFT",
						RelativePoint = "LEFT",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 14,
						X = "-5",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
						ShowDead = false,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			ToToT = {
				Enable = false,
				Height = "24",
				Width = "200",
				X = "465",
				Y = "-285",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = true,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.3,
						g = 0.3,
						b = 0.3,
					},
				},
				Power = {
					Enable = false,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "5",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "LEFT",
						RelativePoint = "LEFT",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 14,
						X = "-5",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
						ShowDead = false,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			Focus = {
				Enable = true,
				Height = "24",
				Width = "200",
				X = "-435",
				Y = "-250",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = true,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.3,
						g = 0.3,
						b = 0.3,
					},
				},
				Power = {
					Enable = false,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "5",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "LEFT",
						RelativePoint = "LEFT",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 14,
						X = "-5",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
						ShowDead = false,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			FocusTarget = {
				Enable = false,
				Height = "24",
				Width = "200",
				X = "-465",
				Y = "-285",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = true,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.3,
						g = 0.3,
						b = 0.3,
					},
				},
				Power = {
					Enable = false,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "5",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "LEFT",
						RelativePoint = "LEFT",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 14,
						X = "-5",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
						ShowDead = false,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			Pet = {
				Enable = true,
				Height = "43",
				Width = "130",
				X = "0",
				Y = "-200",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "30",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					ColorHappy = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = true,
					Height = "10",
					Padding = "-2",
					ColorClass = false,
					ColorType = false,
					ColorHappy = true,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = false,
						Size = 55,
						X = "0",
						Y = "10",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 19,
						X = "0",
						Y = "-22",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 16,
						X = "0",
						Y = "6",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			PetTarget = {
				Enable = true,
				Height = "24",
				Width = "130",
				X = "0",
				Y = "-160",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = false,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "0",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						Format = "Name",
						Length = "Short",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			Boss = {
				Enable = true,
				Padding = "30",
				Height = "24",
				Width = "130",
				X = "0",
				Y = "-160",
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "24",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = false,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = false,
						Size = 15,
						X = "16",
						Y = "0",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = false,
						Size = 17,
						X = "0",
						Y = "0",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = false,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "0",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 15,
						X = "0",
						Y = "0",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						Format = "Name",
						Length = "Short",
						ColorNameByClass = false,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			Party = {
				Enable = true,
				Height = "43",
				Width = "170",
				X = "150",
				Y = "100",
				Padding = "50",
				ShowPlayer = false,
				ShowInRaid = false,
				Border = {
					EdgeFile = "glow",
					EdgeSize = 5,
					Insets = {
						Left = "3",
						Right = "3",
						Top = "3",
						Bottom = "3",
					},
					Color = {
						r = "0",
						g = "0",
						b = "0",
						a = "1",
					},
				},
				Backdrop = {
					Texture = "Blizzard Tooltip",
					Padding = {
						Left = "-4",
						Right = "4",
						Top = "4",
						Bottom = "-4",
					},
					Color = {
						r = 0,
						g = 0,
						b = 0,
						a = 1,
					},
				},
				Health = {
					Height = "30",
					Padding = "0",
					ColorClass = false,
					ColorGradient = false,
					Texture = "LUI_Gradient",
					TextureBG = "LUI_Gradient",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = true,
						r = 0.2509803921568627,
						g = 0.2509803921568627,
						b = 0.2509803921568627,
					},
				},
				Power = {
					Enable = true,
					Height = "10",
					Padding = "-2",
					ColorClass = true,
					ColorType = false,
					Texture = "LUI_Minimalist",
					TextureBG = "LUI_Minimalist",
					BGAlpha = 1,
					BGMultiplier = 0.4,
					Smooth = true,
					IndividualColor = {
						Enable = false,
						r = 0.8,
						g = 0.8,
						b = 0.8,
					},
				},
				Full = {
					Enable = false,
					Height = "14",
					Texture = "LUI_Minimalist",
					Padding = "-12",
					Alpha = 1,
					Color = {
						r = "0.11",
						g = "0.11",
						b = "0.11",
						a = "1",
					},
				},
				Portrait = {
					Enable = false,
					Height = "43",
					Width = "90",
					X = "0",
					Y = "0",
				},
				Icons = {
					Lootmaster = {
						Enable = true,
						Size = 16,
						X = "17",
						Y = "10",
						Point = "TOPLEFT",
					},
					Leader = {
						Enable = true,
						Size = 17,
						X = "0",
						Y = "10",
						Point = "TOPLEFT",
					},
					Role = {
						Enable = true,
						Size = 22,
						X = "15",
						Y = "10",
						Point = "TOPRIGHT",
					},
					Raid = {
						Enable = true,
						Size = 55,
						X = "0",
						Y = "10",
						Point = "CENTER",
					},
					Resting = {
						Enable = false,
						Size = 27,
						X = "-12",
						Y = "13",
						Point = "TOPLEFT",
					},
					Combat = {
						Enable = false,
						Size = 27,
						X = "-15",
						Y = "-30",
						Point = "BOTTOMLEFT",
					},
					PvP = {
						Enable = false,
						Size = 35,
						X = "-12",
						Y = "10",
						Point = "TOPLEFT",
					},
				},
				Texts = {
					Name = {
						Enable = true,
						Font = "Prototype",
						Size = 19,
						X = "0",
						Y = "-20",
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "OUTLINE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						Format = "Name",
						Length = "Medium",
						ColorNameByClass = true,
						ColorClassByClass = false,
						ColorLevelByDifficulty = false,
						ShowClassification = false,
						ShortClassification = false,
					},
					Health = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-43",
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
						ShowDead = false,
					},
					Power = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "-66",
						ColorClass = true,
						ColorType = false,
						IndividualColor = {
							Enable = false,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "BOTTOMLEFT",
						RelativePoint = "BOTTOMRIGHT",
						Format = "Absolut Short",
					},
					HealthPercent = {
						Enable = true,
						Font = "Prototype",
						Size = 16,
						X = "0",
						Y = "6",
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "1",
							g = "1",
							b = "1",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
						ShowDead = true,
					},
					PowerPercent = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "CENTER",
						RelativePoint = "CENTER",
					},
					HealthMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorGradient = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
					PowerMissing = {
						Enable = false,
						Font = "Prototype",
						Size = 24,
						X = "0",
						Y = "0",
						ShortValue = true,
						ShowAlways = false,
						ColorClass = false,
						ColorType = false,
						IndividualColor = {
							Enable = true,
							r = "0",
							g = "0",
							b = "0",
						},
						Outline = "NONE",
						Point = "RIGHT",
						RelativePoint = "RIGHT",
					},
				},
			},
			auras = {
				player_auras_enable = true,
				auratimer_font = "Prototype",
				auratimer_size = 12,
				auratimer_flag = "OUTLINE",
				player = {
					num_row = "16",
					num_max = "32",
					spacing_row = "-52",
					spacing = "12",
					growth = "RIGHT",
					anchor = "TOPLEFT",
					buffs = {
						x = "30",
						y = "-35",
						size = "29",
					},
					debuffs = {
						x = "30",
						y = "-160",
						size = "29",
					},
				},
				player2 = {
					buffs_playeronly = false,
					buffs_enable = false,
					buffs_auratimer = false,
					buffsX = "-0.5",
					buffsY = "-30",
					buffs_initialAnchor = "BOTTOMRIGHT",
					buffs_growthY = "DOWN",
					buffs_growthX = "LEFT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "8",
					debuffs_colorbytype = false,
					debuffs_playeronly = false,
					debuffs_enable = false,
					debuffs_auratimer = false,
					debuffsX = "-0.5",
					debuffsY = "-60",
					debuffs_initialAnchor = "BOTTOMLEFT",
					debuffs_growthY = "DOWN",
					debuffs_growthX = "RIGHT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
				party = {
					buffs_playeronly = false,
					buffs_auratimer = false,
					buffs_enable = false,
					buffsX = "0",
					buffsY = "-42",
					buffs_initialAnchor = "BOTTOMLEFT",
					buffs_growthY = "DOWN",
					buffs_growthX = "RIGHT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "8",
					debuffs_colorbytype = true,
					debuffs_auratimer = false,
					debuffs_enable = true,
					debuffsX = "35",
					debuffsY = "-5",
					debuffs_initialAnchor = "RIGHT",
					debuffs_growthY = "DOWN",
					debuffs_growthX = "RIGHT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
				target = {
					buffs_playeronly = false,
					buffs_enable = true,
					buffs_auratimer = false,
					buffsX = "-0.5",
					buffsY = "30",
					buffs_initialAnchor = "TOPLEFT",
					buffs_growthY = "UP",
					buffs_growthX = "RIGHT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "36",
					debuffs_colorbytype = false,
					debuffs_playeronly = false,
					debuffs_enable = true,
					debuffs_auratimer = false,
					debuffsX = "-0.5",
					debuffsY = "60",
					debuffs_initialAnchor = "TOPRIGHT",
					debuffs_growthY = "UP",
					debuffs_growthX = "LEFT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
				focus = {
					buffs_playeronly = false,
					buffs_enable = false,
					buffs_auratimer = false,
					buffsX = "-0.5",
					buffsY = "-30",
					buffs_initialAnchor = "BOTTOMRIGHT",
					buffs_growthY = "DOWN",
					buffs_growthX = "LEFT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "8",
					debuffs_colorbytype = false,
					debuffs_playeronly = false,
					debuffs_enable = false,
					debuffs_auratimer = false,
					debuffsX = "-0.5",
					debuffsY = "-60",
					debuffs_initialAnchor = "BOTTOMLEFT",
					debuffs_growthY = "DOWN",
					debuffs_growthX = "RIGHT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
				pet = {
					buffs_playeronly = false,
					buffs_enable = false,
					buffs_auratimer = false,
					buffsX = "-0.5",
					buffsY = "30",
					buffs_initialAnchor = "TOPLEFT",
					buffs_growthY = "UP",
					buffs_growthX = "RIGHT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "36",
					debuffs_colorbytype = false,
					debuffs_enable = false,
					debuffs_auratimer = false,
					debuffsX = "-0.5",
					debuffsY = "60",
					debuffs_initialAnchor = "TOPRIGHT",
					debuffs_growthY = "UP",
					debuffs_growthX = "LEFT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
				tot = {
					buffs_playeronly = false,
					buffs_enable = false,
					buffs_auratimer = false,
					buffsX = "-0.5",
					buffsY = "30",
					buffs_initialAnchor = "TOPLEFT",
					buffs_growthY = "UP",
					buffs_growthX = "RIGHT",
					buffs_size = "26",
					buffs_spacing = "2",
					buffs_num = "36",
					debuffs_colorbytype = false,
					debuffs_enable = false,
					debuffs_auratimer = false,
					debuffsX = "-0.5",
					debuffsY = "60",
					debuffs_initialAnchor = "TOPRIGHT",
					debuffs_growthY = "UP",
					debuffs_growthX = "LEFT",
					debuffs_size = "26",
					debuffs_spacing = "2",
					debuffs_num = "36",
				},
			},
		},
		Chat = {
			Enable = true,
			PreventDrag = true,
			Font = "Arial Narrow",
			Size = 14,
			Height = "171",
			Width = "380",
			X = "28",
			Y = "46",
			MouseWheel = {
				NormalSpeed = "3",
				CTRLSpeed = "6",
			},
			Flag = "NONE",
			SecondChatAnchor = "ChatFrame3",
			Justify = "LEFT",
			ShortChannelNames = false,
			ShowItemTooltips = true,
			Fading = false,
			SecondChatFrame = false,
			Tabs = {
				NotActiveAlpha = 0,
				ActiveAlpha = 0,
				LockDockedTabs = true,
			},
			Buttons = {
				Enable = false,
				Copy = {
					Enable = true,
					X = "0",
					Y = "-4",
					AlphaIn = 0.6,
					AlphaOut = 0.1,
				},
				Arrows = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "0",
					Y = "22",
				},
				BottomButton = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "0",
					Y = "-10",
				},
				SocialButton = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "-3",
					Y = "210",
				},
				MenuButton = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "0",
					Y = "85",
				},
				MinimizeButton = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "0",
					Y = "0",
				},
				ResizeButton = {
					Enable = false,
					AlphaIn = 1,
					AlphaOut = 0.5,
					X = "0",
					Y = "0",
				},
			},
			Editbox = {
				Font = "Arial Narrow",
				Size = 14,
				Flag = "NONE",
				ColorByChannel = false,
				Color = {
					Enable = false,
					r = 0,
					g = 0,
					b = 0,
					a = 0,
				},
				Border = {
					Texture = "glow",
					Thickness = "5",
					Inset = {
						left = "4",
						right = "4",
						top = "4",
						bottom = "4",
					},
				},
				Position = {
					Anchor = "TOP",
					X = "0",
					Y = "0",
				}
			}
		}
	}
}

local db_
local db = setmetatable({}, {
	__index = function(t, k)
		return db_[k]
	end,
	__newindex = function(t, k, v)
		db_[k] = v
	end
})

function CheckResolution()
	local ScreenWidth = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "(%d+)x%d+")
	local ScreenHeight = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "%d+x(%d+)")
	
	if ScreenWidth == "1280" and ScreenHeight == "1024" then
		-- Repostion Info Texts
		defaults.profile.General.Info.Bags.X = -100
		defaults.profile.General.Info.Armor.X = 10
		defaults.profile.General.Info.Fps.X = 120
		defaults.profile.General.Info.Memory.X = 190
		
		-- Repostion Recount
		defaults.profile.General.Recount.X = -968
		defaults.profile.General.Recount.Y = 863
		
		-- Reposition Omen
		defaults.profile.General.Omen.X = 5
		defaults.profile.General.Omen.Y = 882
		
		-- Repositon Auras
		defaults.profile.oUF.auras.player.spacing = "-12"
		defaults.profile.oUF.auras.player.anchor = "TOPRIGHT"
		defaults.profile.oUF.auras.player.growth = "LEFT"
		defaults.profile.oUF.auras.player.buffs.x = "-170"
		defaults.profile.oUF.auras.player.buffs.y = "-75"
		defaults.profile.oUF.auras.player.debuffs.x = "-170"
		defaults.profile.oUF.auras.player.debuffs.y = "-185"
	end
end
	
------------------------------------------------------
-- / CREATE ME A FRAME FUNC / --
------------------------------------------------------

local function create_me_a_frame(fart,fname,fparent,fwidth,fheight,fscale,fstrata,flevel,fpoint,frelativeFrame,frelativePoint,fofsx,fofsy,falpha,finherit)
	local f = CreateFrame(fart,fname,fparent,finherit)
	local sw = scale(fwidth)
	local sh = scale(fheight)
	local sx = scale(fofsx)
	local sy = scale(fofsy)
	f:SetWidth(sw)
	f:SetHeight(sh)
	--f:SetScale(fscale)
	f:SetFrameStrata(fstrata)
	f:SetFrameLevel(flevel)
	f:SetPoint(fpoint,frelativeFrame,frelativePoint,sx,sy)
	f:SetAlpha(falpha)
	return f  
end 
	
------------------------------------------------------
-- / ORB VARIABLES / --
------------------------------------------------------

function SetOrbVariables()
	local default_scale = 1
	local default_locked = 1
	local usegalaxy = 1
	local frame_to_scale
	
	local hglow1, hglow2, mglow1, mglow2, hfill, mfill
	local hgal1,hgal2,hgal3,mgal1,mgal2,mgal3
	local fog_smoother = 1.3
	
	if db.Frames.IndividualColor == true then
		orb_r = db.Frames.IndividualOrbColor_r
		orb_g = db.Frames.IndividualOrbColor_g 
		orb_b = db.Frames.IndividualOrbColor_b
	else
		orb_r = color_r
		orb_g = color_g
		orb_b = color_b
	end
	
	orbtab = {
	[0] = {r = orb_r, g = orb_g, b = orb_b, scale = 0.9, z = -12, x = -0.5, y = -0.8, anim = "SPELLS\WhiteRadiationFog.m2"},
	[1] = {r = 0.8, g = 0, b = 0, scale = 0.8, z = -12, x = 0.8, y = -1.7, anim = "SPELLS\\RedRadiationFog.m2"}, -- red
	[2] = {r = 0.2, g = 0.8, b = 0, scale = 0.75, z = -12, x = 0, y = -1.1, anim = "SPELLS\\GreenRadiationFog.m2"}, -- green
	[3] = {r = 0, g = 0.35,   b = 0.9, scale = 0.75, z = -12, x = 1.2, y = -1, anim = "SPELLS\\BlueRadiationFog.m2"}, -- blue
	[4] = {r = 0.9, g = 0.7, b = 0.1, scale = 0.75, z = -12, x = -0.3, y = -1.2, anim = "SPELLS\\OrangeRadiationFog.m2"}, -- yellow
	[5] = {r = 0.1, g = 0.8,   b = 0.7, scale = 0.9, z = -12, x = -0.5, y = -0.8, anim = "SPELLS\\WhiteRadiationFog.m2"}, -- runic
	}
	
	galaxytab = {
	[0] = {r = orb_g, g = orb_g, b = orb_b, },
	[1] = {r = 0.90, g = 0.1, b = 0.1, }, -- red
	[2] = {r = 0.25, g = 0.9, b = 0.25, }, -- green
	[3] = {r = 0, g = 0.35,   b = 0.9, }, -- blue
	[4] = {r = 0.9, g = 0.8, b = 0.35, }, -- yellow
	[5] = {r = 0.35, g = 0.9,   b = 0.9, }, -- runic
	}
end
  

------------------------------------------------------
-- / CREATE ME A ORB FRAME FUNC / --
------------------------------------------------------

local function create_me_a_orb_frame(fart,fname,fparent,fstrata,flevel,fwidth,fheight,fanchor,fxpos,fypos,fscale,fdrag,finherit)
	local f = CreateFrame(fart,fname,fparent,finherit)
	f:SetFrameStrata(fstrata)
	f:SetFrameLevel(flevel)
	f:SetWidth(fwidth)
	f:SetHeight(fheight)
	f:SetPoint(fanchor,fxpos,fypos)
	f:SetScale(fscale)
	return f 
end 
  
  
------------------------------------------------------
-- / CREATE ME A TEXTURE FUNC / --
------------------------------------------------------

local function create_me_a_texture(fhooked,tstrata,tfile,tspecial)
	local t = fhooked:CreateTexture(nil,tstrata)
	t:SetTexture(tfile)
	if tspecial == "fill" then
		t:SetPoint("BOTTOM",fhooked,"BOTTOM",0,0)
		t:SetWidth(fhooked:GetWidth())
		t:SetHeight(fhooked:GetHeight())
	else
		t:SetAllPoints(fhooked)
	end
	return t
end 


------------------------------------------------------
-- / CREATE ME A ORB GALAXY FUNC / --
------------------------------------------------------

local function create_me_a_galaxy(f,x,y,size,alpha,dur,tex,useorb)
	local h = CreateFrame("Frame",nil,f)
	h:SetHeight(size)
	h:SetWidth(size)
	h:SetPoint("CENTER",x,y-10)
	h:SetAlpha(alpha)
	h:SetFrameLevel(5)

	local t = h:CreateTexture()
	t:SetAllPoints(h)
	t:SetTexture("Interface\\AddOns\\LUI\\orbtex\\"..tex)
	t:SetBlendMode("ADD")
	t:SetVertexColor(galaxytab[useorb].r,galaxytab[useorb].g,galaxytab[useorb].b)
	h.t = t

	local ag = h:CreateAnimationGroup()
	h.ag = ag
	
	local a1 = h.ag:CreateAnimation("Rotation")
	a1:SetDegrees(360)
	a1:SetDuration(dur)
	h.ag.a1 = a1

	h:SetScript("OnUpdate",function(self,elapsed)
		local t = self.total
		if (not t) then
			self.total = 0
			return
		end
		t = t + elapsed
		if (t<1) then
			self.total = t
			return
		else
			h.ag:Play()
		end
	end)
	
	return h
end
  
  
------------------------------------------------------
-- / CREATE ORB FUNC / --
------------------------------------------------------

local function create_orb(orbname,orbsize,orbanchorframe,orbpoint,orbposx,orbposy,orbscale,orbfilltex,useorb)

	local orb1 = create_me_a_orb_frame("Button",orbname,orbanchorframe,"BACKGROUND",4,orbsize,orbsize,orbpoint,orbposx,orbposy,orbscale,nil)
	
	orb1:SetScript("OnEnter", function(self)
		OrbAlphaIn:Show()
	end)
	
	orb1:SetScript("OnLeave", function(self)
		OrbAlphaOut:Show()
	end)

	local orb1_fill = create_me_a_texture(orb1,"ARTWORK","Interface\\AddOns\\LUI\\orbtex\\"..orbfilltex,"fill")
	orb1_fill:SetVertexColor(orbtab[useorb].r,orbtab[useorb].g,orbtab[useorb].b)
	hfill = orb1_fill
	hgal1 = create_me_a_galaxy(orb1,0,13,40,0.9,35,"galaxy2",useorb)
	hgal2 = create_me_a_galaxy(orb1,0,10,65,0.9,45,"galaxy",useorb)
	hgal3 = create_me_a_galaxy(orb1,-5,10,53,0.9,18,"galaxy3",useorb)
end
	
------------------------------------------------------
-- / COLORS / --
------------------------------------------------------

function SetColors()

	classColorArray = {
		["WARRIOR"] = {1, 0.78, 0.55},
		["PRIEST"] = {0.9, 0.9, 0.9},
		["DRUID"] = {1, 0.44, 0.15},
		["HUNTER"] = {0.22, 0.91, 0.18},
		["MAGE"] = {0.12, 0.58, 0.89},
		["PALADIN"] = {0.96, 0.21, 0.73},
		["SHAMAN"] = {0.04, 0.39, 0.98},
		["WARLOCK"] = {0.57, 0.22, 1},
		["ROGUE"] = {0.95, 0.86, 0.16},
		["DEATH KNIGHT"] = {0.80, 0.1, 0.1},
		["DEATHKNIGHT"] = {0.80, 0.1, 0.1},
	}
	
	local pClass, pToken = UnitClass("player")
	classcolor = classColorArray[pToken]

	if db.Theme.IndividualColor == true then
		color_r = db.Theme.IndividualColor_r
		color_g = db.Theme.IndividualColor_g 
		color_b = db.Theme.IndividualColor_b
		color_a = db.Theme.IndividualColor_a
	else
		color_r = classcolor[1]
		color_g = classcolor[2]
		color_b = classcolor[3]
		color_a = 0.40
	end
	
	if db.Frames.IndividualColor == true then
		frame_r = db.Frames.IndividualColor_r
		frame_g = db.Frames.IndividualColor_g 
		frame_b = db.Frames.IndividualColor_b
		frame_a = db.Frames.IndividualColor_a
		
		fill_r = db.Frames.IndividualFillColor_r
		fill_g = db.Frames.IndividualFillColor_g 
		fill_b = db.Frames.IndividualFillColor_b
		fill_a = db.Frames.IndividualFillColor_a
		
		frameBar_r = db.Frames.IndividualBarColor_r
		frameBar_g = db.Frames.IndividualBarColor_g 
		frameBar_b = db.Frames.IndividualBarColor_b
		frameBar_a = db.Frames.IndividualBarColor_a
		
		sidebar_r = db.Frames.IndividualSidebarColor_r
		sidebar_g = db.Frames.IndividualSidebarColor_g
		sidebar_b = db.Frames.IndividualSidebarColor_b
		sidebar_a = db.Frames.IndividualSidebarColor_a
		
		minimap_r = db.Frames.IndividualMinimapColor_r
		minimap_g = db.Frames.IndividualMinimapColor_g 
		minimap_b = db.Frames.IndividualMinimapColor_b
		minimap_a = db.Frames.IndividualMinimapColor_a
		
		micro_r = db.Frames.IndividualMicroMenuColor_r
		micro_g = db.Frames.IndividualMicroMenuColor_g 
		micro_b = db.Frames.IndividualMicroMenuColor_b
		
		micro_r_bg = db.Frames.IndividualMicroMenuColor_r - 0.3
		micro_g_bg = db.Frames.IndividualMicroMenuColor_g - 0.3
		micro_b_bg = db.Frames.IndividualMicroMenuColor_b - 0.3
		
		top_r = db.Frames.IndividualTopMenuColor_r
		top_g = db.Frames.IndividualTopMenuColor_g 
		top_b = db.Frames.IndividualTopMenuColor_b
		top_a = db.Frames.IndividualTopMenuColor_a
	else
		frame_r = color_r
		frame_g = color_g
		frame_b = color_b
		frame_a = color_a
		
		fill_r = color_r
		fill_g = color_g
		fill_b = color_b
		fill_a = color_a
		
		frameBar_r = color_r
		frameBar_g = color_g
		frameBar_b = color_b
		frameBar_a = color_a
		
		sidebar_r = color_r
		sidebar_g = color_g
		sidebar_b = color_b
		sidebar_a = color_a
		
		minimap_r = color_r
		minimap_g = color_g
		minimap_b = color_b
		minimap_a = 1
		
		micro_r = color_r + 0.25
		micro_g = color_g + 0.25
		micro_b = color_b + 0.25
		
		micro_r_bg = color_r - 0.3
		micro_g_bg = color_g - 0.3
		micro_b_bg = color_b - 0.3
		
		top_r = color_r
		top_g = color_g
		top_b = color_b
		top_a = 0.6
	end
end

function CreateOrb()
	local default_scale = 1
	local default_locked = 1
	local usegalaxy = 1
	local frame_to_scale

	local navi_anchor = create_me_a_frame("FRAME","navi_anchor",UIParent,100,100,default_scale,"BACKGROUND",1,"TOP",UIParent,"TOP",17,15,1)
	create_orb("LUI_Orb",55,navi_anchor,"CENTER",-17,0,1,"orb_filling8",0)
end


------------------------------------------------------
-- / NAVIGATION FRAMES / --
------------------------------------------------------

function SetNavigationFrames()
	CreateOrb()

	local top_frame = create_me_a_frame("FRAME","top_frame",UIParent,1024,1024,1,"BACKGROUND",1,"TOP",UIParent,"TOP",17,8,1)
	top_frame:SetBackdrop({bgFile=fdir.."top.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	top_frame:SetBackdropBorderColor(0,0,0,0)
	top_frame:Show()
	
	local top_frame2 = create_me_a_frame("FRAME","top_frame2",UIParent,1035,1024,1,"BACKGROUND",0,"TOP",UIParent,"TOP",17,5,1)
	top_frame2:SetBackdrop({bgFile=fdir.."top_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	top_frame2:SetBackdropColor(color_r,color_g,color_b,color_a)
	top_frame2:SetBackdropBorderColor(0,0,0,0)
	top_frame2:Show()
	
	ring = create_me_a_frame("FRAME","orb_ring",LUI_Orb,68,68,1,"LOW",0,"CENTER",LUI_Orb,"CENTER",1,0,0)
	ring:SetBackdrop({bgFile=fdir.."ring_inner.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ring:SetBackdropColor(color_r,color_g,color_b,1)
	ring:SetBackdropBorderColor(0,0,0,0)
	ring:Show()
	
	local ring2 = create_me_a_frame("FRAME","orb_ring2",LUI_Orb,103,103,1,"LOW",1,"CENTER",LUI_Orb,"CENTER",0,-1,1)
	ring2:SetBackdrop({bgFile=fdir.."ring.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ring2:SetBackdropColor(0.25,0.25,0.25,1)
	ring2:SetBackdropBorderColor(0,0,0,0)
	ring2:Show()
	
	local ring3 = create_me_a_frame("FRAME","orb_ring3",LUI_Orb,107,107,1,"LOW",2,"CENTER",LUI_Orb,"CENTER",1,1,1)
	ring3:SetBackdrop({bgFile=fdir.."ring_inner.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	ring3:SetBackdropColor(0.25,0.25,0.25,0.7)
	ring3:SetBackdropBorderColor(0,0,0,0)
	ring3:Hide()
	
	ring4 = create_me_a_frame("FRAME","orb_ring4",LUI_Orb,115,115,1,"LOW",1,"CENTER",LUI_Orb,"CENTER",0,-1,1)
	ring4:SetBackdrop({bgFile=fdir.."ring_inner2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	--ring4:SetBackdropColor(0,0,0,0)
	ring4:SetBackdropBorderColor(0,0,0,0)
	ring4:Show()
	
	ring5 = create_me_a_frame("FRAME","orb_ring5",LUI_Orb,118,118,1,"LOW",2,"CENTER",LUI_Orb,"CENTER",0,-1,1)
	ring5:SetBackdrop({bgFile=fdir.."ring_inner3.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ring5:SetBackdropColor(0.25,0.25,0.25,0.7)
	ring5:SetBackdropBorderColor(0,0,0,0)
	ring5:Hide()
	
	ring6 = create_me_a_frame("FRAME","orb_ring6",LUI_Orb,115,115,1,"LOW",0,"CENTER",LUI_Orb,"CENTER",0,-1,1)
	ring6:SetBackdrop({bgFile=fdir.."ring_inner4.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ring6:SetBackdropColor(0.25,0.25,0.25,0.7)
	--ring6:SetBackdropColor(color_r,color_g,color_b,0.6)
	ring6:SetBackdropBorderColor(0,0,0,0)
	ring6:Show()
	
	local ring7 = create_me_a_frame("FRAME","orb_ring7",LUI_Orb,77,75,1,"LOW",3,"CENTER",LUI_Orb,"CENTER",1,-1,1)
	ring7:SetBackdrop({bgFile=fdir.."ring.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	--ring7:SetBackdropColor(0.25,0.25,0.25,1)
	--ring7:SetBackdropColor(color_r,color_g,color_b,0.9)
	ring7:SetBackdropBorderColor(0,0,0,0)
	ring7:Show()
	
	menu_button1 = create_me_a_frame("FRAME","menu_button_chat",LUI_Orb,126,120,1,"LOW",1,"LEFT",LUI_Orb,"LEFT",-176,73,0)
	menu_button1:SetBackdrop({bgFile=fdir.."button_left2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button1:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button1:SetBackdropBorderColor(0,0,0,0)
	menu_button1:Show()
	
	local menu_button1_hover = create_me_a_frame("FRAME","menu_button_chat_hover",LUI_Orb,124,120,1,"LOW",1,"LEFT",LUI_Orb,"LEFT",-176,73,0)
	menu_button1_hover:SetBackdrop({bgFile=fdir.."button_left2_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button1_hover:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button1_hover:SetBackdropBorderColor(0,0,0,0)
	menu_button1_hover:Show()
	
	local menu_button1_frame = create_me_a_frame("BUTTON","menu_button_chat_frame",menu_button_chat,70,30,1,"LOW",2,"CENTER",menu_button_chat,"CENTER",-5,-42,0)
	menu_button1_frame:SetBackdrop({bgFile=fdir.."button_left2_anchor.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button1_frame:SetBackdropBorderColor(0,0,0,0)
	menu_button1_frame:Show()
	
	menu_button2 = create_me_a_frame("FRAME","menu_button_omen",LUI_Orb,63,67,1,"LOW",1,"LEFT",LUI_Orb,"LEFT",-74,42,0)
	menu_button2:SetBackdrop({bgFile=fdir.."button_left1.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button2:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button2:SetBackdropBorderColor(0,0,0,0)
	menu_button2:Show()
	
	local menu_button2_hover = create_me_a_frame("FRAME","menu_button_omen_hover",LUI_Orb,63,60,1,"LOW",1,"LEFT",LUI_Orb,"LEFT",-74,40,0)
	menu_button2_hover:SetBackdrop({bgFile=fdir.."button_left1_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button2_hover:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button2_hover:SetBackdropBorderColor(0,0,0,0)
	menu_button2_hover:Show()
	
	local menu_button2_frame = create_me_a_frame("BUTTON","menu_button_omen_frame",menu_button_omen,63,30,1,"LOW",2,"CENTER",menu_button_omen,"CENTER",0,-12,0)
	menu_button2_frame:SetBackdrop({bgFile=fdir.."button_left2_anchor.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button2_frame:SetBackdropBorderColor(0,0,0,0)
	menu_button2_frame:Show()
	
	menu_button3 = create_me_a_frame("FRAME","menu_button_recount",LUI_Orb,63,67,1,"LOW",1,"RIGHT",LUI_Orb,"RIGHT",77,45,0)
	menu_button3:SetBackdrop({bgFile=fdir.."button_right1.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button3:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button3:SetBackdropBorderColor(0,0,0,0)
	menu_button3:Show()
	
	local menu_button3_hover = create_me_a_frame("FRAME","menu_button_recount_hover",LUI_Orb,63,60,1,"LOW",1,"RIGHT",LUI_Orb,"RIGHT",77,43,0)
	menu_button3_hover:SetBackdrop({bgFile=fdir.."button_right1_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button3_hover:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button3_hover:SetBackdropBorderColor(0,0,0,0)
	menu_button3_hover:Show()
	
	local menu_button3_frame = create_me_a_frame("BUTTON","menu_button_recount_frame",menu_button_recount,63,30,1,"LOW",2,"CENTER",menu_button_recount,"CENTER",0,-12,0)
	menu_button3_frame:SetBackdrop({bgFile=fdir.."button_left2_anchor.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button3_frame:SetBackdropBorderColor(0,0,0,0)
	menu_button3_frame:Show()
	
	menu_button4 = create_me_a_frame("FRAME","menu_button_grid",LUI_Orb,126,120,1,"LOW",1,"RIGHT",LUI_Orb,"RIGHT",184,71,0)
	menu_button4:SetBackdrop({bgFile=fdir.."button_right2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button4:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button4:SetBackdropBorderColor(0,0,0,0)
	menu_button4:Show()
	
	local menu_button4_hover = create_me_a_frame("FRAME","menu_button_grid_hover",LUI_Orb,124,120,1,"LOW",1,"RIGHT",LUI_Orb,"RIGHT",182,71,0)
	menu_button4_hover:SetBackdrop({bgFile=fdir.."button_right2_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button4_hover:SetBackdropColor(top_r,top_g,top_b,top_a)
	menu_button4_hover:SetBackdropBorderColor(0,0,0,0)
	menu_button4_hover:Show()
	
	local menu_button4_frame = create_me_a_frame("BUTTON","menu_button_grid_frame",menu_button_grid,78,30,1,"LOW",2,"CENTER",menu_button_grid,"CENTER",0,-42,0)
	menu_button4_frame:SetBackdrop({bgFile=fdir.."button_left2_anchor.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=-0, right=0, top=0, bottom=0}})
	menu_button4_frame:SetBackdropBorderColor(0,0,0,0)
	menu_button4_frame:Show()
	
	------------------------------------------------------
	-- / TOP NAVIGATION / --
	------------------------------------------------------

	menu_button1_frame:RegisterForClicks("AnyUp")
	menu_button1_frame:SetScript("OnClick", function(self)
		if menu_button1:GetAlpha() == 0 then
			ChatButtonAlphaIn:Show()
			ChatAlphaIn:Show()
			db.Frames.IsChatShown = true
		else
			ChatButtonAlphaOut:Show()
			ChatAlphaOut:Show()
			db.Frames.IsChatShown = false
		end
	end)
	
	menu_button1_frame:SetScript("OnEnter", function(self)
		menu_button1_hover:SetAlpha(1)
	end)
	
	menu_button1_frame:SetScript("OnLeave", function(self)
		menu_button1_hover:SetAlpha(0)
	end)
	
	menu_button2_frame:RegisterForClicks("AnyUp")
	menu_button2_frame:SetScript("OnClick", function(self)
		if IsAddOnLoaded("Omen") then
			if menu_button2:GetAlpha() == 0 then
				OmenButtonAlphaIn:Show()
				Omen.Anchor:Show()
				OmenAlphaIn:Show()
				db.Frames.IsOmenShown = true
			else
				OmenButtonAlphaOut:Show()
				OmenAlphaOut:Show()
				db.Frames.IsOmenShown = false
			end
		end
	end)
	
	menu_button2_frame:SetScript("OnEnter", function(self)
		menu_button2_hover:SetAlpha(1)
	end)
	
	menu_button2_frame:SetScript("OnLeave", function(self)
		menu_button2_hover:SetAlpha(0)
	end)
	
	menu_button3_frame:RegisterForClicks("AnyUp")
	menu_button3_frame:SetScript("OnClick", function(self)
		if IsAddOnLoaded("Recount") then
			if menu_button3:GetAlpha() == 0 then
				RecountAlphaIn:Show()
				DPSButtonAlphaIn:Show()
				db.Frames.IsRecountShown = true
			else
				RecountAlphaOut:Show()
				DPSButtonAlphaOut:Show()
				db.Frames.IsRecountShown = false
			end
		end
	end)
	
	menu_button3_frame:SetScript("OnEnter", function(self)
		menu_button3_hover:SetAlpha(1)
	end)
	
	menu_button3_frame:SetScript("OnLeave", function(self)
		menu_button3_hover:SetAlpha(0)
	end)
	
	menu_button4_frame:RegisterForClicks("AnyUp")
	menu_button4_frame:SetScript("OnClick", function(self)
		if IsAddOnLoaded("Grid") then
			if menu_button4:GetAlpha() == 0 then
				GridAlphaIn:Show()
				GridButtonAlphaIn:Show()
				db.Frames.IsGridShown = true
			else
				GridAlphaOut:Show()
				GridButtonAlphaOut:Show()
				db.Frames.IsGridShown = false
			end
		end
	end)
	
	menu_button4_frame:SetScript("OnEnter", function(self)
		menu_button4_hover:SetAlpha(1)
	end)
	
	menu_button4_frame:SetScript("OnLeave", function(self)
		menu_button4_hover:SetAlpha(0)
	end)
  
	local chatbuttontimerout, chatbuttontimerin = 0,0
	local omenbuttontimerout, omenbuttontimerin = 0,0
	local dpsbuttontimerout, dpsbuttontimerin = 0,0
	local gridbuttontimerout, gridbuttontimerin = 0,0
	local button_timer = 0.4
	
	local ChatButtonAlphaIn = CreateFrame("Frame", "ChatButtonAlphaIn", UIParent)
	ChatButtonAlphaIn:Hide()
	ChatButtonAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		chatbuttontimerin = chatbuttontimerin + elapsed
		if chatbuttontimerin < button_timer then
			local alpha = chatbuttontimerin / button_timer 
			menu_button1:SetAlpha(alpha)
		else
			menu_button1:SetAlpha(1)
			chatbuttontimerin = 0
			self:Hide()
		end
	end)
	
	local ChatButtonAlphaOut = CreateFrame("Frame", "ChatButtonAlphaOut", UIParent)
	ChatButtonAlphaOut:Hide()
	ChatButtonAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		chatbuttontimerout = chatbuttontimerout + elapsed
		if chatbuttontimerout < button_timer then
			local alpha = 1 - chatbuttontimerout / button_timer
			menu_button1:SetAlpha(alpha)
		else
			menu_button1:SetAlpha(0)
			chatbuttontimerout = 0
			self:Hide()
		end
	end)
	
	local OmenButtonAlphaIn = CreateFrame("Frame", "OmenButtonAlphaIn", UIParent)
	OmenButtonAlphaIn:Hide()
	OmenButtonAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		omenbuttontimerin = omenbuttontimerin + elapsed
		if omenbuttontimerin < button_timer then
			local alpha = omenbuttontimerin / button_timer 
			menu_button2:SetAlpha(alpha)
		else
			menu_button2:SetAlpha(1)
			omenbuttontimerin = 0
			self:Hide()
		end
	end)
	
	local OmenButtonAlphaOut = CreateFrame("Frame", "OmenButtonAlphaOut", UIParent)
	OmenButtonAlphaOut:Hide()
	OmenButtonAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		omenbuttontimerout = omenbuttontimerout + elapsed
		if omenbuttontimerout < button_timer then
			local alpha = 1 - omenbuttontimerout / button_timer
			menu_button2:SetAlpha(alpha)
		else
			menu_button2:SetAlpha(0)
			omenbuttontimerout = 0
			self:Hide()
		end
	end)
	
	local DPSButtonAlphaIn = CreateFrame("Frame", "DPSButtonAlphaIn", UIParent)
	DPSButtonAlphaIn:Hide()
	DPSButtonAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		dpsbuttontimerin = dpsbuttontimerin + elapsed
		if dpsbuttontimerin < button_timer then
			local alpha = dpsbuttontimerin / button_timer 
			menu_button3:SetAlpha(alpha)
		else
			menu_button3:SetAlpha(1)
			dpsbuttontimerin = 0
			self:Hide()
		end
	end)
	
	local DPSButtonAlphaOut = CreateFrame("Frame", "DPSButtonAlphaOut", UIParent)
	DPSButtonAlphaOut:Hide()
	DPSButtonAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		dpsbuttontimerout = dpsbuttontimerout + elapsed
		if dpsbuttontimerout < button_timer then
			local alpha = 1 - dpsbuttontimerout / button_timer
			menu_button3:SetAlpha(alpha)
		else
			menu_button3:SetAlpha(0)
			dpsbuttontimerout = 0
			self:Hide()
		end
	end)
	
	local GridButtonAlphaIn = CreateFrame("Frame", "GridButtonAlphaIn", UIParent)
	GridButtonAlphaIn:Hide()
	GridButtonAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		gridbuttontimerin = gridbuttontimerin + elapsed
		if gridbuttontimerin < button_timer then
			local alpha = gridbuttontimerin / button_timer 
			menu_button4:SetAlpha(alpha)
		else
			menu_button4:SetAlpha(1)
			gridbuttontimerin = 0
			self:Hide()
		end
	end)
	
	local GridButtonAlphaOut = CreateFrame("Frame", "GridButtonAlphaOut", UIParent)
	GridButtonAlphaOut:Hide()
	GridButtonAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		gridbuttontimerout = gridbuttontimerout + elapsed
		if gridbuttontimerout < button_timer then
			local alpha = 1 - gridbuttontimerout / button_timer
			menu_button4:SetAlpha(alpha)
		else
			menu_button4:SetAlpha(0)
			gridbuttontimerout = 0
			self:Hide()
		end
	end)
	
	LUI_Orb:RegisterForClicks("AnyUp")
	LUI_Orb:SetScript("OnClick", function(self)
		if db.Frames.IsChatShown == true and db.Frames.IsOmenShown == true and db.Frames.IsRecountShown == true and db.Frames.IsGridShown == true then
			isAllShown = true
		else
			isAllShown = false
		end
		
		if not isAllShown then
			isAllShown = true
			
			if db.Frames.IndividualColor == true then
				top_r = db.Frames.IndividualTopMenuColor_r
				top_g = db.Frames.IndividualTopMenuColor_g 
				top_b = db.Frames.IndividualTopMenuColor_b
				top_a = db.Frames.IndividualTopMenuColor_a
			else
				top_r = color_r
				top_g = color_g
				top_b = color_b
				top_a = color_a
			end
			
			ring6:SetBackdropColor(top_r,top_g,top_b,top_a)
			
			if menu_button1:GetAlpha() == 0 then
				ChatButtonAlphaIn:Show()
				ChatAlphaIn:Show()
				db.Frames.IsChatShown = true
			end
			
			if menu_button2:GetAlpha() == 0 then
				if IsAddOnLoaded("Omen") then
					OmenButtonAlphaIn:Show()
					Omen.Anchor:Show()
					OmenAlphaIn:Show()
				end
				db.Frames.IsOmenShown = true
			end
			
			if menu_button3:GetAlpha() == 0 then
				if IsAddOnLoaded("Recount") then
					RecountAlphaIn:Show()
					DPSButtonAlphaIn:Show()
				end
				db.Frames.IsRecountShown = true
			end
			
			if menu_button4:GetAlpha() == 0 then
				if IsAddOnLoaded("Grid") then
					GridAlphaIn:Show()
					GridButtonAlphaIn:Show()
				end
				db.Frames.IsGridShown = true
			end
		else
			isAllShown = false
			ring6:SetBackdropColor(0.25,0.25,0.25,0.7)

			if menu_button1:GetAlpha() == 1 then
				ChatButtonAlphaOut:Show()
				ChatAlphaOut:Show()
				db.Frames.IsChatShown = false
			end
			
			if menu_button2:GetAlpha() == 1 then
				if IsAddOnLoaded("Omen") then
					OmenButtonAlphaOut:Show()
					OmenAlphaOut:Show()
				end
				db.Frames.IsOmenShown = false
			end
			
			if menu_button3:GetAlpha() == 1 then
				if IsAddOnLoaded("Recount") then
					RecountAlphaOut:Show()
					DPSButtonAlphaOut:Show()
				end
				db.Frames.IsRecountShown = false
			end
			
			if menu_button4:GetAlpha() == 1 then
				if IsAddOnLoaded("Grid") then
					GridAlphaOut:Show()
					GridButtonAlphaOut:Show()
				end
				db.Frames.IsGridShown = false
			end
		end
	end)
end


------------------------------------------------------
-- / ORB BORDER / --
------------------------------------------------------

local orbtimerout, orbtimerin = 0,0
local orb_timer = 0.3

local OrbAlphaIn = CreateFrame("Frame", "OrbAlphaIn", UIParent)
OrbAlphaIn:Hide()
OrbAlphaIn:SetScript("OnUpdate", function(self,elapsed)
	orbtimerin = orbtimerin + elapsed
	if orbtimerin < orb_timer then
		local alpha = orbtimerin / orb_timer 
		ring:SetAlpha(alpha)
	else
		ring:SetAlpha(1)
		orbtimerin = 0
		self:Hide()
	end
end)

local OrbAlphaOut = CreateFrame("Frame", "OrbAlphaOut", UIParent)
OrbAlphaOut:Hide()
OrbAlphaOut:SetScript("OnUpdate", function(self,elapsed)
	orbtimerout = orbtimerout + elapsed
	if orbtimerout < orb_timer then
		local alpha = 1 - orbtimerout / orb_timer
		ring:SetAlpha(alpha)
	else
		ring:SetAlpha(0)
		orbtimerout = 0
		self:Hide()
	end
end)


------------------------------------------------------
-- / MINIMAP / --
------------------------------------------------------

function SetMinimap()
	if db.Minimap.ShowTextures == true then
		local fminimap_border2 = create_me_a_frame("FRAME","fminimap_border2",Minimap,150,150,1,"BACKGROUND",2,"CENTER",Minimap,"CENTER",0,0,1)
		fminimap_border2:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=7, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border2:SetBackdropColor(color_r,color_g,color_b,0)
		--fminimap_border2:SetBackdropBorderColor(color_r,color_g,color_b,1)
		fminimap_border2:SetBackdropBorderColor(0,0,0,1)
		fminimap_border2:Show()
	
		local fminimap_border3 = create_me_a_frame("FRAME","fminimap_border3",Minimap,50,50,1,"BACKGROUND",1,"BOTTOMLEFT",Minimap,"BOTTOMLEFT",-7,-7,1)
		fminimap_border3:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=4, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border3:SetBackdropColor(minimap_r,minimap_g,minimap_b,0)
		fminimap_border3:SetBackdropBorderColor(minimap_r,minimap_g,minimap_b,minimap_a)
		fminimap_border3:Show()  
	
		local fminimap_border4 = create_me_a_frame("FRAME","fminimap_border4",Minimap,56,56,1,"BACKGROUND",0,"BOTTOMLEFT",Minimap,"BOTTOMLEFT",-10,-10,1)
		fminimap_border4:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=6, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border4:SetBackdropColor(color_r,color_g,color_b,0)
		fminimap_border4:SetBackdropBorderColor(0,0,0,1)
		fminimap_border4:Show() 
		
		local fminimap_border5 = create_me_a_frame("FRAME","fminimap_border5",Minimap,50,50,1,"BACKGROUND",1,"BOTTOMRIGHT",Minimap,"BOTTOMRIGHT",7,-7,1)
		fminimap_border5:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=4, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border5:SetBackdropColor(minimap_r,minimap_g,minimap_b,0)
		fminimap_border5:SetBackdropBorderColor(minimap_r,minimap_g,minimap_b,minimap_a)
		fminimap_border5:Show()  
	
		local fminimap_border6 = create_me_a_frame("FRAME","fminimap_border6",Minimap,56,56,1,"BACKGROUND",0,"BOTTOMRIGHT",Minimap,"BOTTOMRIGHT",10,-10,1)
		fminimap_border6:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=6, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border6:SetBackdropColor(color_r,color_g,color_b,0)
		fminimap_border6:SetBackdropBorderColor(0,0,0,1)
		fminimap_border6:Show() 
		
		local fminimap_border7 = create_me_a_frame("FRAME","fminimap_border7",Minimap,50,50,1,"BACKGROUND",1,"TOPRIGHT",Minimap,"TOPRIGHT",7,7,1)
		fminimap_border7:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=4, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border7:SetBackdropColor(minimap_r,minimap_g,minimap_b,0)
		fminimap_border7:SetBackdropBorderColor(minimap_r,minimap_g,minimap_b,minimap_a)
		fminimap_border7:Show()  
	
		local fminimap_border8 = create_me_a_frame("FRAME","fminimap_border8",Minimap,56,56,1,"BACKGROUND",0,"TOPRIGHT",Minimap,"TOPRIGHT",10,10,1)
		fminimap_border8:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=6, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border8:SetBackdropColor(color_r,color_g,color_b,0)
		fminimap_border8:SetBackdropBorderColor(0,0,0,1)
		fminimap_border8:Show() 
	
		local fminimap_border9 = create_me_a_frame("FRAME","fminimap_border9",Minimap,50,50,1,"BACKGROUND",1,"TOPLEFT",Minimap,"TOPLEFT",-7,7,1)
		fminimap_border9:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=4, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border9:SetBackdropColor(minimap_r,minimap_g,minimap_b,0)
		fminimap_border9:SetBackdropBorderColor(minimap_r,minimap_g,minimap_b,minimap_a)
		fminimap_border9:Show()  
	
		local fminimap_border9 = create_me_a_frame("FRAME","fminimap_border9",Minimap,56,56,1,"BACKGROUND",0,"TOPLEFT",Minimap,"TOPLEFT",-10,10,1)
		fminimap_border9:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", tile=0, tileSize=0, edgeSize=6, insets={left=3, right=3, top=3, bottom=3}})
		fminimap_border9:SetBackdropColor(color_r,color_g,color_b,0)
		fminimap_border9:SetBackdropBorderColor(0,0,0,1)
		fminimap_border9:Show()
	end
	
	local minimaptimerout, minimaptimerin = 0,0
	local minimap_timer = 0.3
	
	local MinimapAlphaIn = CreateFrame("Frame", "MinimapAlphaIn", UIParent)
	MinimapAlphaIn:Hide()
	MinimapAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		minimaptimerin = minimaptimerin + elapsed
		Minimap:Show()
		if minimaptimerin < minimap_timer then
			local alpha = minimaptimerin / minimap_timer
			Minimap:SetAlpha(alpha)
		else
			Minimap:SetAlpha(1)
			minimaptimerin = 0
			self:Hide()
		end
	end)
	
	local MinimapAlphaOut = CreateFrame("Frame", "MinimapAlphaOut", UIParent)
	MinimapAlphaOut:Hide()
	MinimapAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		minimaptimerout = minimaptimerout + elapsed
		if minimaptimerout < minimap_timer then
			local alpha = 1 - minimaptimerout / minimap_timer
			Minimap:SetAlpha(alpha)
		else
			Minimap:SetAlpha(0)
			Minimap:Hide()
			minimaptimerout = 0
			self:Hide()
		end
	end)
	
	if db.Minimap.Enable == true then
		Minimap:SetMovable(true)
		Minimap:StartMoving()
		Minimap:ClearAllPoints()
		Minimap:SetPoint("TOPRIGHT", UIParent, -25, -80)
		Minimap:StopMovingOrSizing()
		Minimap:SetMovable(false)
	end
end


------------------------------------------------------
-- / SIDEBAR RIGHT / --
------------------------------------------------------

function SetRightSidebar()

	local BarCheck = CreateFrame("Frame", "BarCheck", UIParent)
		
	BarCheck:RegisterEvent("PLAYER_ENTERING_WORLD")
	BarCheck:SetScript("OnEvent", function(self)
		
		isBartender = false
		RightAnchor = db.Bars.SidebarRightAnchor
		
		for k, v in pairs(barAnchors) do
			if RightAnchor == v then
				isBartender = true
			end
		end
		
		if isBartender == true then
			if strlen(RightAnchor) == 7 then
				RightBar = strsub(RightAnchor, -1)
			elseif strlen(RightAnchor) == 8 then
				RightBar = strsub(RightAnchor, -2)
			end
		end

		SidebarRight_EnableBar = loadstring("BT4ActionBars:EnableBar("..RightBar..")")
		SidebarRight_DisableBar = loadstring("BT4ActionBars:DisableBar("..RightBar..")")
		SidebarRight_SetRows = loadstring(RightAnchor..":SetRows(6)")
		SidebarRight_SetButtons = loadstring(RightAnchor..":SetButtons(12)")
		SidebarRight_SetConfigAlpha = loadstring(RightAnchor..":SetConfigAlpha(0)")
		SidebarRight_ClearSetPoint = loadstring(RightAnchor..":ClearSetPoint(\"CENTER\",fsidebar_anchor,\"CENTER\",-106,112)")
		SidebarRight_SavePosition = loadstring(RightAnchor..":SavePosition()")
		SidebarRight_SetConfigScale = loadstring(RightAnchor..":SetConfigScale(0.85)")
		SidebarRight_SetFrameStrata = loadstring(RightAnchor..":SetFrameStrata(\"BACKGROUND\")")
		SidebarRight_SetFrameLevel = loadstring(RightAnchor..":SetFrameLevel(2)")
		SidebarRight_SetFadeOut = loadstring(RightAnchor..":SetFadeOut(false)")
		SidebarRight_SetVisibility = loadstring(RightAnchor..":SetVisibilityOption(\"always\", false)")
		SidebarRight_SetVisibility2 = loadstring(RightAnchor..":SetVisibilityOption(\"always\", true)")
		SidebarRight_SetPadding = loadstring(RightAnchor..":SetPadding(2)")
		SidebarRight_ClearAllPoints = loadstring(RightAnchor..":ClearAllPoints()")
		SidebarRight_SetPoint = loadstring(RightAnchor..":SetPoint(\"CENTER\",fsidebar_anchor,\"CENTER\",-106,112)")
		SidebarRight_Hide = loadstring(RightAnchor..":Hide()")
		
		if isBartender == true then
			SidebarRight_EnableBar()
			SidebarRight_SetRows()
			SidebarRight_SetButtons()
			SidebarRight_SetConfigAlpha()
			SidebarRight_ClearSetPoint()
			SidebarRight_SavePosition()
			SidebarRight_SetConfigScale()
			SidebarRight_SetFrameStrata()
			SidebarRight_SetFrameLevel()
			SidebarRight_SetFadeOut()
			SidebarRight_SetVisibility()
			SidebarRight_SetPadding()
		else
			SidebarRight_ClearAllPoints()
			SidebarRight_SetPoint()
			SidebarRight_SetFrameStrata()
			SidebarRight_SetFrameLevel()
		end
		
		if not db.SidebarRight.Enable then
			if isBartender == true then
				SidebarRight_SetConfigAlpha()
				SidebarRight_DisableBar()
			else
				SidebarRight_Hide()
			end
		end
	end)

	if isRightSidebarCreated == false or isRightSidebarCreated == nil then
		local isRightSidebarCreated = true
		------------------------------------------------------
		-- / OPEN / CLOSE RIGHT SIDEBAR / --
		------------------------------------------------------
		local fsidebar_timerout,fsidebar_timerin = 0,0
		local fsidebar_y = 0
		local fsidebar_x = -30
		local fsidebar_xout = -118 
		local fsidebar_pixelpersecond = -176
		local fsidebar_animation_time = 0.5
		
		local fsidebar_SlideOut = CreateFrame("Frame", "fsidebar_SlideOut", UIParent)
		fsidebar_SlideOut:Hide()
		
		fsidebar_SlideOut:SetScript("OnUpdate", function(self,elapsed)
			fsidebar_timerout = fsidebar_timerout + elapsed
			if fsidebar_timerout < fsidebar_animation_time then
				local x2 = fsidebar_x + fsidebar_timerout * fsidebar_pixelpersecond
				fsidebar_button_anchor:ClearAllPoints()
				fsidebar_button_anchor:SetPoint("LEFT", fsidebar_anchor, "LEFT", x2, fsidebar_y)
			else
				fsidebar_button_anchor:ClearAllPoints()
				fsidebar_button_anchor:SetPoint("LEFT", fsidebar_anchor, "LEFT", fsidebar_xout, fsidebar_y)
				fsidebar_timerout = 0
				fsidebar_bt_AlphaIn:Show()
				self:Hide()
			end
		end)
		
		local fsidebar_SlideIn = CreateFrame("Frame", "fsidebar_SlideIn", UIParent)
		fsidebar_SlideIn:Hide()
		
		fsidebar_SlideIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar_timerin = fsidebar_timerin + elapsed
			if fsidebar_timerin < fsidebar_animation_time then
				local x2 = fsidebar_x - fsidebar_timerin * fsidebar_pixelpersecond + fsidebar_pixelpersecond * fsidebar_animation_time
				fsidebar_button_anchor:ClearAllPoints()
				fsidebar_button_anchor:SetPoint("LEFT", fsidebar_anchor, "LEFT", x2, fsidebar_y)
			else
				fsidebar_button_anchor:ClearAllPoints()
				fsidebar_button_anchor:SetPoint("LEFT", fsidebar_anchor, "LEFT", fsidebar_x, fsidebar_y)
				fsidebar_timerin = 0
				self:Hide()
			end
		end)
		
		local fsidebar_alpha_timerout, fsidebar_alpha_timerin = 0,0
		local fsidebar_speedin = 0.9
		local fsidebar_speedout = 0.3
		
		local fsidebar_AlphaIn = CreateFrame("Frame", "fsidebar_AlphaIn", UIParent)
		fsidebar_AlphaIn:Hide()
		
		fsidebar_AlphaIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar_alpha_timerin = fsidebar_alpha_timerin + elapsed
			if fsidebar_alpha_timerin < fsidebar_speedin then
				local alpha = fsidebar_alpha_timerin / fsidebar_speedin 
				fsidebar_bt_back:SetAlpha(alpha)
			else
				fsidebar_bt_back:SetAlpha(1)
				fsidebar_alpha_timerin = 0
				self:Hide()
			end
		end)
		
		local fsidebar_AlphaOut = CreateFrame("Frame", "fsidebar_AlphaOut", UIParent)
		fsidebar_AlphaOut:Hide()
		
		fsidebar_AlphaOut:SetScript("OnUpdate", function(self,elapsed)
			fsidebar_alpha_timerout = fsidebar_alpha_timerout + elapsed
			if fsidebar_alpha_timerout < fsidebar_speedout then
				local alpha = 1 - fsidebar_alpha_timerout / fsidebar_speedout
				fsidebar_bt_back:SetAlpha(alpha)
			else
				fsidebar_bt_back:SetAlpha(0)
				fsidebar_alpha_timerout = 0
				self:Hide()
			end
		end)
		
		local fsidebar_bt_timerin = 0
		local fsidebar_bt_speedin = 0.3
		
		local fsidebar_bt_AlphaIn = CreateFrame("Frame", "fsidebar_bt_AlphaIn", UIParent)
		fsidebar_bt_AlphaIn:Hide()
		
		fsidebar_bt_AlphaIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar_bt_timerin = fsidebar_bt_timerin + elapsed
			if fsidebar_bt_timerin < fsidebar_bt_speedin then
				local alpha = fsidebar_bt_timerin / fsidebar_bt_speedin
				SidebarRight_SetAlpha = loadstring(RightAnchor..":SetAlpha("..alpha..")")
				SidebarRight_SetAlpha()
			else
				SidebarRight_SetAlpha = loadstring(RightAnchor..":SetAlpha(1)")
				SidebarRight_SetAlpha()
				fsidebar_bt_timerin = 0
				self:Hide()
			end
		end)
		
		------------------------------------------------------
		-- / RIGHT SIDEBAR FRAMES / --
		------------------------------------------------------
		
		fsidebar_anchor = create_me_a_frame("FRAME","fsidebar_anchor",UIParent,25,25,1,"BACKGROUND",0,"RIGHT",UIParent,"RIGHT",11,db.SidebarRight.Offset,1)
		fsidebar_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_anchor:SetBackdropColor(0,0,0,0)
		fsidebar_anchor:SetBackdropBorderColor(0,0,0,0)
		fsidebar_anchor:Show() 
		
		local fsidebar = create_me_a_frame("FRAME","fsidebar",fsidebar_anchor,512,512,1,"BACKGROUND",2,"LEFT",fsidebar_anchor,"LEFT",-17,0,1)
		fsidebar:SetBackdrop({bgFile=fdir.."sidebar.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar:SetBackdropBorderColor(0,0,0,0)
		fsidebar:Show()
		
		local fsidebar_back = create_me_a_frame("FRAME","fsidebar_back",fsidebar_anchor,512,512,1,"BACKGROUND",1,"LEFT",fsidebar_anchor,"LEFT",-25,0,1)
		fsidebar_back:SetBackdrop({bgFile=fdir.."sidebar_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_back:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,sidebar_a)
		fsidebar_back:SetBackdropBorderColor(0,0,0,0)
		fsidebar_back:Show()
		
		local fsidebar_back2 = create_me_a_frame("FRAME","fsidebar_back2",fsidebar_anchor,512,512,1,"BACKGROUND",1,"LEFT",fsidebar_anchor,"LEFT",-25,0,1)
		fsidebar_back2:SetBackdrop({bgFile=fdir.."sidebar_back2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_back2:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,sidebar_a)
		fsidebar_back2:SetBackdropBorderColor(0,0,0,0)
		fsidebar_back2:Show()
		
		local fsidebar_button_anchor= create_me_a_frame("FRAME","fsidebar_button_anchor",fsidebar_anchor,10,10,1,"BACKGROUND",0,"LEFT",fsidebar_anchor,"LEFT",-30,0,1)
		fsidebar_button_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_button_anchor:SetBackdropColor(0,0,0,0)
		fsidebar_button_anchor:SetBackdropBorderColor(0,0,0,0)
		fsidebar_button_anchor:Show()
		
		local fsidebar_bt_back = create_me_a_frame("FRAME","fsidebar_bt_back",fsidebar_button_anchor,273,267,1,"BACKGROUND",0,"LEFT",fsidebar_button_anchor,"LEFT",3,-2,1)
		fsidebar_bt_back:SetBackdrop({bgFile=fdir.."sidebar_bt_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_bt_back:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar_bt_back:SetBackdropBorderColor(0,0,0,0)
		fsidebar_bt_back:SetAlpha(0)
		fsidebar_bt_back:Show()
		
		local fsidebar_bt_block= create_me_a_frame("FRAME","fsidebar_bt_block",fsidebar_anchor,80,225,1,"MEDIUM",4,"LEFT",fsidebar_anchor,"LEFT",-82,-5,1)
		fsidebar_bt_block:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_bt_block:SetBackdropColor(0,0,0,0)
		fsidebar_bt_block:SetBackdropBorderColor(0,0,0,0)
		fsidebar_bt_block:EnableMouse(true)
		fsidebar_bt_block:Show()
		
		local fsidebar_button_clicker= create_me_a_frame("BUTTON","fsidebar_button_clicker",fsidebar_button_anchor,30,215,1,"MEDIUM",5,"LEFT",fsidebar_button_anchor,"LEFT",6,-5,1)
		fsidebar_button_clicker:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_button_clicker:SetBackdropColor(0,0,0,0)
		fsidebar_button_clicker:SetBackdropBorderColor(0,0,0,0)
		fsidebar_button_clicker:Show()
	
		local fsidebar_button = create_me_a_frame("FRAME","fsidebar_button",fsidebar_button_anchor,266,251,1,"BACKGROUND",0,"LEFT",fsidebar_button_anchor,"LEFT",0,-2,1)
		fsidebar_button:SetBackdrop({bgFile=fdir.."sidebar_button.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_button:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar_button:SetBackdropBorderColor(0,0,0,0)
		fsidebar_button:Show()
		
		local fsidebar_button_hover = create_me_a_frame("FRAME","fsidebar_button_hover",fsidebar_button_anchor,266,251,1,"BACKGROUND",0,"LEFT",fsidebar_button_anchor,"LEFT",0,-2,1)
		fsidebar_button_hover:SetBackdrop({bgFile=fdir.."sidebar_button_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar_button_hover:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar_button_hover:SetBackdropBorderColor(0,0,0,0)
		fsidebar_button_hover:Hide()
		
		rightSidebarOpen = 0
		
		fsidebar_button_clicker:RegisterForClicks("AnyUp")
		fsidebar_button_clicker:SetScript("OnClick", function(self)
			if rightSidebarOpen == 0 then
				rightSidebarOpen = 1
				db.SidebarRight.IsOpen = true
				if db.SidebarRight.OpenInstant then
					fsidebar_button_anchor:ClearAllPoints()
					fsidebar_button_anchor:SetPoint("LEFT",fsidebar_anchor,"LEFT",-120,0)
					fsidebar_bt_back:SetAlpha(1)
					SidebarRight_SetAlpha = loadstring(RightAnchor..":SetAlpha(1)")
					SidebarRight_SetAlpha()
					fsidebar_bt_block:Hide()
				else
					fsidebar_SlideOut:Show()
					fsidebar_AlphaIn:Show()
					fsidebar_bt_block:Hide()
				end
			else
				rightSidebarOpen = 0
				db.SidebarRight.IsOpen = false
				if db.SidebarRight.OpenInstant then
					fsidebar_button_anchor:ClearAllPoints()
					fsidebar_button_anchor:SetPoint("LEFT",fsidebar_anchor,"LEFT",-32,0)
					fsidebar_bt_back:SetAlpha(0)
					SidebarRight_SetAlpha = loadstring(RightAnchor..":SetAlpha(0)")
					SidebarRight_SetAlpha()
					fsidebar_bt_block:Show()
				else
					fsidebar_SlideIn:Show()
					fsidebar_AlphaOut:Show()
					SidebarRight_SetAlpha = loadstring(RightAnchor..":SetAlpha(0)")
					SidebarRight_SetAlpha()
					fsidebar_bt_block:Show()
				end
			end
		end)
	
		fsidebar_button_clicker:SetScript("OnEnter", function(self)
			fsidebar_button:Hide()
			fsidebar_button_hover:Show()
		end)
	
		fsidebar_button_clicker:SetScript("OnLeave", function(self)
			fsidebar_button:Show()
			fsidebar_button_hover:Hide()
		end)
	end
	
	if db.SidebarRight.Enable then	
		fsidebar_anchor:Show()
	else
		fsidebar_anchor:Hide()
	end
end

------------------------------------------------------
-- / SIDEBAR LEFT / --
------------------------------------------------------

function SetLeftSidebar()
	
	local BarCheck2 = CreateFrame("Frame", "BarCheck2", UIParent)
		
	BarCheck2:RegisterEvent("PLAYER_ENTERING_WORLD")
	BarCheck2:SetScript("OnEvent", function(self)
		
		isBartender = false
		LeftAnchor = db.Bars.SidebarLeftAnchor
		
		for k, v in pairs(barAnchors) do
			if LeftAnchor == v then
				isBartender = true
			end
		end
		
		if isBartender == true then
			if strlen(LeftAnchor) == 7 then
				LeftBar = strsub(LeftAnchor, -1)
			elseif strlen(LeftAnchor) == 8 then
				LeftBar = strsub(LeftAnchor, -2)
			end
		end
		
		SidebarLeft_EnableBar = loadstring("BT4ActionBars:EnableBar("..LeftBar..")")
		SidebarLeft_DisableBar = loadstring("BT4ActionBars:DisableBar("..LeftBar..")")
		SidebarLeft_SetRows = loadstring(LeftAnchor..":SetRows(6)")
		SidebarLeft_SetButtons = loadstring(LeftAnchor..":SetButtons(12)")
		SidebarLeft_SetConfigAlpha = loadstring(LeftAnchor..":SetConfigAlpha(0)")
		SidebarLeft_ClearSetPoint = loadstring(LeftAnchor..":ClearSetPoint(\"CENTER\",fsidebar2_anchor,\"CENTER\",22,112)")
		SidebarLeft_SavePosition = loadstring(LeftAnchor..":SavePosition()")
		SidebarLeft_SetConfigScale = loadstring(LeftAnchor..":SetConfigScale(0.85)")
		SidebarLeft_SetFrameStrata = loadstring(LeftAnchor..":SetFrameStrata(\"BACKGROUND\")")
		SidebarLeft_SetFrameLevel = loadstring(LeftAnchor..":SetFrameLevel(2)")
		SidebarLeft_SetFadeOut = loadstring(LeftAnchor..":SetFadeOut(false)")
		SidebarLeft_SetVisibility = loadstring(LeftAnchor..":SetVisibilityOption(\"always\", false)")
		SidebarLeft_SetVisibility2 = loadstring(LeftAnchor..":SetVisibilityOption(\"always\", true)")
		SidebarLeft_SetPadding = loadstring(LeftAnchor..":SetPadding(2)")
		SidebarLeft_ClearAllPoints = loadstring(LeftAnchor..":ClearAllPoints()")
		SidebarLeft_SetPoint = loadstring(LeftAnchor..":SetPoint(\"CENTER\",fsidebar_anchor,\"CENTER\",-106,112)")
		SidebarLeft_Hide = loadstring(LeftAnchor..":Hide()")
		
		if isBartender == true then
			SidebarLeft_EnableBar()
			SidebarLeft_SetRows()
			SidebarLeft_SetButtons()
			SidebarLeft_SetConfigAlpha()
			SidebarLeft_ClearSetPoint()
			SidebarLeft_SavePosition()
			SidebarLeft_SetConfigScale()
			SidebarLeft_SetFrameStrata()
			SidebarLeft_SetFrameLevel()
			SidebarLeft_SetFadeOut()
			SidebarLeft_SetVisibility()
			SidebarLeft_SetPadding()
		else
			SidebarLeft_ClearAllPoints()
			SidebarLeft_SetPoint()
			SidebarLeft_SetFrameStrata()
			SidebarLeft_SetFrameLevel()
		end
		
		if not db.SidebarLeft.Enable then
			if isBartender == true then
				SidebarLeft_SetConfigAlpha()
				SidebarLeft_DisableBar()
			else
				SidebarLeft_Hide()
			end
		end
	end)

	if isLeftSidebarCreated == false or isLeftSidebarCreated == nil then
		local isLeftSidebarCreated = true
		------------------------------------------------------
		-- / SLIDE LEFT SIDEBAR / --
		------------------------------------------------------
		local fsidebar2_timerout,fsidebar2_timerin = 0,0
		local fsidebar2_y = 0
		local fsidebar2_x = 30
		local fsidebar2_xout = 118
		local fsidebar2_pixelpersecond = 176
		local fsidebar2_animation_time = 0.5
		
		local fsidebar2_SlideOut = CreateFrame("Frame", "fsidebar2_SlideOut", UIParent)
		fsidebar2_SlideOut:Hide()
		
		fsidebar2_SlideOut:SetScript("OnUpdate", function(self,elapsed)
			fsidebar2_timerout = fsidebar2_timerout + elapsed
			if fsidebar2_timerout < fsidebar2_animation_time then
				local x2 = fsidebar2_x + fsidebar2_timerout * fsidebar2_pixelpersecond
				fsidebar2_button_anchor:ClearAllPoints()
				fsidebar2_button_anchor:SetPoint("RIGHT", fsidebar2_anchor, "RIGHT", x2, fsidebar2_y)
			else
				fsidebar2_button_anchor:ClearAllPoints()
				fsidebar2_button_anchor:SetPoint("RIGHT", fsidebar2_anchor, "RIGHT", fsidebar2_xout, fsidebar2_y)
				fsidebar2_timerout = 0
				fsidebar2_bt_AlphaIn:Show()
				self:Hide()
			end
		end)
		
		local fsidebar2_SlideIn = CreateFrame("Frame", "fsidebar2_SlideIn", UIParent)
		fsidebar2_SlideIn:Hide()
		
		fsidebar2_SlideIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar2_timerin = fsidebar2_timerin + elapsed
			if fsidebar2_timerin < fsidebar2_animation_time then
				local x2 = fsidebar2_x - fsidebar2_timerin * fsidebar2_pixelpersecond + fsidebar2_pixelpersecond * fsidebar2_animation_time
				fsidebar2_button_anchor:ClearAllPoints()
				fsidebar2_button_anchor:SetPoint("RIGHT", fsidebar2_anchor, "RIGHT", x2, fsidebar2_y)
			else
				fsidebar2_button_anchor:ClearAllPoints()
				fsidebar2_button_anchor:SetPoint("RIGHT", fsidebar2_anchor, "RIGHT", fsidebar2_x, fsidebar2_y)
				fsidebar2_timerin = 0
				self:Hide()
			end
		end)
		
		local fsidebar2_alpha_timerout, fsidebar2_alpha_timerin = 0,0
		local fsidebar2_speedin = 0.9
		local fsidebar2_speedout = 0.3
		
		local fsidebar2_AlphaIn = CreateFrame("Frame", "fsidebar2_AlphaIn", UIParent)
		fsidebar2_AlphaIn:Hide()
		
		fsidebar2_AlphaIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar2_alpha_timerin = fsidebar2_alpha_timerin + elapsed
			if fsidebar2_alpha_timerin < fsidebar2_speedin then
				local alpha = fsidebar2_alpha_timerin / fsidebar2_speedin 
				fsidebar2_bt_back:SetAlpha(alpha)
			else
				fsidebar2_bt_back:SetAlpha(1)
				fsidebar2_alpha_timerin = 0
				self:Hide()
			end

		end)
		
		local fsidebar2_AlphaOut = CreateFrame("Frame", "fsidebar2_AlphaOut", UIParent)
		fsidebar2_AlphaOut:Hide()
		
		fsidebar2_AlphaOut:SetScript("OnUpdate", function(self,elapsed)
			fsidebar2_alpha_timerout = fsidebar2_alpha_timerout + elapsed
			if fsidebar2_alpha_timerout < fsidebar2_speedout then
				local alpha = 1 - fsidebar2_alpha_timerout / fsidebar2_speedout
				fsidebar2_bt_back:SetAlpha(alpha)
			else
				fsidebar2_bt_back:SetAlpha(0)
				fsidebar2_alpha_timerout = 0
				self:Hide()
			end
		end)
		
		local fsidebar2_bt_timerin = 0,0
		local fsidebar2_bt_speedin = 0.3
		
		local fsidebar2_bt_AlphaIn = CreateFrame("Frame", "fsidebar2_bt_AlphaIn", UIParent)
		fsidebar2_bt_AlphaIn:Hide()
		
		fsidebar2_bt_AlphaIn:SetScript("OnUpdate", function(self,elapsed)
			fsidebar2_bt_timerin = fsidebar2_bt_timerin + elapsed
			if fsidebar2_bt_timerin < fsidebar2_bt_speedin then
				local alpha = fsidebar2_bt_timerin / fsidebar2_bt_speedin 
				SidebarLeft_SetAlpha = loadstring(LeftAnchor..":SetAlpha("..alpha..")")
				SidebarLeft_SetAlpha()
			else
				SidebarLeft_SetAlpha = loadstring(LeftAnchor..":SetAlpha(1)")
				SidebarLeft_SetAlpha()
				fsidebar2_bt_timerin = 0
				self:Hide()
			end
		end)
		
		------------------------------------------------------
		-- / LEFT SIDEBAR FRAMES / --
		------------------------------------------------------
	
		fsidebar2_anchor = create_me_a_frame("FRAME","fsidebar2_anchor",UIParent,25,25,1,"BACKGROUND",0,"LEFT",UIParent,"LEFT",-11,db.SidebarLeft.Offset,1)
		fsidebar2_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_anchor:SetBackdropColor(0,0,0,0)
		fsidebar2_anchor:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_anchor:Show()
		
		local fsidebar2 = create_me_a_frame("FRAME","fsidebar2",fsidebar2_anchor,512,512,1,"BACKGROUND",2,"RIGHT",fsidebar2_anchor,"RIGHT",17,0,1)
		fsidebar2:SetBackdrop({bgFile=fdir.."sidebar2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2:SetBackdropBorderColor(0,0,0,0)
		fsidebar2:Show()
		
		local fsidebar2_back = create_me_a_frame("FRAME","fsidebar2_back",fsidebar2_anchor,512,512,1,"BACKGROUND",1,"RIGHT",fsidebar2_anchor,"RIGHT",25,0,1)
		fsidebar2_back:SetBackdrop({bgFile=fdir.."sidebar2_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_back:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,sidebar_a)
		fsidebar2_back:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_back:Show()
		
		local fsidebar2_back2 = create_me_a_frame("FRAME","fsidebar2_back2",fsidebar2_anchor,512,512,1,"BACKGROUND",3,"RIGHT",fsidebar2_anchor,"RIGHT",25,0,1)
		fsidebar2_back2:SetBackdrop({bgFile=fdir.."sidebar2_back2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_back2:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar2_back2:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_back2:Show()
		
		local fsidebar2_button_anchor= create_me_a_frame("FRAME","fsidebar2_button_anchor",fsidebar2_anchor,10,10,1,"BACKGROUND",0,"RIGHT",fsidebar2_anchor,"RIGHT",30,0,1)
		fsidebar2_button_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_button_anchor:SetBackdropColor(0,0,0,0)
		fsidebar2_button_anchor:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_button_anchor:Show()
		
		local fsidebar2_bt_back = create_me_a_frame("FRAME","fsidebar2_bt_back",fsidebar2_button_anchor,273,267,1,"BACKGROUND",0,"RIGHT",fsidebar2_button_anchor,"RIGHT",-3,-2,1)
		fsidebar2_bt_back:SetBackdrop({bgFile=fdir.."sidebar2_bt_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_bt_back:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar2_bt_back:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_bt_back:SetAlpha(0)
		fsidebar2_bt_back:Show()
		
		local fsidebar2_bt_block= create_me_a_frame("FRAME","fsidebar2_bt_block",fsidebar2_anchor,80,225,1,"MEDIUM",4,"RIGHT",fsidebar2_anchor,"RIGHT",82,-5,1)
		fsidebar2_bt_block:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_bt_block:SetBackdropColor(0,0,0,0)
		fsidebar2_bt_block:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_bt_block:EnableMouse(true)
		fsidebar2_bt_block:Show()
		
		local fsidebar2_button_clicker= create_me_a_frame("BUTTON","fsidebar2_button_clicker",fsidebar2_button_anchor,30,215,1,"MEDIUM",5,"RIGHT",fsidebar2_button_anchor,"RIGHT",-6,-5,1)
		fsidebar2_button_clicker:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_button_clicker:SetBackdropColor(0,0,0,0)
		fsidebar2_button_clicker:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_button_clicker:Show()

		local fsidebar2_button = create_me_a_frame("FRAME","fsidebar2_button",fsidebar2_button_anchor,266,251,1,"BACKGROUND",0,"RIGHT",fsidebar2_button_anchor,"RIGHT",0,-2,1)
		fsidebar2_button:SetBackdrop({bgFile=fdir.."sidebar2_button.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_button:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar2_button:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_button:Show()
		
		local fsidebar2_button_hover = create_me_a_frame("FRAME","fsidebar2_button_hover",fsidebar2_button_anchor,266,251,1,"BACKGROUND",0,"RIGHT",fsidebar2_button_anchor,"RIGHT",0,-2,1)
		fsidebar2_button_hover:SetBackdrop({bgFile=fdir.."sidebar2_button_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
		fsidebar2_button_hover:SetBackdropColor(sidebar_r,sidebar_g,sidebar_b,1)
		fsidebar2_button_hover:SetBackdropBorderColor(0,0,0,0)
		fsidebar2_button_hover:Hide()
	
		leftSidebarOpen = 0
		
		fsidebar2_button_clicker:RegisterForClicks("AnyUp")
		fsidebar2_button_clicker:SetScript("OnClick", function(self)
			if leftSidebarOpen == 0 then
				leftSidebarOpen = 1
				db.SidebarLeft.IsOpen = true
				if db.SidebarLeft.OpenInstant then
					fsidebar2_button_anchor:ClearAllPoints()
					fsidebar2_button_anchor:SetPoint("RIGHT",fsidebar2_anchor,"RIGHT",120,0)
					fsidebar2_bt_back:SetAlpha(1)
					SidebarLeft_SetAlpha = loadstring(LeftAnchor..":SetAlpha(1)")
					SidebarLeft_SetAlpha()
					fsidebar2_bt_block:Hide()
				else
					fsidebar2_SlideOut:Show()
					fsidebar2_AlphaIn:Show()
					fsidebar2_bt_block:Hide()
				end
			else
				leftSidebarOpen = 0
				db.SidebarLeft.IsOpen = false
				if db.SidebarLeft.OpenInstant then
					fsidebar2_button_anchor:ClearAllPoints()
					fsidebar2_button_anchor:SetPoint("RIGHT",fsidebar2_anchor,"RIGHT",32,0)
					fsidebar2_bt_back:SetAlpha(0)
					SidebarLeft_SetAlpha = loadstring(LeftAnchor..":SetAlpha(0)")
					SidebarLeft_SetAlpha()
					fsidebar2_bt_block:Show()
				else
					fsidebar2_SlideIn:Show()
					fsidebar2_AlphaOut:Show()
					SidebarLeft_SetAlpha = loadstring(LeftAnchor..":SetAlpha(0)")
					SidebarLeft_SetAlpha()
					fsidebar2_bt_block:Show()
				end
			end
		end)
	
		fsidebar2_button_clicker:SetScript("OnEnter", function(self)
			fsidebar2_button:Hide()
			fsidebar2_button_hover:Show()
		end)
	
		fsidebar2_button_clicker:SetScript("OnLeave", function(self)
			fsidebar2_button:Show()
			fsidebar2_button_hover:Hide()
		end)
	end
	
	if db.SidebarLeft.Enable then	
		fsidebar2_anchor:Show()
	else
		fsidebar2_anchor:Hide()
	end
end

function SetTabsAlpha()
	CHAT_FRAME_TAB_SELECTED_NOMOUSE_ALPHA = db.Chat.Tabs.ActiveAlpha;
    CHAT_FRAME_TAB_NORMAL_NOMOUSE_ALPHA = db.Chat.Tabs.NotActiveAlpha; 
    
    for i = 1, NUM_CHAT_WINDOWS do
		chatframe = _G[("ChatFrame%d"):format(i)]
       	if FCF_IsValidChatFrame(chatframe) then
			local chatTab = _G["ChatFrame"..i.."Tab"]
            chatTab:Show()
            chatTab:Hide()
            --FloatingChatFrame_Update(chatframe:GetID()) 
            
            chatTab.mouseOverAlpha = CHAT_FRAME_TAB_SELECTED_MOUSEOVER_ALPHA;            
	        chatTab.noMouseAlpha = CHAT_FRAME_TAB_SELECTED_NOMOUSE_ALPHA;
            
            FCF_FadeOutChatFrame(chatframe)
      	end
    end
end

function SetChatFading()
	if db.Chat.Fading == true then
		for i = 1, NUM_CHAT_WINDOWS do
			chatframe = _G[("ChatFrame%d"):format(i)]
			chatframe:SetFading(1)
			chatframe:SetTimeVisible(180)
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			chatframe = _G[("ChatFrame%d"):format(i)]
			chatframe:SetFading(0)
		end
	end
end

function CheckChatMinimizeButton() 
	if db.Chat.Buttons.MinimizeButton.Enable == true then
		for i = 2, NUM_CHAT_WINDOWS do
			local chatFrame = "ChatFrame"..i
			if chatFrame == db.Chat.SecondChatAnchor and db.Chat.SecondChatFrame == true then
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:Hide()
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetScript("OnShow", function(self) self:Hide() end)
			else
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:ClearAllPoints()
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetPoint("BOTTOM", _G["ChatFrame"..i.."ButtonFrame"],"BOTTOM",tonumber(db.Chat.Buttons.MinimizeButton.X),tonumber(db.Chat.Buttons.MinimizeButton.Y))
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetAlpha(db.Chat.Buttons.MinimizeButton.AlphaOut)
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetScript("OnShow", function(self) self:Show() end)
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:Show()
				
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetScript("OnEnter", function()
					_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetAlpha(tonumber(db.Chat.Buttons.MinimizeButton.AlphaIn)) 
				end)
					
				_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetScript("OnLeave", function()
					_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetAlpha(tonumber(db.Chat.Buttons.MinimizeButton.AlphaOut)) 
				end)
			end
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:Hide()
			_G["ChatFrame"..i.."ButtonFrameMinimizeButton"]:SetScript("OnShow", function(self) self:Hide() end)
		end
	end
end

function CheckChatMenuButton()
	if db.Chat.Buttons.MenuButton.Enable == true then
		ChatFrameMenuButton:SetAlpha(tonumber(db.Chat.Buttons.MenuButton.AlphaOut))
		ChatFrameMenuButton:ClearAllPoints()
		ChatFrameMenuButton:SetPoint("BOTTOM", _G["ChatFrame1ButtonFrame"],"BOTTOM",tonumber(db.Chat.Buttons.MenuButton.X),tonumber(db.Chat.Buttons.MenuButton.Y))
		ChatFrameMenuButton:SetScript("OnShow", function(self) self:Show() end)
		ChatFrameMenuButton:Show()
		
		ChatFrameMenuButton:SetScript("OnEnter", function()
			ChatFrameMenuButton:SetAlpha(tonumber(db.Chat.Buttons.MenuButton.AlphaIn)) 
		end)
			
		ChatFrameMenuButton:SetScript("OnLeave", function()
			ChatFrameMenuButton:SetAlpha(tonumber(db.Chat.Buttons.MenuButton.AlphaOut)) 
		end)
	else
		ChatFrameMenuButton:Hide()
		ChatFrameMenuButton:SetScript("OnShow", function(self) self:Hide() end)
	end
end

function CheckChatBottomButton()
	if db.Chat.Buttons.BottomButton.Enable == true then
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:ClearAllPoints()
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetPoint("BOTTOM", _G["ChatFrame"..i.."ButtonFrame"],"BOTTOM",tonumber(db.Chat.Buttons.BottomButton.X),tonumber(db.Chat.Buttons.BottomButton.Y))
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetAlpha(db.Chat.Buttons.BottomButton.AlphaOut)
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetScript("OnShow", function(self) self:Show() end)
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:Show()
			
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetScript("OnEnter", function()
				_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetAlpha(tonumber(db.Chat.Buttons.BottomButton.AlphaIn)) 
			end)
				
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetScript("OnLeave", function()
				_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetAlpha(tonumber(db.Chat.Buttons.BottomButton.AlphaOut)) 
			end)
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:Hide()
			_G["ChatFrame"..i.."ButtonFrameBottomButton"]:SetScript("OnShow", function(self) self:Hide() end)
		end
	end
end

function CheckChatButtons()
	if db.Chat.Buttons.Enable == true then
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrame"]:SetScript("OnShow", function(self) self:Show() end)
			_G["ChatFrame"..i.."ButtonFrame"]:Show()
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrame"]:Hide()
			_G["ChatFrame"..i.."ButtonFrame"]:SetScript("OnShow", function(self) self:Hide() end)
		end
	end
end

function CheckChatArrows()
	if db.Chat.Buttons.Arrows.Enable == true then
		for i = 1, NUM_CHAT_WINDOWS do
			local buttonUp = _G["ChatFrame"..i.."ButtonFrameUpButton"]
			local buttonDown = _G["ChatFrame"..i.."ButtonFrameDownButton"]
			local buttonFrame = _G["ChatFrame"..i.."ButtonFrame"]
		
			buttonUp:SetAlpha(db.Chat.Buttons.Arrows.AlphaOut)
			buttonUp:SetScript("OnShow", function(self) self:Show() end)
			buttonUp:Show()
			
			buttonDown:ClearAllPoints()
			buttonDown:SetPoint("BOTTOM", buttonFrame,"BOTTOM",tonumber(db.Chat.Buttons.Arrows.X),tonumber(db.Chat.Buttons.Arrows.Y))
			buttonDown:SetAlpha(db.Chat.Buttons.Arrows.AlphaOut)
			buttonDown:SetScript("OnShow", function(self) self:Show() end)
			buttonDown:Show()
			
			buttonUp:SetScript("OnEnter", function()
				buttonUp:SetAlpha(tonumber(db.Chat.Buttons.Arrows.AlphaIn)) 
			end)
				
			buttonUp:SetScript("OnLeave", function()
				buttonUp:SetAlpha(tonumber(db.Chat.Buttons.Arrows.AlphaOut)) 
			end)
			
			buttonDown:SetScript("OnEnter", function()
				buttonDown:SetAlpha(tonumber(db.Chat.Buttons.Arrows.AlphaIn)) 
			end)
				
			buttonDown:SetScript("OnLeave", function()
				buttonDown:SetAlpha(tonumber(db.Chat.Buttons.Arrows.AlphaOut)) 
			end)
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			_G["ChatFrame"..i.."ButtonFrameUpButton"]:Hide()
			_G["ChatFrame"..i.."ButtonFrameDownButton"]:Hide()
			_G["ChatFrame"..i.."ButtonFrameUpButton"]:SetScript("OnShow", function(self) self:Hide() end)
			_G["ChatFrame"..i.."ButtonFrameDownButton"]:SetScript("OnShow", function(self) self:Hide() end)
		end
	end
end

function CheckSocialButton()
	if db.Chat.Buttons.SocialButton.Enable == true then
		FriendsMicroButton:SetAlpha(db.Chat.Buttons.SocialButton.AlphaOut)
		FriendsMicroButton:ClearAllPoints()
		FriendsMicroButton:SetPoint("BOTTOMLEFT", UIParent, "BOTTOMLEFT", tonumber(db.Chat.Buttons.SocialButton.X), tonumber(db.Chat.Buttons.SocialButton.Y))
		FriendsMicroButton:SetScript("OnShow", FriendsMicroButton.Show)
		FriendsMicroButton:Show()
		
		FriendsMicroButton:SetScript("OnEnter", function()
			FriendsMicroButton:SetAlpha(tonumber(db.Chat.Buttons.SocialButton.AlphaIn)) 
		end)
			
		FriendsMicroButton:SetScript("OnLeave", function()
			FriendsMicroButton:SetAlpha(tonumber(db.Chat.Buttons.SocialButton.AlphaOut)) 
		end)
	else
		FriendsMicroButton:SetScript("OnShow", FriendsMicroButton.Hide)
		FriendsMicroButton:Hide()
	end
end

function SetChatFont()
	for i = 1, NUM_CHAT_WINDOWS do
		_G["ChatFrame"..i]:SetFont(LSM:Fetch("font", db.Chat.Font), db.Chat.Size, db.Chat.Flag)
		_G["ChatFrame"..i.."EditBox"]:SetFont(LSM:Fetch("font", db.Chat.Editbox.Font), db.Chat.Editbox.Size, db.Chat.Editbox.Flag)
	end
end

function SetEditBoxPosition()
	for i = 1, NUM_CHAT_WINDOWS do
		local editbox = _G["ChatFrame"..i.."EditBox"]
		editbox:ClearAllPoints();
		if db.Chat.Editbox.Position.Anchor == "TOP" then
			editbox:SetPoint("BOTTOMLEFT", ChatFrame1, "TOPLEFT", 14, 12)
			editbox:SetPoint("BOTTOMRIGHT", ChatFrame1, "TOPRIGHT", 14, 12)
		elseif db.Chat.Editbox.Position.Anchor == "BOTTOM" then
			editbox:SetPoint("TOPLEFT", ChatFrame1, "BOTTOMLEFT", 0, -8)
			editbox:SetPoint("TOPRIGHT", ChatFrame1, "BOTTOMRIGHT", 0, -8)
		else		
			editbox:SetPoint("BOTTOMLEFT", ChatFrame1, "TOPLEFT", tonumber(db.Chat.Editbox.Position.X), tonumber(db.Chat.Editbox.Position.Y))
			editbox:SetPoint("BOTTOMRIGHT", ChatFrame1, "TOPRIGHT", tonumber(db.Chat.Editbox.Position.X), tonumber(db.Chat.Editbox.Position.Y))
		end
	end
end

function SetEditBoxBackdrop()
	for i = 1, NUM_CHAT_WINDOWS do
		local editbox = _G["ChatFrame"..i.."EditBox"]
		
		editbox:SetBackdrop({
			bgFile = "Interface/Tooltips/UI-Tooltip-Background",
			edgeFile = LSM:Fetch("border", db.Chat.Editbox.Border.Texture),
			tile = 0, tileSize = 0, edgeSize = tonumber(db.Chat.Editbox.Border.Thickness),
			insets = { left = tonumber(db.Chat.Editbox.Border.Inset.left), right = tonumber(db.Chat.Editbox.Border.Inset.right), top = tonumber(db.Chat.Editbox.Border.Inset.top), bottom = tonumber(db.Chat.Editbox.Border.Inset.bottom) }
		})
	end
end

function SetChatPosition()
	ChatFrame1:SetMovable(true)
	ChatFrame1:SetUserPlaced(true)
	ChatFrame1:SetHeight(tonumber(db.Chat.Height))
	ChatFrame1:SetWidth(tonumber(db.Chat.Width))
	ChatFrame1:ClearAllPoints()
	ChatFrame1:SetPoint("BOTTOMLEFT", UIParent, "BOTTOMLEFT", tonumber(db.Chat.X), tonumber(db.Chat.Y))
	FCF_SavePositionAndDimensions(ChatFrame1)
	FCF_SetLocked(ChatFrame1, 1)
end

function CheckSecondChatFrame()
	if db.Chat.SecondChatFrame == true then
		ChatAlphaAnchor2:Show()
		ChatBackground2:Show()
		ChatBackground2Fill:Show()
	else
		ChatAlphaAnchor2:Hide()
		ChatBackground2:Hide()
		ChatBackground2Fill:Hide()
	end
end

function SetChatJustify()
	local SetChatFloating = loadstring(db.Chat.SecondChatAnchor..":SetJustifyH(\""..db.Chat.Justify.."\")")
	SetChatFloating()
end

function SetSecondChatAnchor()
	ChatAlphaAnchor2:ClearAllPoints()
	local SetChatAnchor = loadstring("ChatAlphaAnchor2:SetPoint(\"TOPLEFT\","..db.Chat.SecondChatAnchor..",\"TOPLEFT\",-10,8)")
	SetChatAnchor()
end

function Position:SetEditBoxColor(...)
	local r = db.Chat.Editbox.Color.r
	local g = db.Chat.Editbox.Color.g
	local b = db.Chat.Editbox.Color.b
	local a = db.Chat.Editbox.Color.a

	if db.Chat.Editbox.ColorByChannel == true then
		for i = 1, NUM_CHAT_WINDOWS do
			local editbox = _G["ChatFrame"..i.."EditBox"]
			local attr = editbox:GetAttribute("chatType")
			
			if attr == "CHANNEL" then
				local chan = editbox:GetAttribute("channelTarget")
				if chan == 0 then
					if db.Chat.Editbox.Color.Enable == true then
						editbox:SetBackdropColor(r,g,b,a)
						editbox:SetBackdropBorderColor(r,g,b,a + 0.3)
					else
						editbox:SetBackdropColor(color_r,color_g,color_b,0.2)
						editbox:SetBackdropBorderColor(color_r,color_g,color_b,0.5)
					end
				else
					local rc, gc, bc = GetMessageTypeColor("CHANNEL" .. chan)
					editbox:SetBackdropColor(rc, gc, bc, 0.2)
					editbox:SetBackdropBorderColor(rc, gc, bc, 0.5)
				end
			else
				local rc, gc, bc = GetMessageTypeColor(attr)
				editbox:SetBackdropColor(rc, gc, bc, 0.2)
				editbox:SetBackdropBorderColor(rc, gc, bc, 0.5)
			end
		end
	else
		for i = 1, NUM_CHAT_WINDOWS do
			local editbox = _G["ChatFrame"..i.."EditBox"]
			
			if db.Chat.Editbox.Color.Enable == true then
				editbox:SetBackdropColor(r,g,b,a)
				editbox:SetBackdropBorderColor(r,g,b,a + 0.3)
			else
				editbox:SetBackdropColor(color_r,color_g,color_b,0.2)
				editbox:SetBackdropBorderColor(color_r,color_g,color_b,0.5)
			end
		end
	end
end
 
------------------------------------------------------
-- / CHAT / --
------------------------------------------------------

function SetChat()
	SetChatPosition()
	SetChatJustify()

	local ChatAlphaAnchor = CreateFrame("Frame", "ChatAlphaAnchor", UIParent)
	ChatAlphaAnchor:SetWidth(30)
	ChatAlphaAnchor:SetHeight(30)
	ChatAlphaAnchor:SetFrameStrata("BACKGROUND")
	ChatAlphaAnchor:SetBackdrop({bgFile = "Interface/Tooltips/UI-Tooltip-Background",
	edgeFile =  "Interface/Tooltips/UI-Tooltip-Border",
	edgeSize= 15, insets = { left = 3, right = 3, top = 3, bottom = 3 }}) 
	ChatAlphaAnchor:SetPoint("TOPLEFT", ChatFrame1, "TOPLEFT", -3, 8)
	ChatAlphaAnchor:SetBackdropColor(0,0,0,0)
	ChatAlphaAnchor:SetBackdropBorderColor(0,0,0,0)
	ChatAlphaAnchor:SetAlpha(1)
	ChatAlphaAnchor:Show()
	
	local ChatBackground = create_me_a_frame("FRAME","ChatBackground",ChatAlphaAnchor,565,570,1,"BACKGROUND",0,"TOPLEFT",ChatAlphaAnchor,"TOPLEFT",-17,10,1)
	ChatBackground:SetBackdrop({bgFile=fdir.."chat.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ChatBackground:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
	ChatBackground:SetBackdropBorderColor(0,0,0,0)
	ChatBackground:Show()
	
	if db.Frames.UseFullTexture_Chat == true then
		chatTex = fdir.."chat_full.tga"
	else
		chatTex = fdir.."chat_half.tga"
	end
		
	local ChatBackgroundFill = create_me_a_frame("FRAME","ChatBackgroundFill",ChatAlphaAnchor,565,570,1,"BACKGROUND",0,"TOPLEFT",ChatAlphaAnchor,"TOPLEFT",-17,10,1)
	ChatBackgroundFill:SetBackdrop({bgFile=chatTex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ChatBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
	ChatBackgroundFill:SetBackdropBorderColor(0,0,0,0)
	ChatBackgroundFill:Show()
	
	local ChatAlphaAnchor2 = CreateFrame("Frame", "ChatAlphaAnchor2", UIParent)
	ChatAlphaAnchor2:SetWidth(30)
	ChatAlphaAnchor2:SetHeight(30)
	ChatAlphaAnchor2:SetFrameStrata("BACKGROUND")
	ChatAlphaAnchor2:SetBackdrop({bgFile = "Interface/Tooltips/UI-Tooltip-Background",
	edgeFile =  "Interface/Tooltips/UI-Tooltip-Border",
	edgeSize= 15, insets = { left = 3, right = 3, top = 3, bottom = 3 }}) 
	ChatAlphaAnchor2:SetPoint("TOPLEFT", db.Chat.SecondChatAnchor, "TOPLEFT", -10, 8)
	ChatAlphaAnchor2:SetBackdropColor(0,0,0,0)
	ChatAlphaAnchor2:SetBackdropBorderColor(0,0,0,0)
	ChatAlphaAnchor2:SetAlpha(1)
	ChatAlphaAnchor2:Hide()
	
	SetSecondChatAnchor()
	
	if db.Frames.UseFullTexture_Chat == true then
		chatTex2 = fdir.."grid_full.tga"
	else
		chatTex2 = fdir.."grid_half.tga"
	end
	
	local ChatBackground2 = create_me_a_frame("FRAME","ChatBackground2",ChatAlphaAnchor2,565,570,1,"BACKGROUND",0,"TOPLEFT",ChatAlphaAnchor2,"TOPLEFT",-17,10,1)
	ChatBackground2:SetBackdrop({bgFile=fdir.."grid.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ChatBackground2:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
	ChatBackground2:SetBackdropBorderColor(0,0,0,0)
	ChatBackground2:Hide()
	
	local ChatBackground2Fill = create_me_a_frame("FRAME","ChatBackground2Fill",ChatAlphaAnchor,565,570,1,"BACKGROUND",0,"TOPLEFT",ChatAlphaAnchor2,"TOPLEFT",-17,10,1)
	ChatBackground2Fill:SetBackdrop({bgFile=chatTex2, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	ChatBackground2Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
	ChatBackground2Fill:SetBackdropBorderColor(0,0,0,0)
	ChatBackground2Fill:Hide()
	
	CheckSecondChatFrame()
	
	local chattimerout,chattimerin = 0,0
	local alpha_timer = 0.5
	
	local ChatAlphaOut = CreateFrame("Frame", "ChatAlphaOut", UIParent)
	ChatAlphaOut:Hide()
	
	ChatAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		chattimerout = chattimerout + elapsed
		if chattimerout < alpha_timer then
			local alpha = 1 - chattimerout / alpha_timer 
			ChatAlphaAnchor:SetAlpha(alpha)
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(alpha)
			end
		else
			ChatAlphaAnchor:SetAlpha(0)
			ChatAlphaAnchor:Hide()
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(0)
				ChatAlphaAnchor2:Hide()
			end
			chattimerout = 0
			self:Hide()
		end
	end)
	
	local ChatAlphaIn = CreateFrame("Frame", "ChatAlphaIn", UIParent)
	ChatAlphaIn:Hide()
	
	ChatAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		chattimerin = chattimerin + elapsed
		if db.Chat.SecondChatFrame == true then
			ChatAlphaAnchor2:Show()
		end
		ChatAlphaAnchor:Show()
		if chattimerin < alpha_timer then
			local alpha = chattimerin / alpha_timer
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(alpha)
			end 
			ChatAlphaAnchor:SetAlpha(alpha)
		else
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(1)
			end
			ChatAlphaAnchor:SetAlpha(1)
			chattimerin = 0
			self:Hide()
		end
	end)
	
	-----------------------------------------------------------------------------
	-- CHAT SETTINGS
	-----------------------------------------------------------------------------
	if db.Chat.Enable ~= true then return end
	local chat_font, editbox_font
	
	if db.Chat.Font == nil or db.Chat.Font == "" then
		chat_font = "Fonts\ARIALN.TTF"
	else
		chat_font = LSM:Fetch("font", db.Chat.Font)
	end
	
	if db.Chat.Editbox.Font == nil or db.Chat.Editbox.Font == "" then
		editbox_font = "Fonts\ARIALN.TTF"
	else
		editbox_font = LSM:Fetch("font", db.Chat.Editbox.Font)
	end
		
	chat_fontsize = tonumber(db.Chat.Size)
	editbox_fontsize = tonumber(db.Chat.Editbox.Size)
	
	local player = UnitName("player")
	local ChatFrame1 = ChatFrame1
	local replace = string.gsub
	local find = string.find
	
	local replaceschan = {
		['–ì–∏–ª—å–¥–∏—è'] = '[–ì]',
		['–ì—Ä—É–ø–ø–∞'] = '[–ì—Ä]',
		['–†–µ–π–¥'] = '[–†]',
		['–õ–∏–¥–µ—Ä —Ä–µ–π–¥–∞'] = '[–õ–†]',
		['–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–µ–π–¥—É'] = '[–û–†]',
		['–û—Ñ–∏—Ü–µ—Ä'] = '[–û]',
		['–ü–æ–ª–µ –±–æ—è'] = '[–ü–ë]',
		['–õ–∏–¥–µ—Ä –ø–æ–ª—è –±–æ—è'] = '[–õ–ü–ë]', 
		['Guilde'] = '[G]',
		['Groupe'] = '[GR]',
		['Chef de raid'] = '[RL]',
		['Avertissement Raid'] = '[AR]',
		['Officier'] = '[O]',
		['Champs de bataille'] = '[CB]',
		['Chef de bataille'] = '[CDB]',
		['Guild'] = '[G]',
		['Party'] = '[P]',
		['Party Leader'] = '[PL]',
		['Raid'] = '[R]',
		['Raid Leader'] = '[RL]',
		['Raid Warning'] = '[RW]',
		['Officer'] = '[O]',
		['Battleground'] = '[B]',
		['Battleground Leader'] = '[BL]',
		['(%d+)%. .-'] = '[%1]',
	}
	
	-- Hook into the AddMessage function
	local AddMessageOriginal = ChatFrame1.AddMessage
	local function AddMessageHook(frame, text, ...)
	
		if db.Chat.ShortChannelNames == true then
			for k,v in pairs(replaceschan) do
				text = text:gsub('|h%['..k..'%]|h', '|h'..v..'|h')
			end
		end
		
		text = replace(text, "has come online.", "is now online!")
		text = replace(text, "|Hplayer:(.+)|h%[(.+)%]|h has earned", "|Hplayer:%1|h%2|h has earned")
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h whispers:", "From [|Hplayer:%1:%2|h%3|h]:")
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h says:", "[|Hplayer:%1:%2|h%3|h]:")	
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h yells:", "[|Hplayer:%1:%2|h%3|h]:")
			
		return AddMessageOriginal(frame, text, ...)
	end
	ChatFrame1.AddMessage = AddMessageHook
	
	local AddMessageOriginal2 = ChatFrame3.AddMessage
	local function AddMessageHook2(frame, text, ...)
		-- chan text smaller or hidden
		if db.Chat.ShortChannelNames == true then
			for k,v in pairs(replaceschan) do
				text = text:gsub('|h%['..k..'%]|h', '|h'..v..'|h')
			end
		end
		text = replace(text, "has come online.", "is now online!")
		text = replace(text, "|Hplayer:(.+)|h%[(.+)%]|h has earned", "|Hplayer:%1|h%2|h has earned")
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h whispers:", "From [|Hplayer:%1:%2|h%3|h]:")
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h says:", "[|Hplayer:%1:%2|h%3|h]:")	
		text = replace(text, "|Hplayer:(.+):(.+)|h%[(.+)%]|h yells:", "[|Hplayer:%1:%2|h%3|h]:")
			
		return AddMessageOriginal2(frame, text, ...)
	end
	ChatFrame3.AddMessage = AddMessageHook2
	
	-- WoW or battle.net player status
	CHAT_FLAG_AFK = "[AFK] "
	CHAT_FLAG_DND = "[DND] "
	CHAT_FLAG_GM = "[|cffff0000GM|r] "
	
	-----------------------------------------------------------------------------
	--Hide Blizzard Frames
	-----------------------------------------------------------------------------
	
	InterfaceOptionsSocialPanelChatStyle:Hide()
	InterfaceOptionsSocialPanelConversationMode:Hide()
	
	CheckChatButtons()
	CheckSocialButton()
	CheckChatArrows()
	CheckChatBottomButton()
	CheckChatMenuButton()
	CheckChatMinimizeButton()
	
	GeneralDockManagerOverflowButton:SetScript("OnShow", GeneralDockManagerOverflowButton.Hide)
	GeneralDockManagerOverflowButton:Hide()
	
	-- hide editbox colored round border
	for i = 1, 10 do
		local x=({_G["ChatFrame"..i.."EditBox"]:GetRegions()})
		x[9]:SetAlpha(0)
		x[10]:SetAlpha(0)
		x[11]:SetAlpha(0)
	end
	
	-----------------------------------------------------------------------------
	--Load Settings
	-----------------------------------------------------------------------------
	
	for i = 1, NUM_CHAT_WINDOWS do
		local chatframe = _G[("ChatFrame%d"):format(i)]
		_G["ChatFrame"..i]:SetClampRectInsets(0,0,0,0)
		_G["ChatFrame"..i]:SetWidth(380)
		_G["ChatFrame"..i]:SetHeight(171)
		_G["ChatFrame"..i]:SetFrameStrata("LOW")
		
		-- Hide chat textures backdrop
		for j = 1, #CHAT_FRAME_TEXTURES do
			_G["ChatFrame"..i..CHAT_FRAME_TEXTURES[j]]:SetTexture(nil)
		end
		
		-- Set Chat Font
		SetChatFont()
		
		-- Set Chat Fading
		SetChatFading()

		-----------------------------------------------------------------------------
		--EditBox Settings
		-----------------------------------------------------------------------------
		
		-- Hide Blizz Textures
		local editbox = _G["ChatFrame"..i.."EditBox"]
		local left, mid, right = select(6, editbox:GetRegions())
		left:Hide(); mid:Hide(); right:Hide()
		
		editbox.focusLeft:SetTexture([[Interface\ChatFrame\UI-ChatInputBorder-Left2]])
		editbox.focusRight:SetTexture([[Interface\ChatFrame\UI-ChatInputBorder-Right2]])
		editbox.focusMid:SetTexture([[Interface\ChatFrame\UI-ChatInputBorder-Mid2]])
		
		editbox:Hide()
		editbox:HookScript('OnEnterPressed', function(s) s:Hide() end)
		
		-- SetPosition
		SetEditBoxPosition()
		
		-- Disable alt key usage
		editbox:SetAltArrowKeyMode(false)
		
		--	Color Editbox
		SetEditBoxBackdrop()
		Position:Unhook("ChatEdit_UpdateHeader")
		Position:SecureHook("ChatEdit_UpdateHeader", "SetEditBoxColor", true)
		Position:SetEditBoxColor()
	end
	
	-----------------------------------------------------------------------------
	--Tab Settings
	-----------------------------------------------------------------------------
	SetTabsAlpha()
	
	------------------------------------------------------------------------
	--	Lock docked tabs
	------------------------------------------------------------------------
	
	function ChatTab_OnDragStart(self)
		if IsAltKeyDown() or not _G[self:GetName():sub(1, -4)].isDocked then
			hooks[self].OnDragStart(self)
		end
	end
	
	function SetLockDockedTabs()
		if db.Chat.Tabs.LockDockedTabs == true then
			for i = 2, NUM_CHAT_WINDOWS do
				local tab = _G[("ChatFrame%dTab"):format(i)]
				if not hooks[tab] then
					hooks[tab] = { }
				end
				if not hooks[tab].OnDragStart then
					hooks[tab].OnDragStart = tab:GetScript("OnDragStart")
					tab:SetScript("OnDragStart", ChatTab_OnDragStart)
				end
			end
		else
			for i = 2, NUM_CHAT_WINDOWS do
				tab = _G[("ChatFrame%dTab"):format(i)]
				if hooks[tab] and hooks[tab].OnDragStart then
					tab:SetScript("OnDragStart", hooks[tab].OnDragStart)
					hooks[tab].OnDragStart = nil
				end
			end
		end
	end
	
	SetLockDockedTabs()
	
	-- Remember last channel
	ChatTypeInfo.WHISPER.sticky = 1
	ChatTypeInfo.BN_WHISPER.sticky = 1
	ChatTypeInfo.OFFICER.sticky = 1
	ChatTypeInfo.RAID_WARNING.sticky = 1
	ChatTypeInfo.CHANNEL.sticky = 1

	-----------------------------------------------------------------------------
	-- copy url
	-----------------------------------------------------------------------------

	local color = "BD0101"
	local pattern = "[wWhH][wWtT][wWtT][\46pP]%S+[^%p%s]"
	
	function string.color(text, color)
		return "|cff"..color..text.."|r"
	end
	
	function string.link(text, type, value, color)
		return "|H"..type..":"..tostring(value).."|h"..tostring(text):color(color or "ffffff").."|h"
	end
	
	StaticPopupDialogs["LINKME"] = {
		text = "URL COPY",
		button2 = CANCEL,
		hasEditBox = true,
		hasWideEditBox = true,
		timeout = 0,
		exclusive = 1,
		hideOnEscape = 1,
		EditBoxOnEscapePressed = function(self) self:GetParent():Hide() end,
		whileDead = 1,
		maxLetters = 255,
	}
	
	local function f(url)
		return string.link("["..url.."]", "url", url, color)
	end
	
	local function hook(self, text, ...)
		self:f(text:gsub(pattern, f), ...)
	end
	
	for i = 1, NUM_CHAT_WINDOWS do
		if ( i ~= 2 ) then
			local frame = _G["ChatFrame"..i]
			frame.f = frame.AddMessage
			frame.AddMessage = hook
		end
	end

	local f = ChatFrame_OnHyperlinkShow
	function ChatFrame_OnHyperlinkShow(self, link, text, button)
		local type, value = link:match("(%a+):(.+)")
		if ( type == "url" ) then
			local dialog = StaticPopup_Show("LINKME")
			local editbox = _G[dialog:GetName().."WideEditBox"]  
			editbox:SetText(value)
			editbox:SetFocus()
			editbox:HighlightText()
			local button = _G[dialog:GetName().."Button2"]
				
			button:ClearAllPoints()
			   
			button:SetPoint("CENTER", editbox, "CENTER", 0, -30)
		else
			f(self, link, text, button)
		end
	end
	
	------------------------------------------------------------------------
	--	No more click on item chat link
	------------------------------------------------------------------------
	
	if db.Chat.ShowItemTooltips == true then
		local orig1, orig2 = {}, {}
		local GameTooltip = GameTooltip
		
		local linktypes = {item = true, enchant = true, spell = true, quest = true, unit = true, talent = true, achievement = true, glyph = true}
		
		
		local function OnHyperlinkEnter(frame, link, ...)
			local linktype = link:match("^([^:]+)")
			if linktype and linktypes[linktype] then
				GameTooltip:SetOwner(frame, "ANCHOR_TOPRIGHT")
				GameTooltip:SetHyperlink(link)
				GameTooltip:Show()
			end
		
			if orig1[frame] then return orig1[frame](frame, link, ...) end
		end
		
		local function OnHyperlinkLeave(frame, ...)
			GameTooltip:Hide()
			if orig2[frame] then return orig2[frame](frame, ...) end
		end
		
		
		local _G = getfenv(0)
		for i=1, NUM_CHAT_WINDOWS do
			local frame = _G["ChatFrame"..i]
			orig1[frame] = frame:GetScript("OnHyperlinkEnter")
			frame:SetScript("OnHyperlinkEnter", OnHyperlinkEnter)
		
			orig2[frame] = frame:GetScript("OnHyperlinkLeave")
			frame:SetScript("OnHyperlinkLeave", OnHyperlinkLeave)
		end
	end
	
	-----------------------------------------------------------------------------
	-- Copy Chat
	-----------------------------------------------------------------------------
	
	local lines = {}
	local frame = nil
	local editBox = nil
	local isf = nil
	
	local function CreatCopyFrame()
		frame = CreateFrame("Frame", "CopyFrame", UIParent)
		frame:SetBackdrop({
				bgFile = "Interface/Tooltips/UI-Tooltip-Background", 
				edgeFile = "Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", 
				tile = 0, tileSize = 0, edgeSize = 3, 
				insets = { left = 2, right = 2, top = 2, bottom = 2 }
		})
		frame:SetBackdropColor(0,0,0,0.4)
		frame:SetBackdropBorderColor(0,0,0,0.8)
		frame:SetWidth(610)
		frame:SetHeight(200)
		frame:SetScale(1)
		frame:SetPoint("CENTER", UIParent, "CENTER", 0,10)
		frame:Hide()
		frame:SetFrameStrata("DIALOG")
	
		local scrollArea = CreateFrame("ScrollFrame", "CopyScroll", frame, "UIPanelScrollFrameTemplate")
		scrollArea:SetPoint("TOPLEFT", frame, "TOPLEFT", 8, -30)
		scrollArea:SetPoint("BOTTOMRIGHT", frame, "BOTTOMRIGHT", -30, 8)
		
		editBox = CreateFrame("EditBox", "CopyBox", frame)
		editBox:SetMultiLine(true)
		editBox:SetMaxLetters(99999)
		editBox:EnableMouse(true)
		editBox:SetAutoFocus(false)
		editBox:SetFontObject(ChatFontNormal)
		editBox:SetWidth(610)
		editBox:SetHeight(200)
		editBox:SetScript("OnEscapePressed", function() frame:Hide() end)
	
		scrollArea:SetScrollChild(editBox)
	
		local close = CreateFrame("Button", "CopyCloseButton", frame, "UIPanelCloseButton")
		close:SetPoint("TOPRIGHT", frame, "TOPRIGHT")
	
		isf = true
	end
	
	local function GetLines(...)
		local ct = 1
		for i = select("#", ...), 1, -1 do
			local region = select(i, ...)
			if region:GetObjectType() == "FontString" then
				lines[ct] = tostring(region:GetText())
				ct = ct + 1
			end
		end
		return ct - 1
	end
	
	local function Copy(cf)
		local _, size = cf:GetFont()
		FCF_SetChatWindowFontSize(cf, cf, 0.01)
		local lineCt = GetLines(cf:GetRegions())
		local text = table.concat(lines, "\n", 1, lineCt)
		FCF_SetChatWindowFontSize(cf, cf, size)
		if not isf then CreatCopyFrame() end
		frame:Show()
		editBox:SetText(text)
		editBox:HighlightText(0)
	end
	
	if db.Chat.Buttons.Copy.Enable == true then
		for i = 1, NUM_CHAT_WINDOWS do
			local cf = _G[format("ChatFrame%d",  i)]
			local button = CreateFrame("Button", format("ButtonCF%d", i), cf)
			button:SetPoint("BOTTOMRIGHT", tonumber(db.Chat.Buttons.Copy.X), tonumber(db.Chat.Buttons.Copy.Y))
			button:SetHeight(22)
			button:SetWidth(22)
			button:SetAlpha(db.Chat.Buttons.Copy.AlphaOut)
			button:SetNormalTexture("Interface\\AddOns\\LUI\\textures\\chatcopy")
			
			button:SetScript("OnClick", function() 
				Copy(cf) 
			end)
			
			button:SetScript("OnEnter", function()
				button:SetPoint("BOTTOMRIGHT", tonumber(db.Chat.Buttons.Copy.X), tonumber(db.Chat.Buttons.Copy.Y))
				button:SetAlpha(db.Chat.Buttons.Copy.AlphaIn) 
			end)
			
			button:SetScript("OnLeave", function()
				button:SetPoint("BOTTOMRIGHT", tonumber(db.Chat.Buttons.Copy.X), tonumber(db.Chat.Buttons.Copy.Y))
				button:SetAlpha(db.Chat.Buttons.Copy.AlphaOut) 
			end)
			
			local tab = _G[format("ChatFrame%dTab", i)]
			
			tab:SetScript("OnShow", function()
				button:SetAlpha(db.Chat.Buttons.Copy.AlphaOut) 
				button:Show() 
			end)
			
			tab:SetScript("OnHide", function()
				button:SetAlpha(db.Chat.Buttons.Copy.AlphaOut)
				button:Hide() 
			end)
		end
	end
	
	------------------------------------------------------------------------
	--	Rewrite Chatframe mousewheel.
	------------------------------------------------------------------------
	
	local normscrollspeed = tonumber(db.Chat.MouseWheel.NormalSpeed)
	local ctrlscrollspeed = tonumber(db.Chat.MouseWheel.CTRLSpeed)
	local function scrollFrame(cf, up)
		if IsShiftKeyDown() then
	        if up then cf:ScrollToTop() else cf:ScrollToBottom() end
		else
		    if IsControlKeyDown() then
		        for i = 1,ctrlscrollspeed do
		            if up then cf:ScrollUp() else cf:ScrollDown() end
		        end
		    else
		        for i = 1,normscrollspeed do
		            if up then cf:ScrollUp() else cf:ScrollDown() end
		        end
		    end
		end
	end
	
	for i = 1, NUM_CHAT_WINDOWS do
		local cf = _G[format("ChatFrame%d",  i)]
		cf:SetScript("OnMouseWheel", function(cf, arg1) scrollFrame(cf, arg1 > 0) end)
	    cf:EnableMouseWheel(true)
	end
end

------------------------------------------------------
-- / OMEN / --
------------------------------------------------------ 

function SetOmen()
	if IsAddOnLoaded("Omen") then
		local omentimerout,omentimerin = 0,0
		local alpha_timer = 0.5
		
		local OmenAlphaOut = CreateFrame("Frame", "OmenAlphaOut", UIParent)
		OmenAlphaOut:Hide()
		
		OmenAlphaOut:SetScript("OnUpdate", function(self,elapsed)
			omentimerout = omentimerout + elapsed
			if omentimerout < alpha_timer then
				local alpha = 1 - omentimerout / alpha_timer 
				Omen.Anchor:SetAlpha(alpha)
			else
				Omen.Anchor:SetAlpha(0)
				Omen.Anchor:Hide()
				omentimerout = 0
				self:Hide()
			end
		end)
		
		local OmenAlphaIn = CreateFrame("Frame", "OmenAlphaIn", UIParent)
		OmenAlphaIn:Hide()
		
		OmenAlphaIn:SetScript("OnUpdate", function(self,elapsed)
			omentimerin = omentimerin + elapsed
			if omentimerin < alpha_timer then
				local alpha = omentimerin / alpha_timer 
				Omen.Anchor:SetAlpha(alpha)
			else
				Omen.Anchor:SetAlpha(1)
				omentimerin = 0
				self:Hide()
			end
		end)
		
		if isOmenBackgroundCreated == false or isOmenBackgroundCreated == nil then
			local isOmenBackgroundCreated = true
			local OmenBackground = create_me_a_frame("FRAME","OmenBackground",Omen.Anchor,237,285,1,"BACKGROUND",0,"TOPLEFT",Omen.Anchor,"TOPLEFT",-15,16,1)
			OmenBackground:SetBackdrop({bgFile=fdir.."omen.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			OmenBackground:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
			OmenBackground:SetBackdropBorderColor(0,0,0,0)
			OmenBackground:Show()
			
			if db.Frames.UseFullTexture_Omen == true then
				omenTex = fdir.."omen_full.tga"
			else
				omenTex = fdir.."omen_half.tga"
			end
			
			local OmenBackgroundFill = create_me_a_frame("FRAME","OmenBackgroundFill",Omen.Anchor,237,285,1,"BACKGROUND",0,"TOPLEFT",Omen.Anchor,"TOPLEFT",-15,16,1)
			OmenBackgroundFill:SetBackdrop({bgFile=omenTex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			OmenBackgroundFill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
			OmenBackgroundFill:SetBackdropBorderColor(0,0,0,0)
			OmenBackgroundFill:Show()
		end
		
		if db.General.Omen.IndividualAggrobarColor == true then
			Omen.db.profile.Bar.AggroBarColor.r = db.General.Omen.AggroBarColor.r
			Omen.db.profile.Bar.AggroBarColor.g = db.General.Omen.AggroBarColor.g
			Omen.db.profile.Bar.AggroBarColor.b = db.General.Omen.AggroBarColor.b
			Omen:UpdateBars()
		elseif db.General.Omen.ThemeColor == true then
			Omen.db.profile.Bar.AggroBarColor.r = color_r
			Omen.db.profile.Bar.AggroBarColor.g = color_g
			Omen.db.profile.Bar.AggroBarColor.b = color_b
			Omen:UpdateBars()
		end
	end
end

------------------------------------------------------
-- / BARS / --
------------------------------------------------------

function SetBars()
	local isBarsBackgroundCreated = false

	local BarCheck3 = CreateFrame("Frame", "BarCheck3", UIParent)
		
	BarCheck3:RegisterEvent("PLAYER_ENTERING_WORLD")
	BarCheck3:SetScript("OnEvent", function(self)
		
		SetPosForteCooldown()
		
		if isBarsBackgroundCreated == false or isBarsBackgroundCreated == nil then
			isBarsBackgroundCreated = true
			
			local BarsBackground = create_me_a_frame("FRAME","BarsBackground",UIParent,1024,1024,1,"BACKGROUND",2,"BOTTOM",UIParent,"BOTTOM",200,-70,1)
			BarsBackground:SetBackdrop({bgFile=fdir.."bars_top.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			BarsBackground:SetBackdropColor(frameBar_r,frameBar_g,frameBar_b,1)
			BarsBackground:SetBackdropBorderColor(0,0,0,0)
			BarsBackground:SetAlpha(0.7)
			BarsBackground:Show()
			
			local BarsBackground2 = create_me_a_frame("FRAME","BarsBackground2",BT4Bar1,1024,1024,1,"BACKGROUND",0,"BOTTOM",BT4Bar1,"BOTTOM",210,-105,1)
			BarsBackground2:SetBackdrop({bgFile=fdir.."bars_bottom.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			BarsBackground2:SetBackdropColor(frameBar_r,frameBar_g,frameBar_b,1)
			BarsBackground2:SetBackdropBorderColor(0,0,0,0)
			
			BarsBackground:ClearAllPoints()
			BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", tonumber(db.Bars.OffsetX), tonumber(db.Bars.OffsetY))
			
			BarsBackground2:ClearAllPoints()
			BarsBackground2:SetPoint("BOTTOM", db.Bars.Anchor2, "BOTTOM", tonumber(db.Bars.OffsetBottomX), tonumber(db.Bars.OffsetBottomY))
			
			if db.Bars.ShowBottom == true then
				BarsBackground2:Show()
			else
				BarsBackground2:Hide()
			end
		end
		
		if isForteCooldownLoaded then
		
			local bb_timerout,bb_timerin = 0,0
			local bb_animation_time = 0.5
			local bb_at_out = 0.25
			
			local bb_SlideIn = CreateFrame("Frame", "bb_SlideIn", UIParent)
			bb_SlideIn:Hide()
			
			bb_SlideIn:SetScript("OnUpdate", function(self,elapsed)
				bb_timerin = bb_timerin + elapsed
				local bb_x = tonumber(db.Bars.OffsetX)
				local bb_y = tonumber(db.Bars.OffsetY)
				local bb_pixelpersecond = tonumber(db.Bars.AnimationHeight) * 2
				if bb_timerin < bb_animation_time then
					local y2 = bb_y - bb_timerin * bb_pixelpersecond + bb_pixelpersecond * bb_animation_time
					BarsBackground:ClearAllPoints()
					BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", bb_x, y2)
				else
					BarsBackground:ClearAllPoints()
					BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", bb_x, bb_y)
					bb_timerin = 0
					self:Hide()
				end
			end)

			local bb_SlideOut = CreateFrame("Frame", "bb_SlideOut", UIParent)
			bb_SlideOut:Hide()
			
			bb_SlideOut:SetScript("OnUpdate", function(self,elapsed)
				bb_timerout = bb_timerout + elapsed
				local bb_x = tonumber(db.Bars.OffsetX)
				local bb_y = tonumber(db.Bars.OffsetY)
				local bb_ppx_out = tonumber(db.Bars.AnimationHeight) * 3
				local bb_yout = tonumber(db.Bars.OffsetY) + tonumber(db.Bars.AnimationHeight)
				if bb_timerout < bb_at_out then
					local y2 = bb_y + bb_timerout * bb_ppx_out
					BarsBackground:ClearAllPoints()
					BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", bb_x, y2)
				else
					BarsBackground:ClearAllPoints()
					BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", bb_x, bb_yout)
					bb_timerout = 0
					self:Hide()
				end
			end)
		
			bb_Forte = CreateFrame("Frame", "bb_Forte", UIParent)
			bb_Forte:Show()
			
			local isOut = false
			
			bb_Forte:SetScript("OnUpdate", function(self)
				if db.General.Forte.CDLock ~= false then
					if FX_Cooldown:IsShown() and isOut == false then
						if db.Bars.Animation == true then
							bb_SlideOut:Show()
							isOut = true
						end
					elseif not FX_Cooldown:IsShown() and isOut == true then
						if db.Bars.Animation == true then
							bb_SlideIn:Show()
							isOut = false
						end
					end
				end
			end)
		end
	end)
end

------------------------------------------------------
-- / RECOUNT / --
------------------------------------------------------
function SetRecount()
	if IsAddOnLoaded("Recount") then
		local recounttimerout, recounttimerin = 0,0
		local alpha_timer = 0.5
		
		local RecountAlphaOut = CreateFrame("Frame", "RecountAlphaOut", UIParent)
		RecountAlphaOut:Hide()
		
		RecountAlphaOut:SetScript("OnUpdate", function(self,elapsed)
			recounttimerout = recounttimerout + elapsed
			if recounttimerout < alpha_timer then
				local alpha = 1 - recounttimerout / alpha_timer 
				RecountBackground:SetAlpha(alpha)
				Recount_MainWindow:SetAlpha(alpha)
			else
				RecountBackground:SetAlpha(0)
				Recount_MainWindow:SetAlpha(0)
				Recount_MainWindow:Hide()
				recounttimerout = 0
				self:Hide()
			end
		end)
		
		local RecountAlphaIn = CreateFrame("Frame", "RecountAlphaIn", UIParent)
		RecountAlphaIn:Hide()
		
		RecountAlphaIn:SetScript("OnUpdate", function(self,elapsed)
			Recount_MainWindow:Show()
			recounttimerin = recounttimerin + elapsed
			if recounttimerin < alpha_timer then
				local alpha = recounttimerin / alpha_timer 
				RecountBackground:SetAlpha(alpha)
				Recount_MainWindow:SetAlpha(alpha)
			else
				RecountBackground:SetAlpha(1)
				Recount_MainWindow:SetAlpha(1)
				recounttimerin = 0
				self:Hide()
			end
		end)
		
		if isRecountBackgroundCreated == false or isRecountBackgroundCreated == nil then
			local isRecountBackgroundCreated = true
			local RecountBackground = create_me_a_frame("FRAME","RecountBackground",Recount_MainWindow,237,287,1,"BACKGROUND",0,"TOPLEFT",Recount_MainWindow,"TOPLEFT",-15,-13,1)
			RecountBackground:SetBackdrop({bgFile=fdir.."omen.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			RecountBackground:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
			RecountBackground:SetBackdropBorderColor(0,0,0,0)
			RecountBackground:Show()
			
			if db.Frames.UseFullTexture_Recount == true then
				recountTex = fdir.."omen_full.tga"
			else
				recountTex = fdir.."omen_half.tga"
			end
			
			local RecountBackgroundFill = create_me_a_frame("FRAME","RecountBackgroundFill",Recount_MainWindow,237,287,1,"BACKGROUND",0,"TOPLEFT",Recount_MainWindow,"TOPLEFT",-15,-13,1)
			RecountBackgroundFill:SetBackdrop({bgFile=recountTex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
			RecountBackgroundFill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
			RecountBackgroundFill:SetBackdropBorderColor(0,0,0,0)
			RecountBackgroundFill:Show()
		end
	end
end

------------------------------------------------------
-- / GRID / --
------------------------------------------------------
function SetGridBG()
	local BGWidthOrig = defaults.profile.General.Grid.Width
	local BGWidth = db.General.Grid.Width
	local add = BGWidth - BGWidthOrig
	
	if GridLayout.db.profile.groupAnchor == "TOPLEFT" then
		GridBG_TL:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22,10)
		GridBG_TR:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163+add,10)
		GridBG_BL:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22,-10)
		GridBG_BR:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163+add,-10)
		
		GridBG_TL_Fill:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22,10)
		GridBG_TR_Fill:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163+add,10)
		GridBG_BL_Fill:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22,-10)
		GridBG_BR_Fill:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163+add,-10)
	elseif GridLayout.db.profile.groupAnchor == "TOPRIGHT" then
		GridBG_TL:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22-add,10)
		GridBG_TR:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163,10)
		GridBG_BL:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22-add,-10)
		GridBG_BR:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163,-10)
		
		GridBG_TL_Fill:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22-add,10)
		GridBG_TR_Fill:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163,10)
		GridBG_BL_Fill:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22-add,-10)
		GridBG_BR_Fill:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163,-10)
	elseif GridLayout.db.profile.groupAnchor == "BOTTOMLEFT" then
		GridBG_TL:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22,10)
		GridBG_TR:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163+add,10)
		GridBG_BL:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22,-10)
		GridBG_BR:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163+add,-10)
		
		GridBG_TL_Fill:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22,10)
		GridBG_TR_Fill:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163+add,10)
		GridBG_BL_Fill:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22,-10)
		GridBG_BR_Fill:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163+add,-10)
	elseif GridLayout.db.profile.groupAnchor == "BOTTOMRIGHT" then
		GridBG_TL:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22-add,10)
		GridBG_TR:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163,10)
		GridBG_BL:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22-add,-10)
		GridBG_BR:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163,-10)
		
		GridBG_TL_Fill:SetPoint("TOPLEFT",GridLayoutFrame,"TOPLEFT",-22-add,10)
		GridBG_TR_Fill:SetPoint("TOPRIGHT",GridLayoutFrame,"TOPRIGHT",163,10)
		GridBG_BL_Fill:SetPoint("BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",-22-add,-10)
		GridBG_BR_Fill:SetPoint("BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",163,-10)
	end
	
	if db.General.Grid.Background == "TOPLEFT" then
		GridBG_TL:Show()
		GridBG_TR:Hide()
		GridBG_BL:Hide()
		GridBG_BR:Hide()
		
		GridBG_TL_Fill:Show()
		GridBG_TR_Fill:Hide()
		GridBG_BL_Fill:Hide()
		GridBG_BR_Fill:Hide()
	elseif db.General.Grid.Background == "TOPRIGHT" then
		GridBG_TL:Hide()
		GridBG_TR:Show()
		GridBG_BL:Hide()
		GridBG_BR:Hide()
		
		GridBG_TL_Fill:Hide()
		GridBG_TR_Fill:Show()
		GridBG_BL_Fill:Hide()
		GridBG_BR_Fill:Hide()
	elseif db.General.Grid.Background == "TOPLEFT AND TOPRIGHT" then
		GridBG_TL:Show()
		GridBG_TR:Show()
		GridBG_BL:Hide()
		GridBG_BR:Hide()
		
		GridBG_TL_Fill:Show()
		GridBG_TR_Fill:Show()
		GridBG_BL_Fill:Hide()
		GridBG_BR_Fill:Hide()
	elseif db.General.Grid.Background == "BOTTOMLEFT AND BOTTOMRIGHT" then
		GridBG_TL:Hide()
		GridBG_TR:Hide()
		GridBG_BL:Show()
		GridBG_BR:Show()
		
		GridBG_TL_Fill:Hide()
		GridBG_TR_Fill:Hide()
		GridBG_BL_Fill:Show()
		GridBG_BR_Fill:Show()
	elseif db.General.Grid.Background == "BOTTOMRIGHT" then
		GridBG_TL:Hide()
		GridBG_TR:Hide()
		GridBG_BL:Hide()
		GridBG_BR:Show()
		
		GridBG_TL_Fill:Hide()
		GridBG_TR_Fill:Hide()
		GridBG_BL_Fill:Hide()
		GridBG_BR_Fill:Show()
	elseif db.General.Grid.Background == "BOTTOMLEFT" then
		GridBG_TL:Hide()
		GridBG_TR:Hide()
		GridBG_BL:Show()
		GridBG_BR:Hide()
		
		GridBG_TL_Fill:Hide()
		GridBG_TR_Fill:Hide()
		GridBG_BL_Fill:Show()
		GridBG_BR_Fill:Hide()
	elseif db.General.Grid.Background == "NONE" then
		GridBG_TL:Hide()
		GridBG_TR:Hide()
		GridBG_BL:Hide()
		GridBG_BR:Hide()
		
		GridBG_TL_Fill:Hide()
		GridBG_TR_Fill:Hide()
		GridBG_BL_Fill:Hide()
		GridBG_BR_Fill:Hide()
	end
end


function SetGrid()
	if IsAddOnLoaded("Grid") then
	
		local gridtimerout, gridtimerin = 0,0
		local alpha_timer = 0.5
		
		local GridAlphaOut = CreateFrame("Frame", "GridAlphaOut", UIParent)
		GridAlphaOut:Hide()
		
		GridAlphaOut:SetScript("OnUpdate", function(self,elapsed)
			gridtimerout = gridtimerout + elapsed
			if gridtimerout < alpha_timer then
				local alpha = 1 - gridtimerout / alpha_timer 
				--GridBackground:SetAlpha(alpha)
				GridLayoutFrame:SetAlpha(alpha)
			else
				--GridBackground:SetAlpha(0)
				GridLayoutFrame:SetAlpha(0)
				gridtimerout = 0
				self:Hide()
			end
		end)
		
		local GridAlphaIn = CreateFrame("Frame", "GridAlphaIn", UIParent)
		GridAlphaIn:Hide()
		
		GridAlphaIn:SetScript("OnUpdate", function(self,elapsed)
			gridtimerin = gridtimerin + elapsed
			if gridtimerin < alpha_timer then
				local alpha = gridtimerin / alpha_timer 
				--GridBackground:SetAlpha(alpha)
				GridLayoutFrame:SetAlpha(alpha)
			else
				--GridBackground:SetAlpha(1)
				GridLayoutFrame:SetAlpha(1)
				gridtimerin = 0
				self:Hide()
			end
		end)
	
		local CreateGrid = CreateFrame("Frame", nil, UIParent)
	
		CreateGrid:RegisterEvent("PLAYER_ENTERING_WORLD")
		CreateGrid:SetScript("OnEvent", function(self)
			if isGridBackgroundCreated == false or isGridBackgroundCreated == nil then
				local isGridBackgroundCreated = true
				
				if db.Frames.UseFullTexture_Grid == true then
					gridTex = fdir.."grid_full.tga"
					grid2Tex = fdir.."grid2_full.tga"
					chatTex = fdir.."chat_full.tga"
					chat2Tex = fdir.."chat2_full.tga"
				else
					gridTex = fdir.."grid_half.tga"
					grid2Tex = fdir.."grid_half.tga"
					chatTex = fdir.."chat_half.tga"
					chat2Tex = fdir.."chat2_half.tga"
				end
				
				local GridBG_TL = create_me_a_frame("FRAME","GridBG_TL",GridLayoutFrame,576,576,1,"BACKGROUND",0,"TOPLEFT",GridLayoutFrame,"TOPLEFT",0,0,1)
				GridBG_TL:SetBackdrop({bgFile=fdir.."grid.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_TL:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
				GridBG_TL:SetBackdropBorderColor(0,0,0,0)
				GridBG_TL:Hide()
				
				local GridBG_TL_Fill = create_me_a_frame("FRAME","GridBG_TL_Fill",GridLayoutFrame,576,576,1,"BACKGROUND",0,"TOPLEFT",GridLayoutFrame,"TOPLEFT",0,0,1)
				GridBG_TL_Fill:SetBackdrop({bgFile=gridTex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_TL_Fill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
				GridBG_TL_Fill:SetBackdropBorderColor(0,0,0,0)
				GridBG_TL_Fill:Hide()

				local GridBG_TR = create_me_a_frame("FRAME","GridBG_TR",GridLayoutFrame,576,576,1,"BACKGROUND",0,"TOPRIGHT",GridLayoutFrame,"TOPRIGHT",0,0,1)
				GridBG_TR:SetBackdrop({bgFile=fdir.."chat.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_TR:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
				GridBG_TR:SetBackdropBorderColor(0,0,0,0)
				GridBG_TR:Hide()
				
				local GridBG_TR_Fill = create_me_a_frame("FRAME","GridBG_TR_Fill",GridLayoutFrame,576,576,1,"BACKGROUND",0,"TOPRIGHT",GridLayoutFrame,"TOPRIGHT",0,0,1)
				GridBG_TR_Fill:SetBackdrop({bgFile=chatTex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_TR_Fill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
				GridBG_TR_Fill:SetBackdropBorderColor(0,0,0,0)
				GridBG_TR_Fill:Hide()
				
				local GridBG_BL = create_me_a_frame("FRAME","GridBG_BL",GridLayoutFrame,576,576,1,"BACKGROUND",0,"BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",0,0,1)
				GridBG_BL:SetBackdrop({bgFile=fdir.."grid2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_BL:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
				GridBG_BL:SetBackdropBorderColor(0,0,0,0)
				GridBG_BL:Hide()
				
				local GridBG_BL_Fill = create_me_a_frame("FRAME","GridBG_BL_Fill",GridLayoutFrame,576,576,1,"BACKGROUND",0,"BOTTOMLEFT",GridLayoutFrame,"BOTTOMLEFT",0,0,1)
				GridBG_BL_Fill:SetBackdrop({bgFile=grid2Tex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_BL_Fill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
				GridBG_BL_Fill:SetBackdropBorderColor(0,0,0,0)
				GridBG_BL_Fill:Hide()

				local GridBG_BR = create_me_a_frame("FRAME","GridBG_BR",GridLayoutFrame,576,576,1,"BACKGROUND",0,"BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",0,0,1)
				GridBG_BR:SetBackdrop({bgFile=fdir.."chat2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_BR:SetBackdropColor(frame_r,frame_g,frame_b,frame_a)
				GridBG_BR:SetBackdropBorderColor(0,0,0,0)
				GridBG_BR:Hide()
				
				local GridBG_BR_Fill = create_me_a_frame("FRAME","GridBG_BR_Fill",GridLayoutFrame,576,576,1,"BACKGROUND",0,"BOTTOMRIGHT",GridLayoutFrame,"BOTTOMRIGHT",0,0,1)
				GridBG_BR_Fill:SetBackdrop({bgFile=chat2Tex, edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
				GridBG_BR_Fill:SetBackdropColor(fill_r,fill_g,fill_b,fill_a)
				GridBG_BR_Fill:SetBackdropBorderColor(0,0,0,0)
				GridBG_BR_Fill:Hide()
				
				SetGridBG()
				
				CreateGrid:UnregisterEvent("PLAYER_ENTERING_WORLD")
			end
		end)
	end
end


------------------------------------------------------
-- / FORTE COOLDOWNLINE / --
------------------------------------------------------

function SetPosForte()
	if not oUF_LUI_player then db.General.Forte.Lock = false end
	if db.General.Forte.Lock ~= false then
		
		local fxwidth = tonumber(db.oUF.Player.Width)
		local fxscale = tonumber(FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["scale"])
		fxwidth = fxwidth / fxscale
		
		local f = oUF_LUI_player
		local uiScale = UIParent:GetEffectiveScale()
		local s = f:GetEffectiveScale()
		
		Timer_X = f:GetLeft() * uiScale + (f:GetWidth() / 2 * s )
		Timer_Y = f:GetBottom() * uiScale + (f:GetHeight() * s ) + 9
		
		if class == "DEATHKNIGHT" then
			if db.oUF.Player.Runes.Enable == true then
				if db.oUF.Player.Runes.Lock == true then
					Timer_Y = Timer_Y + (tonumber(db.oUF.Player.Runes.Height) / fxscale)
				end
			end
		elseif class == "SHAMAN" then
			if db.oUF.Player.Totems.Enable == true then
				if db.oUF.Player.Totems.Lock == true then
					Timer_Y = Timer_Y + (tonumber(db.oUF.Player.Totems.Height) / fxscale)
				end
			end
		end
		
		Timer_X = Timer_X + tonumber(db.General.Forte.Timer_PaddingX)
		Timer_Y = Timer_Y + tonumber(db.General.Forte.Timer_PaddingY)
		
		FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Width"] = fxwidth
		FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["x"] = Timer_X
		FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["y"] = Timer_Y
		
		FW:RefreshFrames()
	end
end

function SetPosForteCooldown()
	if isForteCooldownLoaded and db.General.Forte.CDLock ~= false then
		local uiScale = UIParent:GetEffectiveScale()
		BarAnchor = db.Bars.Anchor
		
		GetBottom = loadstring("return "..BarAnchor..":GetBottom()")
		GetScale = loadstring("return "..BarAnchor..":GetEffectiveScale()")
		
		Cooldown_X = UIParent:GetWidth() * uiScale / 2
		Cooldown_Y = tonumber(GetBottom()) * GetScale() + 15
		
		Cooldown_X = Cooldown_X + tonumber(db.General.Forte.Cooldown_PaddingX)
		Cooldown_Y = Cooldown_Y + tonumber(db.General.Forte.Cooldown_PaddingY)
		
		FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["x"] = Cooldown_X
		FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["y"] = Cooldown_Y
	
		FW:RefreshFrames()
	end
end

function SetForte()
	if isForteTimerLoaded then
		
		SetPosForte()
		
		if db.General.Forte.IndividualSparkColor == true then
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SparkColor"] = {db.General.Forte.SparkColor.r, db.General.Forte.SparkColor.g, db.General.Forte.SparkColor.b}
		elseif db.General.Forte.UseThemeColor == true then
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SparkColor"] = {color_r, color_g, color_b, 0.5}
		end
		
		if db.General.Forte.IndividualColor == true then
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HighlightColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CooldownsColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DebuffsColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HealColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FailColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CrowdColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["BuffColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FriendlyBuffColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CurseColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["PetColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["MagicColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DrainColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SelfDebuffColor"] = {tonumber(db.General.Forte.Color.r) -0.1, tonumber(db.General.Forte.Color.g) -0.1, tonumber(db.General.Forte.Color.b) -0.1}
		elseif db.General.Forte.UseHealthbarColor == true then
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HighlightColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CooldownsColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DebuffsColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HealColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FailColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CrowdColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["BuffColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FriendlyBuffColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CurseColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["PetColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["MagicColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DrainColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
			FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SelfDebuffColor"] = {tonumber(db.oUF.Player.Health.IndividualColor.r) -0.1, tonumber(db.oUF.Player.Health.IndividualColor.g) -0.1, tonumber(db.oUF.Player.Health.IndividualColor.b) -0.1}
		end
	end
end

------------------------------------------------------
-- / INFO PANEL LEFT / --
------------------------------------------------------

local function SetInfoPanelLeft()
	local finfo_anchor = create_me_a_frame("FRAME","finfo_anchor",UIParent,25,25,1,"BACKGROUND",0,"BOTTOMLEFT",UIParent,"BOTTOMLEFT",0,0,1)
	finfo_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo_anchor:SetBackdropColor(0,0,0,0)
	finfo_anchor:SetBackdropBorderColor(0,0,0,0)
	finfo_anchor:Show()
	
	local finfo = create_me_a_frame("FRAME","finfo",finfo_anchor,1024,1024,1,"BACKGROUND",1,"BOTTOMLEFT",finfo_anchor,"BOTTOMLEFT",-30,-31,1)
	finfo:SetBackdrop({bgFile=fdir.."info_left.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo:SetBackdropColor(0,0,0,0.9)
	finfo:SetBackdropBorderColor(0,0,0,0)
	finfo:Show()
	
	local finfo_back = create_me_a_frame("FRAME","finfo_back",finfo_anchor,1024,1024,1,"BACKGROUND",0,"BOTTOMLEFT",finfo_anchor,"BOTTOMLEFT",-23,-23,1)
	finfo_back:SetBackdrop({bgFile=fdir.."info_left_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo_back:SetBackdropColor(color_r,color_g,color_b,color_a)
	finfo_back:SetBackdropBorderColor(0,0,0,0)
	finfo_back:Show()
end


------------------------------------------------------
-- / INFO PANEL RIGHT / --
------------------------------------------------------

function SetInfoPanelRight()
	local finfo2_anchor = create_me_a_frame("FRAME","finfo2_anchor",UIParent,25,25,1,"BACKGROUND",0,"BOTTOMRIGHT",UIParent,"BOTTOMRIGHT",0,0,1)
	finfo2_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo2_anchor:SetBackdropColor(0,0,0,0)
	finfo2_anchor:SetBackdropBorderColor(0,0,0,0)
	finfo2_anchor:Show() 
	
	local finfo2 = create_me_a_frame("FRAME","finfo2",finfo2_anchor,1024,1024,1,"BACKGROUND",1,"BOTTOMRIGHT",finfo2_anchor,"BOTTOMRIGHT",36,-31,1)
	finfo2:SetBackdrop({bgFile=fdir.."info_right.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo2:SetBackdropColor(0,0,0,0.9)
	finfo2:SetBackdropBorderColor(0,0,0,0)
	finfo2:Show()
	
	local finfo2_back = create_me_a_frame("FRAME","finfo2_back",finfo2_anchor,1024,1024,1,"BACKGROUND",0,"BOTTOMRIGHT",finfo2_anchor,"BOTTOMRIGHT",29,-23,1)
	finfo2_back:SetBackdrop({bgFile=fdir.."info_right_back.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo2_back:SetBackdropColor(color_r,color_g,color_b,color_a)
	finfo2_back:SetBackdropBorderColor(0,0,0,0)
	finfo2_back:Show()
end

	  
------------------------------------------------------
-- / INFO PANEL TOP / --
------------------------------------------------------

function SetInfoPanelTop()

	-- TOP LEFT
	finfo3_anchor = create_me_a_frame("FRAME","finfo3_anchor",UIParent,25,25,1,"BACKGROUND",0,"CENTER",LUI_Orb,"CENTER",-212,30,1)
	finfo3_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo3_anchor:SetBackdropColor(0,0,0,0)
	finfo3_anchor:SetBackdropBorderColor(0,0,0,0)
	finfo3_anchor:Show() 
	
	finfo3 = create_me_a_frame("FRAME","finfo3",finfo3_anchor,1024,1024,1,"BACKGROUND",1,"TOPLEFT",finfo3_anchor,"TOPLEFT",400,17,1)
	finfo3:SetBackdrop({bgFile=fdir.."info_top_right.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo3:SetBackdropBorderColor(0,0,0,0)
	finfo3:Hide()
	
	finfo3_back = create_me_a_frame("FRAME","finfo3_back",finfo3_anchor,1024,1024,1,"BACKGROUND",0,"TOPRIGHT",finfo3_anchor,"TOPRIGHT",9,11,1)
	finfo3_back:SetBackdrop({bgFile=fdir.."info_top_left2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo3_back:SetBackdropColor(color_r,color_g,color_b,color_a)
	finfo3_back:SetBackdropBorderColor(0,0,0,0)
	finfo3_back:Show()
	
	-- TOP RIGHT
	finfo4_anchor = create_me_a_frame("FRAME","finfo4_anchor",UIParent,25,25,1,"BACKGROUND",0,"CENTER",LUI_Orb,"CENTER",209,30,1)
	finfo4_anchor:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo4_anchor:SetBackdropColor(0,0,0,0)
	finfo4_anchor:SetBackdropBorderColor(0,0,0,0)
	finfo4_anchor:Show() 
	
	finfo4 = create_me_a_frame("FRAME","finfo4",finfo4_anchor,1024,1024,1,"BACKGROUND",1,"TOPLEFT",finfo4_anchor,"TOPLEFT",400,17,1)
	finfo4:SetBackdrop({bgFile=fdir.."info_top_right.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo4:SetBackdropBorderColor(0,0,0,0)
	finfo4:Hide()
	
	finfo4_back = create_me_a_frame("FRAME","finfo4_back",finfo4_anchor,1024,1024,1,"BACKGROUND",0,"TOPLEFT",finfo4_anchor,"TOPLEFT",-9,11,1)
	finfo4_back:SetBackdrop({bgFile=fdir.."info_top_right2.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	finfo4_back:SetBackdropColor(color_r,color_g,color_b,color_a)
	finfo4_back:SetBackdropBorderColor(0,0,0,0)
	finfo4_back:Show()
end


------------------------------------------------------
-- / INFO PANEL TOP / --
------------------------------------------------------

function SetGMTicket()
	TicketStatusFrame:ClearAllPoints()
	TicketStatusFrame:SetPoint("TOPRIGHT", -170,-30)
end


------------------------------------------------------
-- / FRAME CHECK / --
------------------------------------------------------

function CheckFrames()
	local FrameCheck = CreateFrame("Frame", "FrameCheck", UIParent)
	
	FrameCheck:RegisterEvent("PLAYER_ENTERING_WORLD")
	FrameCheck:SetScript("OnEvent", function(self)

		if db.Frames.AlwaysShowChat == true and db.Frames.AlwaysShowOmen == true and db.Frames.AlwaysShowRecount == true and db.Frames.AlwaysShowGrid == true then
			isAllShown = true
			ring6:SetBackdropColor(top_r,top_g,top_b,top_a)
		else
			if db.Frames.IsChatShown == true and db.Frames.IsOmenShown == true and db.Frames.IsRecountShown == true and db.Frames.IsGridShown == true then
				isAllShown = true
				ring6:SetBackdropColor(top_r,top_g,top_b,top_a)
			else
				isAllShown = false
				ring6:SetBackdropColor(0.25,0.25,0.25,0.7)
			end
		end
		
		if db.Frames.AlwaysShowMinimap == true or db.Frames.IsMinimapShown == true then
			Minimap:SetAlpha(1)
			Minimap:Show()
			db.Frames.IsMinimapShown = true
		else
			Minimap:SetAlpha(0)
			Minimap:Hide()
			db.Frames.IsMinimapShown = false
		end
		
		if db.Frames.AlwaysShowChat == true or db.Frames.IsChatShown == true then
			menu_button1:SetAlpha(1)
			ChatAlphaAnchor:SetAlpha(1)
			ChatFrame1:SetAlpha(1)
			ChatFrame2:SetAlpha(1)
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(1)
				ChatFrame3:SetAlpha(1)
			end
			db.Frames.IsChatShown = true
		else
			menu_button1:SetAlpha(0)
			ChatAlphaAnchor:SetAlpha(0)
			ChatFrame1:SetAlpha(1)
			ChatFrame2:SetAlpha(1)
			if db.Chat.SecondChatFrame == true then
				ChatAlphaAnchor2:SetAlpha(0)
				ChatFrame3:SetAlpha(1)
			end
			db.Frames.IsChatShown = false
		end
		
		if IsAddOnLoaded("Omen") then
			if db.Frames.AlwaysShowOmen == true or db.Frames.IsOmenShown == true then
				menu_button2:SetAlpha(1)
				Omen.Anchor:Show()
				Omen.Anchor:SetAlpha(1)
				db.Frames.IsOmenShown = true
			else
				menu_button2:SetAlpha(0)
				Omen.Anchor:SetAlpha(0)
				db.Frames.IsOmenShown = false
			end
		end
		
		if IsAddOnLoaded("Recount") then	
			if db.Frames.AlwaysShowRecount == true or db.Frames.IsRecountShown == true then
				menu_button3:SetAlpha(1)
				RecountBackground:SetAlpha(1)
				Recount_MainWindow:SetAlpha(1)
				Recount_MainWindow:Show()
				db.Frames.IsRecountShown = true
			else
				menu_button3:SetAlpha(0)
				RecountBackground:SetAlpha(0)
				Recount_MainWindow:SetAlpha(0)
				Recount_MainWindow:Hide()
				db.Frames.IsRecountShown = false
			end
		end
		
		if IsAddOnLoaded("Grid") then
			if db.Frames.AlwaysShowGrid == true or db.Frames.IsGridShown == true then
				menu_button4:SetAlpha(1)
				--GridBackground:SetAlpha(1)
				GridLayoutFrame:SetAlpha(1)
				db.Frames.IsGridShown = true
			else
				menu_button4:SetAlpha(0)
				--GridBackground:SetAlpha(0)
				GridLayoutFrame:SetAlpha(0)
				db.Frames.IsGridShown = false
			end
		end
		
		if db.Frames.AlwaysShowMicroMenu == true or db.Frames.IsMicroMenuShown == true then
			MicroMenuButton:SetAlpha(1)
			MicroMenuButton:Show()
		else
			MicroMenuButton:SetAlpha(0)
			MicroMenuButton:Hide()
		end
	end)
end

------------------------------------------------------
-- / SET PORTALS / --
------------------------------------------------------

local function findSpell(spellName)
	local i = 1
	while true do
		local s = GetSpellName(i, BOOKTYPE_SPELL)
		if not s then
			break
		end

		if s == spellName then
			return i
		end

		i = i + 1
	end
end

function SetPortals()
	local _, class = UnitClass('player')
	if class == 'MAGE' then
		local spells = {
			Alliance = {
				3561,  --TP:Stormwind
				3562,  --TP:Ironforge
				3565,  --TP:Darnassus
				32271, --TP:Exodar
				49359, --TP:Theramore
				33690, --TP:Shattrath
				53140, --TP:Dalaran
				10059, --P:Stormwind
				11416, --P:Ironforge
				11419, --P:Darnassus
				32266, --P:Exodar
				49360, --P:Theramore
				33691, --P:Shattrath
				53142  --P:Dalaran
			},
			Horde = {
				3563,  --TP:Undercity
				3566,  --TP:Thunder Bluff
				3567,  --TP:Orgrimmar
				32272, --TP:Silvermoon
				49358, --TP:Stonard
				35715, --TP:Shattrath
				53140, --TP:Dalaran
				11418, --P:Undercity
				11420, --P:Thunder Bluff
				11417, --P:Orgrimmar
				32267, --P:Silvermoon
				49361, --P:Stonard
				35717, --P:Shattrath
				53142  --P:Dalaran
			}
		}
		
		portals = spells[UnitFactionGroup('player')]
		spells = nil
		methods = {}
		
		if portals then
			for _,unTransSpell in ipairs(portals) do
				
				local spell, _, spellIcon = GetSpellInfo(unTransSpell)
				local spellid = findSpell(spell)

				if spellid then	
					methods[spell] = {
						spellid = spellid,
						text = spell,
						spellIcon = spellIcon,
						secure = {
							type = 'spell',
							spell = spell,
						}
					}
				end
			end
		end
	end
end

local function pairsByKeys(t)
	local a = {}
	for n in pairs(t) do
		table.insert(a, n)
	end
	table.sort(a)
	
	local i = 0
	local iter = function ()
		i = i + 1
		if a[i] == nil then
			return nil
		else
			return a[i], t[a[i]]
		end
	end
	return iter
end

local function UpdateMenu()
	local _, class = UnitClass('player')
	
   if class == 'MAGE' then
      dewdrop:AddLine(
      'text',    'Portals',
      'isTitle',    true
      )
	elseif class == 'WARLOCK' then
      dewdrop:AddLine(
      'text',      'Summons',
      'isTitle',   true
      )
	end
	dewdrop:AddLine()

    for k,v in pairsByKeys(methods) do
		if v.secure and GetSpellCooldown(v.text) == 0 then
			dewdrop:AddLine(
			  'text', v.text,
			  'secure',   v.secure,
			  'icon', v.spellIcon,
			  'func', function()  end,
			  'closeWhenClicked', true
			)
		end
    end
   
    dewdrop:AddLine()
   
    dewdrop:AddLine(
      'text', CLOSE,
      'tooltipTitle', CLOSE,
      'tooltipText', CLOSE_DESC,
      'closeWhenClicked', true
	)
end

------------------------------------------------------
-- / SET WARLOCK SUMMONS / --
------------------------------------------------------

function SetLockSummons()
	local _, class = UnitClass('player')
	
	if class == 'WARLOCK' then
	
		local summons = {
			126,   -- Eye of Kilrogg
			688,   -- Imp
			697,   -- Voidwalker
			712,   -- Succubus
			691,   -- Felhunter
			1122,   -- Inferno
			18540,   -- Ritual of Doom
			30146,   -- Felguard
			698,   -- Ritual of Summoning
			48018,   -- Demonic Circle
			29893,   -- Ritual of Souls (Rank 1)
			58887   -- Ritual of Souls (Rank 2)
		}
		
		methods = {}
      	
		for _,unTransSpell in ipairs(summons) do	
			local spell, _, spellIcon = GetSpellInfo(unTransSpell)
			local spellid = findSpell(spell)

			if spellid then	
				methods[spell] = {
					spellid = spellid,
					text = spell,
					spellIcon = spellIcon,
					secure = {
						type = 'spell',
						spell = spell,
					}
				}
			end
		end

		summons = nil
	end
end

------------------------------------------------------
-- / SET MICRO MENU / --
------------------------------------------------------

function SetMicroMenu()
	if micro_r > 1 then
		micro_r = 1
	elseif micro_r < 0 then
		micro_r = 0
	end
	
	if micro_g > 1 then
		micro_g = 1
	elseif micro_g < 0 then
		micro_g = 0
	end
	
	if micro_b > 1 then
		micro_b = 1
	elseif micro_b < 0 then
		micro_b = 0
	end
	
	local MicroMenuAnchor = create_me_a_frame("FRAME","MicroMenuAnchor",UIParent,128,128,1,"HIGH",2,"TOPRIGHT",UIParent,"TOPRIGHT",-150,6,1)
	MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
	MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)
	MicroMenuAnchor:SetAlpha(1)
	MicroMenuAnchor:Show()
	
	local MicroMenu_ButtonRight = create_me_a_frame("FRAME","MicroMenu_ButtonRight",MicroMenuAnchor,128,128,1,"HIGH",1,"RIGHT",MicroMenuAnchor,"RIGHT",47,-3,1)
	MicroMenu_ButtonRight:SetBackdrop({bgFile = fdir.."mm_button_right.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenu_ButtonRight:SetBackdropColor(color_r,color_g,color_b,0.8)
	MicroMenu_ButtonRight:SetBackdropBorderColor(0,0,0,0)
	MicroMenu_ButtonRight:SetAlpha(1)
	MicroMenu_ButtonRight:Show()
	
	local MicroMenu_ButtonLeft = create_me_a_frame("FRAME","MicroMenu_ButtonLeft",MicroMenuAnchor,128,128,1,"HIGH",1,"LEFT",MicroMenuAnchor,"LEFT",-47,-3,1)
	MicroMenu_ButtonLeft:SetBackdrop({bgFile = fdir.."mm_button_left.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenu_ButtonLeft:SetBackdropColor(color_r,color_g,color_b,0.8)
	MicroMenu_ButtonLeft:SetBackdropBorderColor(0,0,0,0)
	MicroMenu_ButtonLeft:SetAlpha(1)
	MicroMenu_ButtonLeft:Show()
	
	if db.Frames.IsMicroMenuShown == true then
		MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor3.tga",
			  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
			  tile=false, tileSize = 0, edgeSize = 1,
			  insets = { left = 0, right = 0, top = 0, bottom = 0}});
		MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
		MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
	else
		MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor.tga",
			  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
			  tile=false, tileSize = 0, edgeSize = 1,
			  insets = { left = 0, right = 0, top = 0, bottom = 0}});
		MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
		MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
	end
	
	local MicroMenu_Clicker = create_me_a_frame("BUTTON","MicroMenu_Clicker",MicroMenuAnchor,85,22,1,"HIGH",2,"TOP",MicroMenuAnchor,"TOP",0,0,1)
	MicroMenu_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenu_Clicker:SetBackdropColor(0,0,0,0)
	MicroMenu_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenu_Clicker:SetAlpha(1)
	MicroMenu_Clicker:Show()
	
	local MicroMenu_ButtonRight_Clicker = create_me_a_frame("BUTTON","MicroMenu_ButtonRight_Clicker",MicroMenu_ButtonRight,40,12,1,"HIGH",2,"TOP",MicroMenu_ButtonRight,"TOP",22,-5,1)
	MicroMenu_ButtonRight_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenu_ButtonRight_Clicker:SetBackdropColor(0,0,0,0)
	MicroMenu_ButtonRight_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenu_ButtonRight_Clicker:SetAlpha(1)
	MicroMenu_ButtonRight_Clicker:Show()
	
	local MicroMenu_ButtonLeft_Clicker = create_me_a_frame("BUTTON","MicroMenu_ButtonLeft_Clicker",MicroMenu_ButtonLeft,40,12,1,"HIGH",2,"TOP",MicroMenu_ButtonLeft,"TOP",-22,-5,1)
	MicroMenu_ButtonLeft_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenu_ButtonLeft_Clicker:SetBackdropColor(0,0,0,0)
	MicroMenu_ButtonLeft_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenu_ButtonLeft_Clicker:SetAlpha(1)
	MicroMenu_ButtonLeft_Clicker:Hide()
	
	local MicroMenuButton = create_me_a_frame("FRAME","MicroMenuButton",UIParent,512,512,1,"BACKGROUND",1,"TOPRIGHT",UIParent,"TOPRIGHT",0,-2,1)
	MicroMenuButton:SetBackdrop({bgFile = fdir.."micro_button.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton:SetBackdropColor(0.2,0.43,1,1)
	MicroMenuButton:SetBackdropColor(micro_r_bg, micro_g_bg, micro_b_bg,0.2)
	MicroMenuButton:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton:SetAlpha(1)
	MicroMenuButton:Show()
	
	MicroMenu_ButtonRight_Clicker:RegisterForClicks("AnyUp")
	MicroMenu_ButtonRight_Clicker:SetScript("OnClick", function(self)
		if Minimap:GetAlpha() == 0 then
			MinimapAlphaIn:Show()
			db.Frames.IsMinimapShown = true
		else
			MinimapAlphaOut:Show()
			db.Frames.IsMinimapShown = false
		end
	end)
	
	MicroMenu_ButtonRight_Clicker:SetScript("OnEnter", function(self)
		MicroMenu_ButtonRight:SetBackdrop({bgFile = fdir.."mm_button_right_hover.tga",
					  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
					  tile=false, tileSize = 0, edgeSize = 1,
					  insets = { left = 0, right = 0, top = 0, bottom = 0}});
		MicroMenu_ButtonRight:SetBackdropColor(color_r,color_g,color_b,0.8)
		MicroMenu_ButtonRight:SetBackdropBorderColor(0,0,0,0)
	end)
	
	MicroMenu_ButtonRight_Clicker:SetScript("OnLeave", function(self)
		MicroMenu_ButtonRight:SetBackdrop({bgFile = fdir.."mm_button_right.tga",
					  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
					  tile=false, tileSize = 0, edgeSize = 1,
					  insets = { left = 0, right = 0, top = 0, bottom = 0}});
		MicroMenu_ButtonRight:SetBackdropColor(color_r,color_g,color_b,0.8)
		MicroMenu_ButtonRight:SetBackdropBorderColor(0,0,0,0)
	end)
	
	local _, class = UnitClass('player')
	if class == 'MAGE' or class == 'WARLOCK' then
		MicroMenu_ButtonLeft_Clicker:Show()
		
		MicroMenu_ButtonLeft_Clicker:RegisterForClicks("AnyUp")
		MicroMenu_ButtonLeft_Clicker:SetScript("OnClick", function(self)
			dewdrop:Open(self, 'children', function(level, value) UpdateMenu() end)
		end)
		
		MicroMenu_ButtonLeft_Clicker:SetScript("OnEnter", function(self)
			MicroMenu_ButtonLeft:SetBackdrop({bgFile = fdir.."mm_button_left_hover.tga",
						  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
						  tile=false, tileSize = 0, edgeSize = 1,
						  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenu_ButtonLeft:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenu_ButtonLeft:SetBackdropBorderColor(0,0,0,0)
		end)
		
		MicroMenu_ButtonLeft_Clicker:SetScript("OnLeave", function(self)
			MicroMenu_ButtonLeft:SetBackdrop({bgFile = fdir.."mm_button_left.tga",
						  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
						  tile=false, tileSize = 0, edgeSize = 1,
						  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenu_ButtonLeft:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenu_ButtonLeft:SetBackdropBorderColor(0,0,0,0)
		end)
		
	elseif (IsAddOnLoaded("PallyPower")) then
		MicroMenu_ButtonLeft_Clicker:Show()
		
		MicroMenu_ButtonLeft_Clicker:RegisterForClicks("AnyUp")
		MicroMenu_ButtonLeft_Clicker:SetScript("OnClick", function(self)
			if PallyPowerFrame:IsShown() then
				PallyPowerFrame:Hide()
				PallyPowerFrame:SetAlpha(0)
			else
				PallyPowerFrame:Show()
				PallyPowerFrame:SetAlpha(1)
			end
		end)
		
		MicroMenu_ButtonLeft_Clicker:SetScript("OnEnter", function(self)
			MicroMenu_ButtonLeft:SetBackdrop({bgFile = fdir.."mm_button_left_hover.tga",
						  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
						  tile=false, tileSize = 0, edgeSize = 1,
						  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenu_ButtonLeft:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenu_ButtonLeft:SetBackdropBorderColor(0,0,0,0)
		end)
		
		MicroMenu_ButtonLeft_Clicker:SetScript("OnLeave", function(self)
			MicroMenu_ButtonLeft:SetBackdrop({bgFile = fdir.."mm_button_left.tga",
						  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
						  tile=false, tileSize = 0, edgeSize = 1,
						  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenu_ButtonLeft:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenu_ButtonLeft:SetBackdropBorderColor(0,0,0,0)
		end)
	end

	local mm_timerout, mm_timerin = 0,0
	local mm_alpha_timer = 0.5
	
	local MMAlphaOut = CreateFrame("Frame", "MMAlphaOut", UIParent)
	MMAlphaOut:Hide()
	
	MMAlphaOut:SetScript("OnUpdate", function(self,elapsed)
		mm_timerout = mm_timerout + elapsed
		if mm_timerout < mm_alpha_timer then
			local alpha = 1 - mm_timerout / mm_alpha_timer 
			MicroMenuButton:SetAlpha(alpha)
		else
			MicroMenuButton:SetAlpha(0)
			MicroMenuButton:Hide()
			mm_timerout = 0
			self:Hide()
		end
	end)
	
	local MMAlphaIn = CreateFrame("Frame", "MMAlphaIn", UIParent)
	MMAlphaIn:Hide()
	
	MMAlphaIn:SetScript("OnUpdate", function(self,elapsed)
		MicroMenuButton:Show()
		mm_timerin = mm_timerin + elapsed
		if mm_timerin < mm_alpha_timer then
			local alpha = mm_timerin / mm_alpha_timer 
			MicroMenuButton:SetAlpha(alpha)
		else
			MicroMenuButton:SetAlpha(1)
			mm_timerin = 0
			self:Hide()
		end
	end)
	
	MicroMenu_Clicker:SetScript("OnClick", function(self)
		if db.Frames.IsMicroMenuShown == true then
			MMAlphaOut:Show()
			db.Frames.IsMicroMenuShown = false
			
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		else
			MMAlphaIn:Show()
			db.Frames.IsMicroMenuShown = true
			
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor3.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		end
	end)
	
	MicroMenu_Clicker:SetScript("OnEnter", function(self)
		if db.Frames.IsMicroMenuShown == true then
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor4.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		else
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor2.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		end
	end)
		
	MicroMenu_Clicker:SetScript("OnLeave", function(self)
		if db.Frames.IsMicroMenuShown == true then
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor3.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		else
			MicroMenuAnchor:SetBackdrop({bgFile = fdir.."micro_anchor.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
			MicroMenuAnchor:SetBackdropColor(color_r,color_g,color_b,0.8)
			MicroMenuAnchor:SetBackdropBorderColor(0,0,0,0)	
		end
	end)
	
	local MicroMenuButtonBG = create_me_a_frame("FRAME","MicroMenuButtonBG",MicroMenuButton,512,512,1,"BACKGROUND",0,"TOPRIGHT",MicroMenuButton,"TOPRIGHT",0,0,1)
	MicroMenuButtonBG:SetBackdrop({bgFile = fdir.."micro_button_bg.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButtonBG:SetBackdropColor(0.3,0.3,0.3,0.5)
	MicroMenuButtonBG:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButtonBG:SetFrameStrata("BACKGROUND")
	MicroMenuButtonBG:Show()
	
	local MicroMenuButton_Bags = create_me_a_frame("FRAME","MicroMenuButton_Bags",MicroMenuButton,64,64,1,"BACKGROUND",3,"TOPRIGHT",MicroMenuButton,"TOPRIGHT",0,0,1)
	MicroMenuButton_Bags:SetBackdrop({bgFile = fdir.."micro_bags.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Bags:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Bags:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Bags:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Bags:SetAlpha(1)
	MicroMenuButton_Bags:Show()
	
	local MicroMenuButton_Bags_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Bags_Clicker",MicroMenuButton_Bags,42,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Bags,"CENTER",-8,0,1)
	MicroMenuButton_Bags_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Bags_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Bags_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Bags_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Bags_Clicker:SetFrameLevel(2)
	MicroMenuButton_Bags_Clicker:SetAlpha(0)
	MicroMenuButton_Bags_Clicker:Show()
	
	MicroMenuButton_Bags_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Bags_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Bags_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Bags")
		GameTooltip:AddLine("Show/Hide your Bags", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Bags_Clicker:SetScript("OnLeave", function(self)
		if IsAddOnLoaded("Stuffing") then
			if not StuffingFrameBags:IsShown() then
				MicroMenuButton_Bags_Clicker:SetAlpha(0)
			end
		else
			MicroMenuButton_Bags_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Bags_Clicker:SetScript("OnClick", function(self)
		ToggleBackpack()
	end)
	
	if IsAddOnLoaded("Stuffing") then
		StuffingFrameBags:HookScript("OnShow", function(self)
			MicroMenuButton_Bags_Clicker:SetAlpha(1)
		end)
		
		StuffingFrameBags:HookScript("OnHide", function(self)
			MicroMenuButton_Bags_Clicker:SetAlpha(0)
		end)
	end
	
	local settingsShown = false
	
	local MicroMenuButton_Settings = create_me_a_frame("FRAME","MicroMenuButton_Settings",MicroMenuButton_Bags,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Bags,"LEFT",-48,0,1)
	MicroMenuButton_Settings:SetBackdrop({bgFile = fdir.."micro_settings.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Settings:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Settings:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Settings:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Settings:SetAlpha(1)
	MicroMenuButton_Settings:Show()
	
	local MicroMenuButton_Settings_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Settings_Clicker",MicroMenuButton_Settings,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Settings,"CENTER",-2,0,1)
	MicroMenuButton_Settings_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Settings_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Settings_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Settings_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Settings_Clicker:SetFrameLevel(2)
	MicroMenuButton_Settings_Clicker:SetAlpha(0)
	MicroMenuButton_Settings_Clicker:Show()
	
	MicroMenuButton_Settings_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Settings_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Settings_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("LUI Options")
		GameTooltip:AddLine("Show/Hide LUI Option Panel", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Settings_Clicker:SetScript("OnLeave", function(self)
		if not settingsShown then
			MicroMenuButton_Settings_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Settings_Clicker:SetScript("OnClick", function(self)
		LibStub("AceConfigDialog-3.0"):Open("LUI")
	end)
	
	local MicroMenuButton_GM = create_me_a_frame("FRAME","MicroMenuButton_GM",MicroMenuButton_Settings,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Settings,"LEFT",-33,0,1)
	MicroMenuButton_GM:SetBackdrop({bgFile = fdir.."micro_gm.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_GM:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_GM:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_GM:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_GM:SetAlpha(1)
	MicroMenuButton_GM:Show()
	
	local MicroMenuButton_GM_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_GM_Clicker",MicroMenuButton_GM,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_GM,"CENTER",-2,0,1)
	MicroMenuButton_GM_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_GM_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_GM_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_GM_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_GM_Clicker:SetFrameLevel(2)
	MicroMenuButton_GM_Clicker:SetAlpha(0)
	MicroMenuButton_GM_Clicker:Show()
	
	MicroMenuButton_GM_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_GM_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_GM_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Help Request")
		GameTooltip:Show()
	end)
		
	MicroMenuButton_GM_Clicker:SetScript("OnLeave", function(self)
		if not HelpFrame:IsShown() then
			MicroMenuButton_GM_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_GM_Clicker:SetScript("OnClick", function(self)
		ToggleHelpFrame()
	end)
	
	HelpFrame:HookScript("OnShow", function(self)
		MicroMenuButton_GM_Clicker:SetAlpha(1)
	end)
	
	HelpFrame:HookScript("OnHide", function(self)
		MicroMenuButton_GM_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_LFG = create_me_a_frame("FRAME","MicroMenuButton_LFG",MicroMenuButton_GM,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_GM,"LEFT",-33,0,1)
	MicroMenuButton_LFG:SetBackdrop({bgFile = fdir.."micro_lfg.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_LFG:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_LFG:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_LFG:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_LFG:SetAlpha(1)
	MicroMenuButton_LFG:Show()
	
	local MicroMenuButton_LFG_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_LFG_Clicker",MicroMenuButton_LFG,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_LFG,"CENTER",-2,0,1)
	MicroMenuButton_LFG_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_LFG_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_LFG_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_LFG_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_LFG_Clicker:SetFrameLevel(2)
	MicroMenuButton_LFG_Clicker:SetAlpha(0)
	MicroMenuButton_LFG_Clicker:Show()
	
	MicroMenuButton_LFG_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_LFG_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_LFG_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Dungeon Finder")
		GameTooltip:Show()
	end)
		
	MicroMenuButton_LFG_Clicker:SetScript("OnLeave", function(self)
		if not LFDParentFrame:IsShown() then
			MicroMenuButton_LFG_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_LFG_Clicker:SetScript("OnClick", function(self)
		ToggleLFDParentFrame()
	end)
	
	LFDParentFrame:HookScript("OnShow", function(self)
		MicroMenuButton_LFG_Clicker:SetAlpha(1)
	end)
	
	LFDParentFrame:HookScript("OnHide", function(self)
		MicroMenuButton_LFG_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_PVP = create_me_a_frame("FRAME","MicroMenuButton_PVP",MicroMenuButton_LFG,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_LFG,"LEFT",-33,0,1)
	MicroMenuButton_PVP:SetBackdrop({bgFile = fdir.."micro_pvp.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_PVP:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_PVP:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_PVP:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_PVP:SetAlpha(1)
	MicroMenuButton_PVP:Show()
	
	local MicroMenuButton_PVP_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_PVP_Clicker",MicroMenuButton_PVP,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_PVP,"CENTER",-2,0,1)
	MicroMenuButton_PVP_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_PVP_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_PVP_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_PVP_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_PVP_Clicker:SetFrameLevel(2)
	MicroMenuButton_PVP_Clicker:SetAlpha(0)
	MicroMenuButton_PVP_Clicker:Show()
	
	MicroMenuButton_PVP_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_PVP_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_PVP_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("PvP")
		GameTooltip:AddLine("Arena/Battlegrounds...", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_PVP_Clicker:SetScript("OnLeave", function(self)
		if not PVPParentFrame:IsShown() then
			MicroMenuButton_PVP_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_PVP_Clicker:SetScript("OnClick", function(self)
		TogglePVPFrame()
	end)
	
	PVPParentFrame:HookScript("OnShow", function(self)
		MicroMenuButton_PVP_Clicker:SetAlpha(1)
	end)
	
	PVPParentFrame:HookScript("OnHide", function(self)
		MicroMenuButton_PVP_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_Guild = create_me_a_frame("FRAME","MicroMenuButton_Guild",MicroMenuButton_PVP,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_PVP,"LEFT",-33,0,1)
	MicroMenuButton_Guild:SetBackdrop({bgFile = fdir.."micro_guild.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Guild:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Guild:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Guild:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Guild:SetAlpha(1)
	MicroMenuButton_Guild:Show()
	
	local MicroMenuButton_Guild_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Guild_Clicker",MicroMenuButton_Guild,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Guild,"CENTER",-2,0,1)
	MicroMenuButton_Guild_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Guild_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Guild_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Guild_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Guild_Clicker:SetFrameLevel(2)
	MicroMenuButton_Guild_Clicker:SetAlpha(0)
	MicroMenuButton_Guild_Clicker:Show()
	
	MicroMenuButton_Guild_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Guild_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Guild_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Social")
		GameTooltip:AddLine("Friends/Guild", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Guild_Clicker:SetScript("OnLeave", function(self)
		if not FriendsFrame:IsShown() then
			MicroMenuButton_Guild_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Guild_Clicker:SetScript("OnClick", function(self)
		ToggleFriendsFrame()
	end)
	
	FriendsFrame:HookScript("OnShow", function(self)
		MicroMenuButton_Guild_Clicker:SetAlpha(1)
	end)
	
	FriendsFrame:HookScript("OnHide", function(self)
		MicroMenuButton_Guild_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_Quests = create_me_a_frame("FRAME","MicroMenuButton_Quests",MicroMenuButton_Guild,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Guild,"LEFT",-33,0,1)
	MicroMenuButton_Quests:SetBackdrop({bgFile = fdir.."micro_quests.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Quests:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Quests:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Quests:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Quests:SetAlpha(1)
	MicroMenuButton_Quests:Show()
	
	local MicroMenuButton_Quests_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Quests_Clicker",MicroMenuButton_Quests,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Quests,"CENTER",-2,0,1)
	MicroMenuButton_Quests_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Quests_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Quests_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Quests_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Quests_Clicker:SetFrameLevel(2)
	MicroMenuButton_Quests_Clicker:SetAlpha(0)
	MicroMenuButton_Quests_Clicker:Show()
	
	MicroMenuButton_Quests_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Quests_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Quests_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Quest Log")
		GameTooltip:AddLine("Show/Hide your Quest Log", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Quests_Clicker:SetScript("OnLeave", function(self)
		if not QuestLogFrame:IsShown() then
			MicroMenuButton_Quests_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Quests_Clicker:SetScript("OnClick", function(self)
		if QuestLogFrame:IsShown() then
			QuestLogFrame:Hide()
		else
			QuestLogFrame:Show()
		end
		
		if CharacterFrame:IsShown() then
			CharacterFrame:Hide()
		end
		
		if SpellBookFrame:IsShown() then
			SpellBookFrame:Hide()
		end
		
		if IsAddOnLoaded("Blizzard_TalentUI") then
			if PlayerTalentFrame:IsShown() then
				ToggleTalentFrame()
			end
		end
		
		if FriendsFrame:IsShown() then
			ToggleFriendsFrame()
		end
		
		if PVPParentFrame:IsShown() then
			TogglePVPFrame()
		end
		
		if IsAddOnLoaded("Blizzard_AchievementUI") then
			if AchievementFrame:IsShown() then
				ToggleAchievementFrame()
			end
		end
	end)
	
	QuestLogFrame:HookScript("OnShow", function(self)
		MicroMenuButton_Quests_Clicker:SetAlpha(1)
	end)
	
	QuestLogFrame:HookScript("OnHide", function(self)
		MicroMenuButton_Quests_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_AC = create_me_a_frame("FRAME","MicroMenuButton_AC",MicroMenuButton_Quests,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Quests,"LEFT",-33,0,1)
	MicroMenuButton_AC:SetBackdrop({bgFile = fdir.."micro_achievements.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_AC:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_AC:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_AC:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_AC:SetAlpha(1)
	MicroMenuButton_AC:Show()
	
	local MicroMenuButton_AC_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_AC_Clicker",MicroMenuButton_AC,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_AC,"CENTER",-2,0,1)
	MicroMenuButton_AC_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_AC_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_AC_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_AC_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_AC_Clicker:SetFrameLevel(2)
	MicroMenuButton_AC_Clicker:SetAlpha(0)
	MicroMenuButton_AC_Clicker:Show()
	
	local MicroMenuButton_AC_Clicker_State = false
	
	MicroMenuButton_AC_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_AC_Clicker:SetAlpha(1)
		MicroMenuButton_AC_Clicker_State = true
		GameTooltip:SetOwner(MicroMenuButton_AC_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Achievements")
		GameTooltip:AddLine("Show/Hide your Achievements", 1, 1, 1)
		GameTooltip:Show()
	end)
		
	MicroMenuButton_AC_Clicker:SetScript("OnLeave", function(self)
		MicroMenuButton_AC_Clicker:SetAlpha(0)
		MicroMenuButton_AC_Clicker_State = false
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_AC_Clicker:SetScript("OnClick", function(self)
		ToggleAchievementFrame()
		
		if QuestLogFrame:IsShown() then
			QuestLogFrame:Hide()
		else
			QuestLogFrame:Show()
		end
		
		if CharacterFrame:IsShown() then
			CharacterFrame:Hide()
		end
		
		if SpellBookFrame:IsShown() then
			SpellBookFrame:Hide()
		end
		
		if IsAddOnLoaded("Blizzard_TalentUI") then
			if PlayerTalentFrame:IsShown() then
				ToggleTalentFrame()
			end
		end
		
		if FriendsFrame:IsShown() then
			ToggleFriendsFrame()
		end
		
		if PVPParentFrame:IsShown() then
			TogglePVPFrame()
		end
		
		if QuestLogFrame:IsShown() then
			QuestLogFrame:Hide()
		end
	end)
	
	MicroMenuButton_AC_Clicker:SetScript("OnUpdate", function(self)
		if IsAddOnLoaded("Blizzard_AchievementUI") then
			if MicroMenuButton_AC_Clicker_State == false then
				if AchievementFrame:IsShown() then
					MicroMenuButton_AC_Clicker:SetAlpha(1)
				else
					MicroMenuButton_AC_Clicker:SetAlpha(0)
				end
			end
		end
	end)
	
	local MicroMenuButton_Talents = create_me_a_frame("FRAME","MicroMenuButton_Talents",MicroMenuButton_AC,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_AC,"LEFT",-33,0,1)
	MicroMenuButton_Talents:SetBackdrop({bgFile = fdir.."micro_talents.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Talents:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Talents:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Talents:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Talents:SetAlpha(1)
	MicroMenuButton_Talents:Show()
	
	local MicroMenuButton_Talents_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Talents_Clicker",MicroMenuButton_Talents,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Talents,"CENTER",-2,0,1)
	MicroMenuButton_Talents_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Talents_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Talents_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Talents_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Talents_Clicker:SetFrameLevel(2)
	MicroMenuButton_Talents_Clicker:SetAlpha(0)
	MicroMenuButton_Talents_Clicker:Show()
	
	local MicroMenuButton_Talents_Clicker_State = false
	
	MicroMenuButton_Talents_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Talents_Clicker:SetAlpha(1)
		MicroMenuButton_Talents_Clicker_State = true
		GameTooltip:SetOwner(MicroMenuButton_Talents_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Talents")
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Talents_Clicker:SetScript("OnLeave", function(self)
		MicroMenuButton_Talents_Clicker_State = false
		MicroMenuButton_Talents_Clicker:SetAlpha(0)
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Talents_Clicker:SetScript("OnClick", function(self)
		ToggleTalentFrame()
	end)
	
	MicroMenuButton_Talents_Clicker:SetScript("OnUpdate", function(self)
		if IsAddOnLoaded("Blizzard_TalentUI") then
			if MicroMenuButton_Talents_Clicker_State == false then
				if PlayerTalentFrame:IsShown() then
					MicroMenuButton_Talents_Clicker:SetAlpha(1)
				else
					MicroMenuButton_Talents_Clicker:SetAlpha(0)
				end
			end
		end
	end)
	
	local MicroMenuButton_Spellbook = create_me_a_frame("FRAME","MicroMenuButton_Spellbook",MicroMenuButton_Talents,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Talents,"LEFT",-33,0,1)
	MicroMenuButton_Spellbook:SetBackdrop({bgFile = fdir.."micro_spellbook.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Spellbook:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Spellbook:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Spellbook:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Spellbook:SetAlpha(1)
	MicroMenuButton_Spellbook:Show()
	
	local MicroMenuButton_Spellbook_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Spellbook_Clicker",MicroMenuButton_Spellbook,30,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Spellbook,"CENTER",-2,0,1)
	MicroMenuButton_Spellbook_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Spellbook_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Spellbook_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Spellbook_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Spellbook_Clicker:SetFrameLevel(2)
	MicroMenuButton_Spellbook_Clicker:SetAlpha(0)
	MicroMenuButton_Spellbook_Clicker:Show()
	
	MicroMenuButton_Spellbook_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Spellbook_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Spellbook_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Spellbook & Abilities")
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Spellbook_Clicker:SetScript("OnLeave", function(self)
		if not SpellBookFrame:IsShown() then
			MicroMenuButton_Spellbook_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Spellbook_Clicker:SetScript("OnClick", function(self)
		if SpellBookFrame:IsShown() then
			SpellBookFrame:Hide()
		else
			SpellBookFrame:Show()
		end
		
		if FriendsFrame:IsShown() then
			ToggleFriendsFrame()
		end
		
		if PVPParentFrame:IsShown() then
			TogglePVPFrame()
		end
		
		if CharacterFrame:IsShown() then
			CharacterFrame:Hide()
		end
		
		if QuestLogFrame:IsShown() then
			QuestLogFrame:Hide()
		end
	end)
	
	SpellBookFrame:HookScript("OnShow", function(self)
		MicroMenuButton_Spellbook_Clicker:SetAlpha(1)
	end)
	
	SpellBookFrame:HookScript("OnHide", function(self)
		MicroMenuButton_Spellbook_Clicker:SetAlpha(0)
	end)
	
	local MicroMenuButton_Player = create_me_a_frame("FRAME","MicroMenuButton_Player",MicroMenuButton_Spellbook,64,64,1,"BACKGROUND",3,"LEFT",MicroMenuButton_Spellbook,"LEFT",-33,0,1)
	MicroMenuButton_Player:SetBackdrop({bgFile = fdir.."micro_player.tga",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	--MicroMenuButton_Player:SetBackdropColor(0.6,0.9,1,1)
	MicroMenuButton_Player:SetBackdropColor(micro_r, micro_g, micro_b,1)
	MicroMenuButton_Player:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Player:SetAlpha(1)
	MicroMenuButton_Player:Show()
	
	local MicroMenuButton_Player_Clicker = create_me_a_frame("BUTTON","MicroMenuButton_Player_Clicker",MicroMenuButton_Player,42,25,1,"BACKGROUND",2,"CENTER",MicroMenuButton_Player,"CENTER",-8,0,1)
	MicroMenuButton_Player_Clicker:SetBackdrop({bgFile = "Interface\\Tooltips\\UI-Tooltip-Background",
				  edgeFile='Interface\\Tooltips\\UI-Tooltip-Border',
				  tile=false, tileSize = 0, edgeSize = 1,
				  insets = { left = 0, right = 0, top = 0, bottom = 0}});
	MicroMenuButton_Player_Clicker:SetBackdropColor(0,0,0,1)
	MicroMenuButton_Player_Clicker:SetBackdropBorderColor(0,0,0,0)
	MicroMenuButton_Player_Clicker:SetFrameStrata("BACKGROUND")
	MicroMenuButton_Player_Clicker:SetFrameLevel(2)
	MicroMenuButton_Player_Clicker:SetAlpha(0)
	MicroMenuButton_Player_Clicker:Show()
	
	MicroMenuButton_Player_Clicker:SetScript("OnEnter", function(self)
		MicroMenuButton_Player_Clicker:SetAlpha(1)
		GameTooltip:SetOwner(MicroMenuButton_Player_Clicker, "ANCHOR_NONE ",40,-90)
		GameTooltip:SetText("Character Info")
		GameTooltip:Show()
	end)
		
	MicroMenuButton_Player_Clicker:SetScript("OnLeave", function(self)
		if not CharacterFrame:IsShown() then
			MicroMenuButton_Player_Clicker:SetAlpha(0)
		end
		GameTooltip:Hide()
	end)
	
	MicroMenuButton_Player_Clicker:SetScript("OnClick", function(self)
		ToggleCharacter("PaperDollFrame")
		if SpellBookFrame:IsShown() then
			SpellBookFrame:Hide()
		end
		if QuestLogFrame:IsShown() then
			QuestLogFrame:Hide()
		end
	end)
	
	CharacterFrame:HookScript("OnShow", function(self)
		MicroMenuButton_Player_Clicker:SetAlpha(1)
	end)
	
	CharacterFrame:HookScript("OnHide", function(self)
		MicroMenuButton_Player_Clicker:SetAlpha(0)
	end)
end

------------------------------------------------------
-- / SET PALLY POWER / --
------------------------------------------------------

function SetPallyPower()
	if (IsAddOnLoaded("PallyPower")) then


		PallyPower.db.profile.cBuffNeedAll = {r = 0.5, g = 0.5, b = 0.5, t = 0.7}
		PallyPower.db.profile.cBuffNeedSome = {r = 0.5, g = 0.5, b = 0.5, t = 0.7}
		PallyPower.db.profile.cBuffNeedSpecial = {r = 0.5, g = 0.5, b = 0.5, t = 0.7}
		PallyPower.db.profile.cBuffGood = {r = 0.2, g = 0.2, b = 0.2, t = 0.6}
		PallyPower.db.profile.display.hideDragHandle = false
		PallyPower.db.profile.display.frameLocked = true
		
		PallyPower.ClassIcons = {
			[1] = "Interface\\AddOns\\LUI\\textures\\icons\\Warrior",
			[2] = "Interface\\AddOns\\LUI\\textures\\icons\\Rogue",
			[3] = "Interface\\AddOns\\LUI\\textures\\icons\\Priest",
			[4] = "Interface\\AddOns\\LUI\\textures\\icons\\Druid",
			[5] = "Interface\\AddOns\\LUI\\textures\\icons\\Paladin",
			[6] = "Interface\\AddOns\\LUI\\textures\\icons\\Hunter",
			[7] = "Interface\\AddOns\\LUI\\textures\\icons\\Mage",
			[8] = "Interface\\AddOns\\LUI\\textures\\icons\\Warlock",
			[9] = "Interface\\AddOns\\LUI\\textures\\icons\\Shaman",
			[10] = "Interface\\AddOns\\LUI\\textures\\icons\\DeathKnight",
			[11] = "Interface\\AddOns\\LUI\\textures\\icons\\Pet"};
		
		PallyPower.AuraIcons = {
			[-1] = "",
			[1] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Devotion",
			[2] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Flight",
			[3] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Mindsooth",
			[4] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Shadow",
			[5] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Frost",
			[6] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Fire",
			[7] = "Interface\\AddOns\\LUI\\textures\\icons\\Aura_Crusader"};
		
		PallyPower.BlessingIcons = {
			[-1] = "",
			[1] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Wisdom_Greater",
			[2] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Might_Greater",
			[3] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Kings_Greater",
			[4] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Sanctuary_Greater"};
			
		PallyPower.NormalBlessingIcons = {
			[-1] = "",
			[1] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Wisdom",
			[2] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Might",
			[3] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Kingsr",
			[4] = "Interface\\AddOns\\LUI\\textures\\icons\\Blessing_Sanctuary"};
		
		PallyPowerAura:SetWidth(140)
		PallyPowerRF:SetWidth(140)
		PallyPowerAuto:SetWidth(140)
		
		PallyPowerAura:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerRF:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerAuto:SetBackdropBorderColor(0,0,0,0.8)
		
		PallyPowerC1:SetWidth(140)
		PallyPowerC2:SetWidth(140)
		PallyPowerC3:SetWidth(140)
		PallyPowerC4:SetWidth(140)
		PallyPowerC5:SetWidth(140)
		PallyPowerC6:SetWidth(140)
		PallyPowerC7:SetWidth(140)
		PallyPowerC8:SetWidth(140)
		PallyPowerC9:SetWidth(140)
		PallyPowerC10:SetWidth(140)
		PallyPowerC11:SetWidth(140)
		
		PallyPowerC1:SetFrameStrata("HIGH")
		PallyPowerC2:SetFrameStrata("HIGH")
		PallyPowerC3:SetFrameStrata("HIGH")
		PallyPowerC4:SetFrameStrata("HIGH")
		PallyPowerC5:SetFrameStrata("HIGH")
		PallyPowerC6:SetFrameStrata("HIGH")
		PallyPowerC7:SetFrameStrata("HIGH")
		PallyPowerC8:SetFrameStrata("HIGH")
		PallyPowerC9:SetFrameStrata("HIGH")
		PallyPowerC10:SetFrameStrata("HIGH")
		PallyPowerC11:SetFrameStrata("HIGH")
		
		PallyPowerC1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC1P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC2P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC3P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC4P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC5P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC6P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC7P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC8:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC8P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC9:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC9P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC10:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC10P8:SetBackdropBorderColor(0,0,0,0.8)
		PallyPowerC11:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P1:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P2:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P3:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P4:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P5:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P6:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P7:SetBackdropBorderColor(0,0,0,0.8)
			PallyPowerC11P8:SetBackdropBorderColor(0,0,0,0.8)
		
		PallyPowerAnchor:ClearAllPoints()
		PallyPowerAnchor:SetPoint("TOPLEFT", PallyPowerAura, "TOPLEFT", -20, 0)
		PallyPowerAnchor:Show()
		PallyPowerAnchor:SetAlpha(1)
		
		PallyPowerFrame:SetAlpha(0)
		PallyPowerFrame:Hide()
	end
end

------------------------------------------------------
-- / SET INFO TEXT / --
------------------------------------------------------

function SetInfoText()

	local FONT = LSM:Fetch("font", db.General.InfoFont)
	
	local infos_left = create_me_a_frame("FRAME","infos_left",UIParent,100,20,1,"HIGH",0,"TOPLEFT",UIParent,"TOPLEFT",200,3,1)
	infos_left:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	infos_left:SetBackdropColor(0,0,0,0)
	infos_left:SetBackdropBorderColor(0,0,0,0)
	infos_left:SetAlpha(1)
	infos_left:Show()
	
	local infos_right = create_me_a_frame("FRAME","infos_right",UIParent,100,20,1,"HIGH",0,"TOPRIGHT",UIParent,"TOPRIGHT",0,3,1)
	infos_right:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	infos_right:SetBackdropColor(0,0,0,0)
	infos_right:SetBackdropBorderColor(0,0,0,0)
	infos_right:SetAlpha(1)
	infos_right:Show()

	------------------------------------------------------
	-- / FPS & MS / --
	------------------------------------------------------
	
	local Stat1 = CreateFrame("Frame")
	Text_fps  = infos_left:CreateFontString(nil, "OVERLAY")
	Text_fps:SetFont(FONT, db.General.InfoFontSize)
	Text_fps:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Fps.X, db.General.Info.Fps.Y)
	Text_fps:SetHeight(20)
	Text_fps:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)
									
	local int = 1
	local function Update(self, t)
		int = int - t
		if int < 0 then
			--Text_fps:SetText(floor(GetFramerate()).."|cfffffffffps     |r"..select(3, GetNetStats()).."|cffffffffms|r")
			Text_fps:SetText(floor(GetFramerate()).."fps   "..select(3, GetNetStats()).."ms")
			int = 1
		end
		
	end

	Stat1:SetScript("OnUpdate", Update) 
	Update(Stat1, 10)
	
	if db.General.Info.Fps.Enable == false then
		Text_fps:Hide()
	end
	
	------------------------------------------------------
	-- / MEMORY USAGE / --
	------------------------------------------------------

	local Stat2 = CreateFrame("Frame")
	Stat2:EnableMouse(true)

	Text_mb  = infos_left:CreateFontString(nil, "OVERLAY")
	Text_mb:SetFont(FONT, db.General.InfoFontSize)
	Text_mb:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Memory.X, db.General.Info.Memory.Y)
	Text_mb:SetHeight(20)
	Text_mb:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)
									
	local function formatMem(memory, color)
		if color then
			statColor = { "", "" }
		else
			statColor = { "", "" }
		end

		local mult = 10^1
		if memory > 999 then
			local mem = floor((memory/1024) * mult + 0.5) / mult
			if mem % 1 == 0 then
				return mem..string.format(".0%smb%s", unpack(statColor))
			else
				return mem..string.format("%smb%s", unpack(statColor))
			end
		else
			local mem = floor(memory * mult + 0.5) / mult
			if mem % 1 == 0 then
				return mem..string.format(".0 %skb%s", unpack(statColor))
			else
				return mem..string.format(" %skb%s", unpack(statColor))
			end
		end

	end

	local Total, Mem, MEMORY_TEXT, LATENCY_TEXT, Memory
	local function RefreshMem(self)
		Memory = {}
		UpdateAddOnMemoryUsage()
		Total = 0
		for i = 1, GetNumAddOns() do
			Mem = GetAddOnMemoryUsage(i)
			Memory[i] = { select(2, GetAddOnInfo(i)), Mem, IsAddOnLoaded(i) }
			Total = Total + Mem
		end
		
		MEMORY_TEXT = formatMem(Total, true)
		table.sort(Memory, function(a, b)
			if a and b then
				return a[2] > b[2]
			end
		end)
		
		-- Setup Memory tooltip
		self:SetAllPoints(Text_mb)
		self:SetScript("OnEnter", function()
			if not InCombatLockdown() then
				GameTooltip:SetOwner(this, "ANCHOR_NONE");
				GameTooltip:ClearAllPoints()
				GameTooltip:SetPoint("BOTTOM", self, "TOP", 0, -20)
				GameTooltip:ClearLines()
				for i = 1, #Memory do
					if Memory[i][3] then 
						local red = Memory[i][2]/Total*2
						local green = 1 - red
						GameTooltip:AddDoubleLine(Memory[i][1], formatMem(Memory[i][2], false), 1, 1, 1, red, green+1, 0)					
					end
				end
				GameTooltip:Show()
			end
		end)
		self:SetScript("OnLeave", function() GameTooltip:Hide() end)
	end
		
	local int, int2 = 5, 1
	local function Update(self, t)
		int = int - t
		int2 = int2 - t
		if int < 0 then
			RefreshMem(self)
			int = 5
		end
		if int2 < 0 then
			Text_mb:SetText(MEMORY_TEXT)
			int2 = 1
		end
	end

	Stat2:SetScript("OnMouseDown", function() collectgarbage("collect") Update(Stat2, 10) end)
	Stat2:SetScript("OnUpdate", Update) 
	Update(Stat2, 10)
	
	if db.General.Info.Memory.Enable == false then
		Text_mb:Hide()
	end
	
	------------------------------------------------------
	-- / BAGS / --
	------------------------------------------------------
	
	local Stat4 = CreateFrame("Frame")
	Stat4:EnableMouse(true)

	Text_bags  = infos_left:CreateFontString(nil, "OVERLAY")
	Text_bags:SetFont(FONT, db.General.InfoFontSize)
	Text_bags:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Bags.X, db.General.Info.Bags.Y)
	Text_bags:SetHeight(20)
	Text_bags:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)

	local function OnEvent(self, event, ...)
			local free, total = 0, 0
			for i = 0, NUM_BAG_SLOTS do
				free, total = free + GetContainerNumFreeSlots(i), total + GetContainerNumSlots(i)
			end
			
			local ammoCount = 0
			
			if class == "WARLOCK" then
                ammoCount = GetItemCount(6265)
            else
                local slotID, _ = GetInventorySlotInfo("AmmoSlot")
                local count = GetInventoryItemCount("player", slotID)
                local itemLink = GetInventoryItemLink("player", slotID)
                if ( itemLink ~= nil and ( count ~= nil and count > 0 ) ) then
                    ammoCount = count
                end
            end
			
			local used = total - free
			
			if ammoCount > 0 then
				Text_bags:SetText("Bag: "..used.."/"..total.." ("..ammoCount..")")
			else
				Text_bags:SetText("Bag: "..used.."/"..total)
			end
			self:SetAllPoints(Text_bags)
	end
		
	Stat4:RegisterEvent("PLAYER_LOGIN")
	Stat4:RegisterEvent("BAG_UPDATE")
	Stat4:SetScript("OnEvent", OnEvent)
	Stat4:SetScript("OnMouseDown", function() OpenAllBags() end)
	
	if db.General.Info.Bags.Enable == false then
		Text_bags:Hide()
	end
	
	------------------------------------------------------
	-- / DURABILITY / --
	------------------------------------------------------
	
	local Stat6 = CreateFrame("Frame")
	Stat6:EnableMouse(true)

	Text_dura  = infos_left:CreateFontString(nil, "OVERLAY")
	Text_dura:SetFont(FONT, db.General.InfoFontSize)
	Text_dura:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Armor.X, db.General.Info.Armor.Y)
	Text_dura:SetHeight(20)
	Text_dura:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)

	local Total = 0
	local current, max
	
	Slots = {
		[1] = {1, "Head", 1000},
		[2] = {3, "Shoulder", 1000},
		[3] = {5, "Chest", 1000},
		[4] = {6, "Waist", 1000},
		[5] = {9, "Wrist", 1000},
		[6] = {10, "Hands", 1000},
		[7] = {7, "Legs", 1000},
		[8] = {8, "Feet", 1000},
		[9] = {16, "Main Hand", 1000},
		[10] = {17, "Off Hand", 1000},
		[11] = {18, "Ranged", 1000}
	}

	local function OnEvent(self)
		for i = 1, 11 do
			if GetInventoryItemLink("player", Slots[i][1]) ~= nil then
				current, max = GetInventoryItemDurability(Slots[i][1])
				if current then 
					Slots[i][3] = current/max
					Total = Total + 1
				end
			end
		end
		table.sort(Slots, function(a, b) return a[3] < b[3] end)
		
		if Total > 0 then
			Text_dura:SetText("Armor: "..floor(Slots[1][3]*100).."% |cffffffff|r")
		else
			Text_dura:SetText("Armor: 100%")
		end
		
		-- Setup Durability Tooltip
		self:SetAllPoints(Text_dura)
		self:SetScript("OnEnter", function()
			if not InCombatLockdown() then
				GameTooltip:SetOwner(this, "ANCHOR_NONE");
				GameTooltip:ClearAllPoints()
				GameTooltip:SetPoint("BOTTOM", self, "TOP", 0, 0)
				GameTooltip:ClearLines()
				for i = 1, 11 do
					if Slots[i][3] ~= 1000 then
						green = Slots[i][3]*2
						red = 1 - green
						GameTooltip:AddDoubleLine(Slots[i][2], floor(Slots[i][3]*100).."%",1 ,1 , 1, red + 1, green, 0)
					end
				end
				GameTooltip:Show()
			end
		end)
		self:SetScript("OnLeave", function() GameTooltip:Hide() end)
		Total = 0
	end

	Stat6:RegisterEvent("UPDATE_INVENTORY_DURABILITY")
	Stat6:RegisterEvent("MERCHANT_SHOW")
	Stat6:RegisterEvent("PLAYER_ENTERING_WORLD")
	Stat6:SetScript("OnMouseDown", function() ToggleCharacter("PaperDollFrame") end)
	Stat6:SetScript("OnEvent", OnEvent)
	
	if db.General.Info.Armor.Enable == false then
		Text_dura:Hide()
	end
	
	--------------------------------------------------------------------
	-- GUILD ROSTER
	--------------------------------------------------------------------
	
	local tab = LibStub("Tablet-2.0")
	local GuildList = CreateFrame("Frame")
	
	local gList, gOnline
	
	if ( not GFrame ) then GFrame = CreateFrame("Frame", "GFrame", UIParent) end
    if ( not GButton ) then GButton = CreateFrame("Button", nil, GFrame) end
    if ( not GString ) then GString = GFrame:CreateFontString(nil, "OVERLAY") end
	
	local function clickFunc(name)
    	if ( not name ) then return end
		
		if ( IsShiftKeyDown() ) then
			InviteUnit(name)
		else
			SetItemRef("player:"..name, "|Hplayer:"..name.."|h["..name.."|h", "LeftButton")
		end
	end
	
	local function updateTablet()
		if ( IsInGuild() and gOnline > 0 ) then
			GuildRoster()
			local header = tab:AddCategory()
			local gname, _, _ = GetGuildInfo("player")
			local gmotd = GetGuildRosterMOTD()
			header:AddLine('text', gname, 'size', 14)
			header:AddLine('text', gmotd, 'wrap', true)
			
			local col = {}
			tinsert(col, "Name")
			tinsert(col, "Level")
			tinsert(col, "Area")
			tinsert(col, "Rank")
			tinsert(col, "Notes")
			
			local cat = tab:AddCategory("columns", #col)
			local header = {}
			for i = 1, #col do
				if i == 1 then
					header['text'] = col[i]
					header['justify'] = "CENTER"
				else
					header['text'..i] = col[i]
					header['justify'..i] = "CENTER"
				end
			end
			cat:AddLine(header)
			local nameslot = #col+1
			for _, val in ipairs(gList) do
				local line = {}
				for i = 1, #col do
					if i == 1 then
						line['text'] = val[i]
						line['justify'] = "LEFT"
						line['func'] = function() clickFunc(val[6]) end
					else
						line['text'..i] = val[i]
						line['justify'..i] = "CENTER"
						line['text'..i..'R'] = 1
						line['text'..i..'G'] = 1
						line['text'..i..'B'] = 1
					end
				end
				cat:AddLine(line)
			end
			
			tab:SetHint("<Click> to whisper, <Shift+Click> to group invite.")
		end
	end
	
	GuildClassColors = {
		["DEATH KNIGHT"] = "|cffc41f3b",
		["DEATHKNIGHT"] = "|cffc41f3b",
		["DRUID"] = "|cffff7d0a",
		["HUNTER"] = "|cffabd473",
		["MAGE"] = "|cff69ccf0",
		["PALADIN"] = "|cfff58cba",
		["PRIEST"] = "|cffffffff",
		["ROGUE"] = "|cfffff569",
		["SHAMAN"] = "|cff2459ff",
		["WARLOCK"] = "|cff9482ca",
		["WARRIOR"] = "|cffc79c6e",
	}
	
	GuildList:RegisterEvent("GUILD_ROSTER_SHOW")
	GuildList:RegisterEvent("PLAYER_ENTERING_WORLD")
	GuildList:RegisterEvent("GUILD_ROSTER_UPDATE")
	GuildList:RegisterEvent("PLAYER_GUILD_UPDATE")
	GuildList:RegisterEvent("FRIENDLIST_UPDATE")
	GuildList:SetScript("OnEvent", function(self)
	
		gList = nil
		local guildonline = 0
		
		for i = 0, GetNumGuildMembers() do
			local name, rank, _, lvl, _, zone, note, offnote, online, status, classFileName = GetGuildRosterInfo(i)
			if ( online ) then
				if ( not gList or gList == nil ) then gList = {} end
				local classColor = GuildClassColors[classFileName]
				local cname
				
				if ( status == "" ) then
					cname = format("%s%s|r", classColor, name)
				else
					cname = format("%s %s%s|r", status, classColor, name)
				end
			
				local gPrelist = { cname, lvl, zone, rank, note, name }
				tinsert(gList, gPrelist)
				guildonline = guildonline + 1
			end
		end
		
		if ( not tab:IsRegistered(GButton) ) then
			tab:Register(GButton,
				"children", function()
					updateTablet()
				end,
				"point", function()
					return "TOP"
				end,
				"relativePoint", function()
					return "BOTTOM"
				end,
				"maxHeight", 500,
				"clickable", true,
				"hideWhenEmpty", false
			)
		end
		
		if ( tab:IsRegistered(GButton) ) then
			tab:SetColor(GButton, 0, 0, 0)
			tab:SetTransparency(GButton, 0.75)
			tab:SetFontSizePercent(GButton, 1.0)
		end
		
		gOnline = guildonline
		if gOnline > 0 then
			GButton:SetScript("OnEnter", function() if ( tab:IsRegistered(GButton) ) then tab:Open(GButton) end end)
		else
			GButton:SetScript("OnEnter", nil)
		end
		
		GString:SetFont(FONT, db.General.InfoFontSize)
		GString:SetText("Guild: "..guildonline)
		GString:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)
		
		GFrame:SetPoint("RIGHT", infos_right, "LEFT", db.General.Info.Guild.X, db.General.Info.Guild.Y)
		GFrame:SetWidth(80)
		GFrame:SetHeight(20)
		
		GString:SetAllPoints(GButton)
		GButton:SetAllPoints(GFrame)
	end)
	
	GFrame:Show()

	if db.General.Info.Guild.Enable == false then
		GFrame:Hide()
	end
	
	------------------------------------------------------
	-- / FRIENDS / --
	------------------------------------------------------
	
	local FriendList = CreateFrame("Frame")
	local fList, fOnline
	
	if ( not FFrame ) then FFrame = CreateFrame("Frame", "FFrame", UIParent) end
    if ( not FButton ) then FButton = CreateFrame("Button", nil, FFrame) end
    if ( not FString ) then FString = FFrame:CreateFontString(nil, "OVERLAY") end
	if ( not FPopup ) then FPopup = CreateFrame("Frame", nil, UIParent) end
	
	local function clickFunc(name)
		if ( not name ) then return end
			
		if ( IsShiftKeyDown() ) then
			InviteUnit(name)
		else
			SetItemRef("player:"..name, "|Hplayer:"..name.."|h["..name.."|h", "LeftButton")
		end
	end
	
	local function updateTablet()
		if ( fOnline > 0 ) then
			ShowFriends()
			local header = tab:AddCategory()
			header:AddLine('text', "Friend List", 'size', 14)
			
			local col = {}
			tinsert(col, "Name")
			tinsert(col, "Level")
			tinsert(col, "Class")
			tinsert(col, "Area")
			
			local cat = tab:AddCategory("columns", #col)
			local header = {}
			for i = 1, #col do
				if ( i == 1 ) then
					header['text'] = col[i]
					header['justify'] = "CENTER"
				else
					header['text'..i] = col[i]
					header['justify'..i] = "CENTER"
				end
			end
			cat:AddLine(header)
			for _, val in ipairs(fList) do
				local line = {}
				for i = 1, #col do
					if ( i == 1 ) then
						line['text'] = val[i]
						line['justify'] = "LEFT"
						line['func'] = function() clickFunc(val[5]) end
					elseif ( i == 3 ) then
						line['text'..i] = val[i]
						line['justify'..i] = "CENTER"
					else
						line['text'..i] = val[i]
						line['justify'..i] = "CENTER"
						line['text'..i..'R'] = 1
						line['text'..i..'G'] = 1
						line['text'..i..'B'] = 1
					end
				end
				cat:AddLine(line)
			end
			tab:SetHint("<Click> to whisper, <Shift+Click> to invite.")
		end
	end
	
	FriendsClassColors = {
		["DEATH KNIGHT"] = "|cffc41f3b",
		["DEATHKNIGHT"] = "|cffc41f3b",
		["DRUID"] = "|cffff7d0a",
		["HUNTER"] = "|cffabd473",
		["MAGE"] = "|cff69ccf0",
		["PALADIN"] = "|cfff58cba",
		["PRIEST"] = "|cffffffff",
		["ROGUE"] = "|cfffff569",
		["SHAMAN"] = "|cff2459ff",
		["WARLOCK"] = "|cff9482ca",
		["WARRIOR"] = "|cffc79c6e",
	}
	
	FriendList:RegisterEvent("PLAYER_ENTERING_WORLD")
	FriendList:RegisterEvent("FRIENDLIST_UPDATE")
	FriendList:RegisterEvent("CHAT_MSG_SYSTEM")
	FriendList:SetScript("OnEvent", function(self)
		fList = nil
		local friendsonline = 0
		
		for i = 0, GetNumFriends() do
			local name, lvl, class, area, online, status, note = GetFriendInfo(i)
			if ( online ) then
				friendsonline = friendsonline + 1
				if ( not fList or fList == nil ) then fList = {} end
				
				
				for k,v in pairs(LOCALIZED_CLASS_NAMES_MALE) do if class == v then class = k end end
				
				if GetLocale() ~= "enUS" then
					for k,v in pairs(LOCALIZED_CLASS_NAMES_FEMALE) do if class == v then class = k end end
				end
				
				local classColor = FriendsClassColors[class]
				
				class = format("%s%s|r", classColor, class)
				local cname
				
				if ( status == "" and name ) then
					cname = format("%s%s|r", classColor, name)
				elseif ( name ) then
					cname = format("%s %s%s|r", status, classColor, name)
				end
				
				tinsert(fList, { cname, lvl, class, area, name, note })
			end
		end
		
		if ( not tab:IsRegistered(FButton) ) then
			tab:Register(FButton,
				"children", function()
					updateTablet()
				end,
				"point", function()
					return "TOP"
				end,
				"relativePoint", function()
					return "BOTTOM"
				end,
				"maxHeight", 500,
				"clickable", true,
				"hideWhenEmpty", true
			)
		end
		
		fOnline = friendsonline

		if fOnline > 0 then
			FButton:SetScript("OnEnter", function() if ( tab:IsRegistered(FButton) ) then tab:Open(FButton) end end)
		else
			FButton:SetScript("OnEnter", nil)
		end
		
		FString:SetFont(FONT, db.General.InfoFontSize)
		FString:SetText("Friends: "..friendsonline)
		FString:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g,db.General.InfoColor.b)
		
		FFrame:SetPoint("RIGHT", infos_right, "LEFT", db.General.Info.Friends.X,db.General.Info.Friends.Y)
		FFrame:SetWidth(80)
		FFrame:SetHeight(20)
		
		FString:SetAllPoints(FButton)
		FButton:SetAllPoints(FFrame)
	end)
	
	FFrame:Show()

	if db.General.Info.Friends.Enable == false then
		FFrame:Hide()
	end
	
	------------------------------------------------------
	-- / GOLD / --
	------------------------------------------------------
	
	local Stat7 = CreateFrame("Frame")
	Stat7:EnableMouse(true)

	Text_gold  = infos_left:CreateFontString(nil, "OVERLAY")
	Text_gold:SetFont(FONT, db.General.InfoFontSize)
	Text_gold:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Gold.X, db.General.Info.Gold.Y)
	Text_gold:SetHeight(20)
	Text_gold:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)

	local Profit	= 0
	local Spent		= 0
	local OldMoney	= 0

	local function formatMoney(money)
		local gold = floor(math.abs(money) / 10000)
		local silver = mod(floor(math.abs(money) / 100), 100)
		local copper = mod(floor(math.abs(money)), 100)
		if gold ~= 0 then
			--return format("%s|cffffd700g|r %s|cffc7c7cfs|r", gold, silver)
			return format("%sg %ss", gold, silver)
		elseif silver ~= 0 then
			--return format("%s|cffc7c7cfs|r %s|cffeda55fc|r", silver, copper)
			return format("%ss %sc", silver, copper)
		else
			--return format("%s|cffeda55f c|r", copper)
			return format("%sc", copper)
		end
	end
	
	local function FormatTooltipMoney(money)
		local gold, silver, copper = abs(money / 10000), abs(mod(money / 100, 100)), abs(mod(money, 100))
		local cash = ""
		cash = format("%d|cffffd700g|r %d|cffc7c7cfs|r %d|cffeda55fc|r", gold, silver, copper)		
		return cash
	end	

	local function OnEvent(self, event)
		if event == "PLAYER_ENTERING_WORLD" then
			OldMoney = GetMoney()
		end
		
		local NewMoney = GetMoney()
		local Change = NewMoney-OldMoney -- Positive if we gain money
		
		if OldMoney>NewMoney then		-- Lost Money
			Spent = Spent - Change
		else							-- Gained Moeny
			Profit = Profit + Change
		end

		Text_gold:SetText(formatMoney(NewMoney))
		-- Setup Money Tooltip
		self:SetAllPoints(Text_gold)
		
		local myPlayerRealm = GetCVar("realmName");
		local myPlayerName  = UnitName("player");
		if (LUIGold == nil) then LUIGold = {}; end			
		if (LUIGold.gold == nil) then LUIGold.gold = {}; end
		if (LUIGold.gold[myPlayerRealm]==nil) then LUIGold.gold[myPlayerRealm]={}; end
		LUIGold.gold[myPlayerRealm][myPlayerName] = GetMoney();
		
		self:SetScript("OnEnter", function()
			if not InCombatLockdown() then
				self.hovered = true 
				GameTooltip:SetOwner(this, "ANCHOR_TOP", 0, 6);
				GameTooltip:ClearAllPoints()
				GameTooltip:SetPoint("BOTTOM", self, "TOP", 0, 1)
				GameTooltip:ClearLines()
				GameTooltip:AddLine("Session:")
				GameTooltip:AddDoubleLine("Earned:", formatMoney(Profit), 1, 1, 1, 1, 1, 1)
				GameTooltip:AddDoubleLine("Spent:", formatMoney(Spent), 1, 1, 1, 1, 1, 1)
				if Profit < Spent then
					GameTooltip:AddDoubleLine("Deficit:", formatMoney(Profit-Spent), 1, 0, 0, 1, 1, 1)
				elseif (Profit-Spent)>0 then
					GameTooltip:AddDoubleLine("Profit:", formatMoney(Profit-Spent), 0, 1, 0, 1, 1, 1)
				end				
				GameTooltip:AddLine' '								
			
				local totalGold = 0				
				GameTooltip:AddLine("Character: ")			
				local thisRealmList = LUIGold.gold[myPlayerRealm];
				for k,v in pairs(thisRealmList) do
					GameTooltip:AddDoubleLine(k, FormatTooltipMoney(v), 1, 1, 1, 1, 1, 1)
					totalGold=totalGold+v;
				end 
				GameTooltip:AddLine' '
				GameTooltip:AddLine("Server: ")
				GameTooltip:AddDoubleLine("Total: ", FormatTooltipMoney(totalGold), 1, 1, 1, 1, 1, 1)
				
				local numWatched = GetNumWatchedTokens()
				if numWatched > 0 then
					GameTooltip:AddLine(" ")
					GameTooltip:AddLine(tp_currency)
					
					for i = 1, numWatched do
						local name, count, extraCurrencyType, icon, itemID = GetBackpackCurrencyInfo(i)
						local r, g, b, hex = GetItemQualityColor(select(3, GetItemInfo(itemID)))

						GameTooltip:AddDoubleLine(name, count, r, g, b, 1, 1, 1)
					end					
				end
				GameTooltip:Show()
			end
		end)
		self:SetScript("OnLeave", function() GameTooltip:Hide() end)
		
		OldMoney = NewMoney
	end

	Stat7:RegisterEvent("PLAYER_MONEY")
	Stat7:RegisterEvent("SEND_MAIL_MONEY_CHANGED")
	Stat7:RegisterEvent("SEND_MAIL_COD_CHANGED")
	Stat7:RegisterEvent("PLAYER_TRADE_MONEY")
	Stat7:RegisterEvent("TRADE_MONEY_CHANGED")
	Stat7:RegisterEvent("PLAYER_ENTERING_WORLD")
	Stat7:SetScript("OnMouseDown", function() OpenAllBags() end)
	Stat7:SetScript("OnEvent", OnEvent)
	
	if db.General.Info.Gold.Enable == false then
		Text_gold:Hide()
	end
	
	------------------------------------------------------
	-- / TIME / --
	------------------------------------------------------
	
	local Stat8 = CreateFrame("Frame")
	Stat8:EnableMouse(true)
	Stat8:SetFrameLevel(3)
	Stat8:SetFrameStrata("HIGH")
	localtime = db.General.Info.Clock.LocalTime
	time24 = db.General.Info.Clock.Time24

	Text_time  = infos_right:CreateFontString(nil, "OVERLAY")
	Text_time:SetFont(FONT, db.General.InfoFontSize)
	Text_time:SetPoint("CENTER", infos_right, "CENTER", db.General.Info.Clock.X, db.General.Info.Clock.Y)
	Text_time:SetHeight(20)
	Text_time:SetTextColor(db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b)

	local int = 1
	local function Update(self, t)
		local pendingCalendarInvites = CalendarGetNumPendingInvites()
		if ( pendingCalendarInvites > 0 ) then
			Text_time:SetText("(Inv. pending)")
			self:SetAllPoints(Text_time)
		else
			int = int - t
			if int < 0 then
				if localtime == true then
					Hr24 = tonumber(date("%H"))
					Hr = tonumber(date("%I"))
					Min = tonumber(date("%M"))
					if Min<10 then Min = "0"..Min end
					
					if time24 == true then 
						Text_time:SetText(Hr24..":"..Min)
					else
						if Hr24>=12 then
							Text_time:SetText(Hr..":"..Min.." pm")
						else
							Text_time:SetText(Hr..":"..Min.." am")
						end
					end
				else
					local Hr, Min = GetGameTime()
					if Min<10 then Min = "0"..Min end
					
					if time24 == true then
						Text_time:SetText(Hr..":"..Min)
					else
						if Hr>=12 then
							Hr_time12 = Hr-12
						end
						
						if Hr>=12 then
							Text_time:SetText(Hr_time12..":"..Min.." pm")
						else
							Text_time:SetText(Hr..":"..Min.." am")
						end
					end
				end
				
				-- Instance Info
				-- Credits to hix for the Code.
				if db.General.Info.Clock.ShowInstanceDifficulty == true then
					local inInstance, instanceType = IsInInstance()
					if inInstance then
					   local _,_, instanceDifficulty,_, maxPlayers, dynamicMode, isDynamic = GetInstanceInfo()
					   local difficultytext = nil
					   if (instanceType == "raid") then
						  if (instanceDifficulty == 3 or instanceDifficulty == 4) or (isDynamic and dynamicMode == 1) then
							 difficultytext = " |cffff0000H|r)"
						  else
							 difficultytext = " |cff00ff00N|r)"
						  end
					   elseif (instanceType == "party") then
						  if (instanceDifficulty == 1) then
							 difficultytext = " |cff00ff00N|r)"
						  else
							 difficultytext = " |cffff0000H|r)"
						  end
					   end
					   
					   if difficultytext then Text_time:SetText(Text_time:GetText().." ("..maxPlayers..difficultytext) end
					end
				end
				
				self:SetAllPoints(Text_time)
				int = 1
			end
		end
	end
	
	Stat8:SetScript("OnEnter", function(self)
		OnLoad = function(self) RequestRaidInfo() end,
		GameTooltip:SetOwner(this, "ANCHOR_TOP", 0, 6);
		GameTooltip:ClearAllPoints()
		GameTooltip:SetPoint("BOTTOM", self, "TOP", 0, 1)
		GameTooltip:ClearLines()
		local wgtime = GetWintergraspWaitTime() or nil
		inInstance, instanceType = IsInInstance()
		if not ( instanceType == "none" ) then
			wgtime = "Unavailable"
		elseif wgtime == nil then
			wgtime = "In Progress"
		else
			local hour = tonumber(format("%01.f", floor(wgtime/3600)))
			local min = format(hour>0 and "%02.f" or "%01.f", floor(wgtime/60 - (hour*60)))
			local sec = format("%02.f", floor(wgtime - hour*3600 - min *60))            
			wgtime = (hour>0 and hour..":" or "")..min..":"..sec            
		end
		GameTooltip:AddDoubleLine("Time to Wintergrasp:",wgtime)
		GameTooltip:AddLine(" ")
		
		if localtime == true then
			local Hr, Min = GetGameTime()
			if Min<10 then Min = "0"..Min end
			if time24 == true then         
				GameTooltip:AddDoubleLine("Server Time: ",Hr .. ":" .. Min);
			else             
				if Hr>=12 then
				Hr = Hr-12
				if Hr == 0 then Hr = 12 end
					GameTooltip:AddDoubleLine("Server Time: ",Hr .. ":" .. Min.." PM");
				else
					if Hr == 0 then Hr = 12 end
					GameTooltip:AddDoubleLine("Server Time: ",Hr .. ":" .. Min.." AM");
				end
			end
		else
			Hr24 = tonumber(date("%H"))
			Hr = tonumber(date("%I"))
			Min = date("%M")
			if time24 == true then
				GameTooltip:AddDoubleLine("Local Time: ",Hr24 .. ":" .. Min);
			else
				if Hr24>=12 then
					GameTooltip:AddDoubleLine("Local Time: ",Hr .. ":" .. Min.." PM");
				else
					GameTooltip:AddDoubleLine("Local Time: ",Hr .. ":" .. Min.." AM");
				end
			end
		end  
		
		local oneraid
		for i = 1, GetNumSavedInstances() do
		local name,_,reset,difficulty,locked,extended,_,isRaid,maxPlayers = GetSavedInstanceInfo(i)
		if isRaid and (locked or extended) then
			local tr,tg,tb,diff
			if not oneraid then
				GameTooltip:AddLine(" ")
				GameTooltip:AddLine("Saved Raid(s)")
				oneraid = true
			end

			local function fmttime(sec,table)
			local table = table or {}
			local d,h,m,s = ChatFrame_TimeBreakDown(floor(sec))
			local string = gsub(gsub(format(" %dd %dh %dm "..((d==0 and h==0) and "%ds" or ""),d,h,m,s)," 0[dhms]"," "),"%s+"," ")
			local string = strtrim(gsub(string, "([dhms])", {d=table.days or "d",h=table.hours or "h",m=table.minutes or "m",s=table.seconds or "s"})," ")
			return strmatch(string,"^%s*$") and "0"..(table.seconds or L"s") or string
		end
		if extended then tr,tg,tb = 0.3,1,0.3 else tr,tg,tb = 1,1,1 end
			if difficulty == 3 or difficulty == 4 then diff = "H" else diff = "N" end
				GameTooltip:AddDoubleLine(format("%s |cffaaaaaa(%s%s)",name,maxPlayers,diff),fmttime(reset),1,1,1,tr,tg,tb)
			end
		end
		GameTooltip:Show()
	end)
	
	Stat8:SetScript("OnLeave", function() GameTooltip:Hide() end)
	Stat8:RegisterEvent("CALENDAR_UPDATE_PENDING_INVITES")
	Stat8:RegisterEvent("PLAYER_ENTERING_WORLD")
	Stat8:SetScript("OnUpdate", Update)
	Stat8:SetScript("OnMouseDown", function() GameTimeFrame:Click() end)
	Update(Stat8, 10)
	
	if db.General.Info.Clock.Enable == false then
		Text_time:Hide()
	end
end

------------------------------------------------------
-- / SET DAMAGE FONT / --
------------------------------------------------------

SetDamageFont = CreateFrame("Frame", "SetDamageFont");
SetDamageFont:RegisterEvent("ADDON_LOADED")
SetDamageFont:SetScript("OnEvent", function(self)
	SetDamageFont:ApplyDamageFont()
end)

function SetDamageFont:ApplyDamageFont()
	local DamageFont = LSM:Fetch("font", db.General.DamageFont)

	COMBAT_TEXT_SCROLLSPEED = 1.9
	COMBAT_TEXT_FADEOUT_TIME = 1.3 
	DAMAGE_TEXT_FONT = DamageFont
	COMBAT_TEXT_HEIGHT = db.General.DamageFontSize
	COMBAT_TEXT_CRIT_MAXHEIGHT = db.General.DamageFontSizeCrit
	COMBAT_TEXT_CRIT_MINHEIGHT = db.General.DamageFontSizeCrit - 2
end

------------------------------------------------------
-- / SET AURA / --
------------------------------------------------------

function CreatePanel(height, width, x, y, anchorPoint, anchorPointRel, anchor, level, parent, strata)
	local Panel = CreateFrame("Frame", _, parent)
	Panel:SetFrameLevel(level)
	Panel:SetFrameStrata(strata)
	Panel:SetHeight(height)
	Panel:SetWidth(width)
	Panel:SetPoint(anchorPoint, anchor, anchorPointRel, x, y)
	Panel:SetBackdrop( { 
	  bgFile = "Interface\\AddOns\\LUI\\textures\\Normal", 
	  edgeFile = "Interface\\AddOns\\LUI\\textures\\Border", 
	  tile = false, tileSize = 0, edgeSize = 3, 
	  insets = { left = 2, right = 2, top = 2, bottom = 2 }
	})
	--Panel:SetBackdropColor(0.3,0.3,0.3,1)
	Panel:SetBackdropColor(1,0,0,1)
	Panel:SetBackdropBorderColor(0,0,0,0)
	
	return Panel
end

function CreateGlossPanel(height, width, x, y, anchorPoint, anchorPointRel, anchor, level, parent, strata, type, debuffcolor)
	local Panel = CreateFrame("Frame", _, parent)
	Panel:SetFrameLevel(level)
	Panel:SetFrameStrata(strata)
	Panel:SetHeight(height)
	Panel:SetWidth(width)
	Panel:SetPoint(anchorPoint, anchor, anchorPointRel, x, y)
	Panel:SetBackdrop( { 
	  bgFile = "Interface\\AddOns\\LUI\\textures\\Normal", 
	  edgeFile = "Interface\\AddOns\\LUI\\textures\\Border", 
	  tile = false, tileSize = 0, edgeSize = 3, 
	  insets = { left = 2, right = 2, top = 2, bottom = 2 }
	})
	Panel:SetBackdropColor(0.3,0.3,0.3,0)
	Panel:SetBackdropBorderColor(0,0,0,0)
	
	if type == "debuff" then
		local overlay = Panel:CreateTexture(nil, "OVERLAY")
		overlay:SetTexture("Interface\\AddOns\\LUI\\textures\\Border")
		overlay:SetAllPoints(Panel)
		overlay:SetAlpha(1)
		--overlay:SetVertexColor(1,0,0,0.6)
		overlay:SetVertexColor(debuffcolor.r, debuffcolor.g, debuffcolor.b)
		--overlay:SetTexCoord(0.1,0.9,0.1,0.9)
		Panel.overlay = overlay
	else
		local overlay = Panel:CreateTexture(nil, "OVERLAY")
		overlay:SetTexture("Interface\\AddOns\\LUI\\textures\\Gloss")
		overlay:SetAllPoints(Panel)
		overlay:SetAlpha(1)
		overlay:SetTexCoord(0.1,0.9,0.1,0.9)
		Panel.overlay = overlay
	end

	return Panel
end 

function SetAura()
	local ScreenWidth = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "(%d+)x%d+")
	local ScreenHeight = string.match(({GetScreenResolutions()})[GetCurrentResolution()], "%d+x(%d+)")
	
	if db.oUF.auras.player_auras_enable == true then
		BUFF_FLASH_TIME_ON = 0.2
		BUFF_FLASH_TIME_OFF = 0.1
		BUFF_MIN_ALPHA = 0.8
		BUFF_WARNING_TIME = 0
		BUFFS_PER_ROW = tonumber(db.oUF.auras.player.num_row)
		BUFF_MAX_DISPLAY = tonumber(db.oUF.auras.player.num_max)
		BUFF_ROW_SPACING = tonumber(db.oUF.auras.player.spacing_row)
		buff_size = tonumber(db.oUF.auras.player.buffs.size)
		debuff_size = tonumber(db.oUF.auras.player.debuffs.size)
		aura_spacing_row = tonumber(db.oUF.auras.player.spacing_row)
		aura_spacing = tonumber(db.oUF.auras.player.spacing)
		aura_growth = db.oUF.auras.player.growth
		aura_anchor = db.oUF.auras.player.anchor
		
		if aura_growth == "LEFT" then
			aura_growthPoint = "RIGHT"
		else
			aura_growthPoint = "LEFT"
		end
		
		local FONT = "Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibroceb.ttf"
		
		local dummy = function() return end
		
		ConsolidatedBuffs:ClearAllPoints()
		ConsolidatedBuffs:SetPoint("BOTTOMLEFT", UIParent, "BOTTOMLEFT",-12,7)
		ConsolidatedBuffsIcon:SetAlpha(0)
		ConsolidatedBuffs.SetPoint = dummy
		
		TemporaryEnchantFrame:ClearAllPoints()
		TemporaryEnchantFrame:SetPoint(aura_anchor, UIParent, aura_anchor, tonumber(db.oUF.auras.player.buffs.x), tonumber(db.oUF.auras.player.buffs.y))
		TemporaryEnchantFrame.SetPoint = dummy
		
		for i = 1, 2 do
			local TempBG = CreatePanel(buff_size+15, buff_size+15, 0, 0, "CENTER", "CENTER", _G["TempEnchant"..i], 0, _G["TempEnchant"..i], "BACKGROUND")
			local TempGloss = CreateGlossPanel(buff_size+2, buff_size+2, 0, 0, "CENTER", "CENTER", _G["TempEnchant"..i], 0, _G["TempEnchant"..i], "BACKGROUND")
			
			_G["TempEnchant"..i.."Border"]:Hide()
			_G["TempEnchant"..i.."Icon"]:SetTexCoord(.1, .9, .1, .9)
			
			if i == 1 then
				TempEnchant1:ClearAllPoints()
				TempEnchant2:ClearAllPoints()
				TempEnchant1:SetPoint("TOPLEFT")
				TempEnchant2:SetPoint(aura_growthPoint, TempEnchant1,aura_growth, aura_spacing,0)
			end
			
			_G["TempEnchant"..i]:SetHeight(buff_size)
			_G["TempEnchant"..i]:SetWidth(buff_size)
			
			_G["TempEnchant"..i.."Duration"]:ClearAllPoints()
			_G["TempEnchant"..i.."Duration"]:SetPoint("BOTTOM", 0, -16)
			_G["TempEnchant"..i.."Duration"]:SetFont(FONT, 12)	
		end
		
		local function UpdateBuffAnchors()
			local buff, previousBuff, aboveBuff;
			local numBuffs = 0;
			for index = 1, BUFF_ACTUAL_DISPLAY do
				local buff		= _G["BuffButton"..index];
				local icon		= _G["BuffButton"..index.."Icon"]
				local border	= _G["BuffButton"..index.."Border"]
				local duration	= _G["BuffButton"..index.."Duration"]
				local count		= _G["BuffButton"..index.."Count"]
				
				if icon and not _G["BuffButton"..index.."Panel"] then
					icon:SetTexCoord(.1, .9, .1, .9)
					icon:SetDrawLayer("OVERLAY")
					
					duration:SetFont(FONT,12)
					duration:ClearAllPoints()
					duration:SetDrawLayer("OVERLAY")
					duration:SetPoint("BOTTOM", .5, -16)
					
					count:SetFont(FONT, 18, "OUTLINE")
					count:ClearAllPoints()
					count:SetDrawLayer("OVERLAY")
					count:SetPoint("TOPLEFT", 0, 0)
					
					buff:SetHeight(buff_size)
					buff:SetWidth(buff_size)
					
					local overlay2 = buff:CreateTexture(nil, "OVERLAY")
					overlay2:SetTexture("Interface\\AddOns\\LUI\\textures\\Gloss")
					overlay2:SetAllPoints(buff)
					overlay2:SetAlpha(0.4)
					overlay2:SetBlendMode("ADD")
					overlay2:SetTexCoord(0.1,0.9,0.1,0.9)
					buff.overlay2 = overlay2
					
					_G["BuffButton"..index.."Panel"] = CreatePanel(buff_size+15, buff_size+15, 0, 0, "CENTER", "CENTER", buff, 0, buff, "BACKGROUND")
					_G["BuffButton"..index.."Panel"] = true
					_G["BuffButton"..index.."Gloss"] = CreateGlossPanel(buff_size+2, buff_size+2, 0, 0, "CENTER", "CENTER", buff, 0, buff, "BACKGROUND")
					_G["BuffButton"..index.."Gloss"] = true
				end
				
				if ( buff.consolidated ) then
					if ( buff.parent == BuffFrame ) then
						buff:SetParent(ConsolidatedBuffsContainer);
						buff.parent = ConsolidatedBuffsContainer;
					end
				else
					numBuffs = numBuffs + 1;
					index = numBuffs;
					if ( buff.parent ~= BuffFrame ) then
						buff.count:SetFontObject(NumberFontNormal);
						buff:SetParent(BuffFrame);
						buff.parent = BuffFrame;
					end
					buff:ClearAllPoints()
					if ( (index > 1) and (mod(index, BUFFS_PER_ROW) == 1) ) then
						if ( index == BUFFS_PER_ROW+1 ) then
							buff:SetPoint(aura_anchor,UIParent, aura_anchor, db.oUF.auras.player.buffs.x, db.oUF.auras.player.buffs.y + aura_spacing_row)
						elseif ( index == BUFFS_PER_ROW*2+1 ) then
							buff:SetPoint(aura_anchor,UIParent, aura_anchor, db.oUF.auras.player.buffs.x, db.oUF.auras.player.buffs.y + aura_spacing_row*2)
						elseif ( index == BUFFS_PER_ROW*3+1 ) then
							buff:SetPoint(aura_anchor,UIParent, aura_anchor, db.oUF.auras.player.buffs.x, db.oUF.auras.player.buffs.y + aura_spacing_row*3)
						else
							buff:SetPoint(aura_anchor, UIParent, aura_anchor, db.oUF.auras.player.buffs.x, db.oUF.auras.player.buffs.y)
						end
						aboveBuff = buff;
					elseif ( index == 1 ) then
						local mainhand, _, _, offhand = GetWeaponEnchantInfo()
						if mainhand and offhand then
							buff:SetPoint(aura_growthPoint, TempEnchant2,aura_growth, aura_spacing,0)
						elseif (mainhand and not offhand) or (offhand and not mainhand) then
							buff:SetPoint(aura_growthPoint, TempEnchant1,aura_growth, aura_spacing,0)
						else
							buff:SetPoint(aura_anchor,UIParent, aura_anchor, db.oUF.auras.player.buffs.x, db.oUF.auras.player.buffs.y)
						end
					else
						buff:SetPoint(aura_growthPoint, previousBuff, aura_growth, aura_spacing, 0);
					end
					previousBuff = buff;
				end
				
			end
		end
		
		local function UpdateDebuffAnchors(buttonName, index)
			local debuff	= _G[buttonName..index]
			local icon		= _G[buttonName..index.."Icon"]
			local border	= _G[buttonName..index.."Border"]
			local duration	= _G[buttonName..index.."Duration"]
			local count		= _G[buttonName..index.."Count"]
			
			if icon and not _G[buttonName..index.."Panel"] then
				icon:SetTexCoord(.1, .9, .1, .9)
				icon:SetDrawLayer("OVERLAY")
				
				duration:SetFont(FONT,12)
				duration:ClearAllPoints()
				duration:SetDrawLayer("OVERLAY")
				duration:SetPoint("BOTTOM", .5, -16)
					
				count:SetFont(FONT, 18, "OUTLINE")
				count:ClearAllPoints()
				count:SetDrawLayer("OVERLAY")
				count:SetPoint("TOPRIGHT", -1, -1)
				
				debuff:SetHeight(debuff_size)
				debuff:SetWidth(debuff_size)
				
				local overlay3 = debuff:CreateTexture(nil, "OVERLAY")
				overlay3:SetTexture("Interface\\AddOns\\LUI\\textures\\Gloss")
				overlay3:SetAllPoints(debuff)
				overlay3:SetAlpha(0.4)
				overlay3:SetBlendMode("ADD")
				overlay3:SetTexCoord(0.1,0.9,0.1,0.9)
				debuff.overlay3 = overlay3
				
				local dtype = select(5, UnitDebuff("player",index))
  
				local color
				if (dtype ~= nil) then
					color = DebuffTypeColor[dtype]
				else
					color = DebuffTypeColor["none"]
				end
				
				_G[buttonName..index.."Panel"] = CreatePanel(debuff_size+15, debuff_size+15, 0, 0, "CENTER", "CENTER", debuff, 0, debuff, "BACKGROUND")
				_G[buttonName..index.."Panel"] = true
				_G[buttonName..index.."Gloss"] = CreateGlossPanel(debuff_size+2, debuff_size+2, 0, 0, "CENTER", "CENTER", debuff, 0, debuff, "BACKGROUND", "debuff", color)
				_G[buttonName..index.."Gloss"] = true
			end
			
			if border then 
				border:Hide()
			end
			
			debuff:ClearAllPoints()
			if index == 1 then
				debuff:SetPoint(aura_anchor,UIParent, aura_anchor, db.oUF.auras.player.debuffs.x, db.oUF.auras.player.debuffs.y)
			else
				debuff:SetPoint(aura_growthPoint, _G[buttonName..(index-1)], aura_growth, aura_spacing, 0)
			end
		end
		
		hooksecurefunc("BuffFrame_UpdateAllBuffAnchors", UpdateBuffAnchors)
		hooksecurefunc("DebuffButton_UpdateAnchors", UpdateDebuffAnchors)
		
		-- Change color and format of duration.
		SecondsToTimeAbbrev = function(time)
			local hr, m, s, text
			if time <= 0 then text = ""
			elseif(time < 3600 and time > 60) then
				hr = floor(time / 3600)
				m = floor(mod(time, 3600) / 60 + 1)
				text = format("|cffffffff%dm|r", m)
			elseif time < 60 then
				m = floor(time / 60)
				s = mod(time, 60)
				text = (m == 0 and format("|cffffffff%d|r", s))
			else
				hr = floor(time / 3600 + 1)
				text = format("|cffffffff%dh|r", hr)
			end
			return text
		end
	end
end

function CreateBarPanel(height, width, x, y, anchorPoint, anchorPointRel, anchor, level, parent, strata)
	local Panel = CreateFrame("Frame", _, parent)
	Panel:SetFrameLevel(level)
	Panel:SetFrameStrata(strata)
	Panel:SetHeight(height)
	Panel:SetWidth(width)
	Panel:SetPoint(anchorPoint, anchor, anchorPointRel, x, y)
	Panel:SetBackdrop( { 
	  bgFile = "Interface\\AddOns\\LUI\\textures\\Normal", 
	  edgeFile = "Interface\\AddOns\\LUI\\textures\\Border", 
	  tile = false, tileSize = 0, edgeSize = 3, 
	  insets = { left = -3, right = -3, top = -3, bottom = -3 }
	})
	Panel:SetBackdropColor(0.2,0.2,0.2,0.9)
	Panel:SetBackdropBorderColor(0.2,0.2,0.2,0.9)

	local overlay = Panel:CreateTexture(nil, "OVERLAY")
	overlay:SetTexture("Interface\\AddOns\\LUI\\textures\\Gloss")
	overlay:SetAllPoints(Panel)
	overlay:SetAlpha(0.7)
	overlay:SetTexCoord(0.1,0.9,0.1,0.9)
	Panel.overlay = overlay

	return Panel
end

function SetBartender()
	-- Change BT4 Count Font / Size / Outline without editing BT4AddonCode.
	for i,v in BT4ActionBars:GetAll() do
		for j,button in ipairs(v.buttons) do
			button.macroName:SetFont("Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibroceb.ttf", 12, "OUTLINE")
			button.hotkey:SetFont("Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibroceb.ttf", 12, "OUTLINE")
			button.count:SetFont("Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibroceb.ttf", 14, "OUTLINE")
			--[[
			buttonbg = CreateBarPanel(38, 38, 0, 0, "CENTER", "CENTER", button, 0, button, "BACKGROUND")
			
			local button_normal = button:CreateTexture(nil, "OVERLAY")
			button_normal:SetTexture("Interface\\AddOns\\LUI\\textures\\Normal")
			button_normal:SetAllPoints(buttonbg)
			button_normal:SetTexCoord(0.1,0.9,0.1,0.9)
			buttonbg.button_normal = button_normal
			
			local button_overlay = button:CreateTexture(nil, "OVERLAY")
			button_overlay:SetTexture("Interface\\AddOns\\LUI\\textures\\Gloss")
			button_overlay:SetAllPoints(button)
			button_overlay:SetAlpha(0.5)
			button_overlay:SetTexCoord(0.1,0.9,0.1,0.9)
			button.button_overlay = button_overlay
			
			hover_texture = "Interface\\AddOns\\LUI\\textures\\Gloss"
			button:SetHighlightTexture(hover_texture)
			
			pushed_texture = "Interface\\AddOns\\LUI\\textures\\Highlight"
			button:SetPushedTexture(pushed_texture)
			
			flash_texture = "Interface\\AddOns\\LUI\\textures\\Highlight"
			button.flash:SetTexture(flash_texture)
			button.flash:Hide()
			button.cooldown:Hide()
			
			local checked_texture = "Interface\\AddOns\\LUI\\textures\\Gloss"
			button:SetCheckedTexture(checked_texture)
			]]
		end
	end
end

function SetAutoInvite()
	local autoinvite = CreateFrame("frame")
	autoinvite:RegisterEvent("CHAT_MSG_WHISPER")
	autoinvite:SetScript("OnEvent", function(self,event,arg1,arg2)
		if ((not UnitExists("party1") or IsPartyLeader("player")) and arg1:lower():match(db.General.AutoInviteKeyword)) and db.General.Autoinvite == true then
			InviteUnit(arg2)
		end
	end)
end

function SetAutoAcceptInvite()
	if db.General.AutoAcceptInvite == true then
		local tAutoAcceptInvite = CreateFrame("Frame")
		local OnEvent = function(self, event, ...) self[event](self, event, ...) end
		tAutoAcceptInvite:SetScript("OnEvent", OnEvent)
	
		local function PARTY_MEMBERS_CHANGED()
			StaticPopup_Hide("PARTY_INVITE")
			tAutoAcceptInvite:UnregisterEvent("PARTY_MEMBERS_CHANGED")
		end
	
		local InGroup = false
		local function PARTY_INVITE_REQUEST()
			local leader = arg1
			InGroup = false
			
			-- Update Guild and Freindlist
			if GetNumFriends() > 0 then ShowFriends() end
			if IsInGuild() then GuildRoster() end
			
			for friendIndex = 1, GetNumFriends() do
				local friendName = GetFriendInfo(friendIndex)
				if friendName == leader then
					AcceptGroup()
					tAutoAcceptInvite:RegisterEvent("PARTY_MEMBERS_CHANGED")
					tAutoAcceptInvite["PARTY_MEMBERS_CHANGED"] = PARTY_MEMBERS_CHANGED
					InGroup = true
					break
				end
			end
			
			if not InGroup then
				for guildIndex = 1, GetNumGuildMembers(true) do
					local guildMemberName = GetGuildRosterInfo(guildIndex)
					if guildMemberName == leader then
						AcceptGroup()
						tAutoAcceptInvite:RegisterEvent("PARTY_MEMBERS_CHANGED")
						tAutoAcceptInvite["PARTY_MEMBERS_CHANGED"] = PARTY_MEMBERS_CHANGED
						InGroup = true
						break
					end
				end
			end
			
			if not InGroup then
				SendWho(leader)
			end
		end
	
		tAutoAcceptInvite:RegisterEvent("PARTY_INVITE_REQUEST")
		tAutoAcceptInvite["PARTY_INVITE_REQUEST"] = PARTY_INVITE_REQUEST
	end
end

-- special hack for boss/arena unitframes
local Blizz_UnitAnchor = CreateFrame("Frame")
Blizz_UnitAnchor:SetWidth(200)
Blizz_UnitAnchor:SetHeight(350)

local numHookedCaptureFrames = 0

function Position:OnEnable()
	LUI = LibStub("AceAddon-3.0"):GetAddon("LUI")
	db = LUI.db.profile
	
	for i=1, 4, 1 do
		_G["Boss"..i.."TargetFrame"]:ClearAllPoints()
		_G["Boss"..i.."TargetFrame"]:SetParent(Blizz_UnitAnchor)
		_G["Boss"..i.."TargetFrame"]:SetPoint("TOP", i == 1 and Blizz_UnitAnchor or _G["Boss"..(i-1).."TargetFrame"], i == 1 and "TOP" or "BOTTOM")
		_G["Boss"..i.."TargetFrame"].SetPoint = function() end
	end
	
	self:SetFramePosition('boss')
	self:SetFramePosition('capture')
	self:SetFramePosition('durability')
	self:SetFramePosition('questWatch')
	self:SetFramePosition('ticketStatus')
	self:SetFramePosition('vehicleSeats')
	self:SetFramePosition('worldState')
	
	local RecountHook = CreateFrame("Frame", nil, UIParent)
		
	RecountHook:RegisterEvent("PLAYER_ENTERING_WORLD")
	RecountHook:SetScript("OnEvent", function(self)
		if IsAddOnLoaded("Recount") then
			Position:SetFramePosition('lui_recount')
			Position:Unhook(Recount_MainWindow, "SetPoint")
			Position:Unhook(Recount_MainWindow, "ClearAllPoints")
			Position:Unhook(Recount_MainWindow, "StopMovingOrSizing")
			Position:SecureHook(Recount_MainWindow, "SetPoint", "Recount_MainWindow_SetPoint")
			Position:SecureHook(Recount_MainWindow, "ClearAllPoints", "Recount_MainWindow_Clear")
			Position:SecureHook(Recount_MainWindow, "StopMovingOrSizing", "Recount_MainWindow_SetPoint")
		end
	end)
	
	local OmenHook = CreateFrame("Frame", nil, UIParent)
		
	OmenHook:RegisterEvent("PLAYER_ENTERING_WORLD")
	OmenHook:SetScript("OnEvent", function(self)
		if IsAddOnLoaded("Omen") then
			Position:SetFramePosition('lui_omen')
			Position:Unhook(Omen.Anchor, "SetPoint")
			Position:SecureHook(Omen.Anchor, "SetPoint", "Omen_SetPoint")
		end
	end)
	
	local GridHook = CreateFrame("Frame", nil, UIParent)
		
	GridHook:RegisterEvent("PLAYER_ENTERING_WORLD")
	GridHook:SetScript("OnEvent", function(self)
		if IsAddOnLoaded("Grid") then
			Position:Unhook(GridLayoutFrame, "SetPoint")
			Position:Unhook(GridLayoutFrame, "ClearAllPoints")
			Position:SecureHook(GridLayoutFrame, "SetPoint", "GridLayoutFrame_SetPoint")
			Position:SecureHook(GridLayoutFrame, "ClearAllPoints", "GridLayoutFrame_SetPoint")
			Position:SetFramePosition('lui_grid')
		end
	end)
	
	self:SecureHook(DurabilityFrame, "SetPoint", "DurabilityFrame_SetPoint")
	self:SecureHook(VehicleSeatIndicator, "SetPoint", "VehicleSeatIndicator_SetPoint")
	self:SecureHook(WatchFrame, "SetPoint", "WatchFrame_SetPoint")
	self:SecureHook(WorldStateAlwaysUpFrame, "SetPoint", "WorldStateAlwaysUpFrame_SetPoint")
	self:SecureHook("WorldStateAlwaysUpFrame_Update")
end

local shouldntSetPoint = false
function Position:Recount_MainWindow_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('lui_recount')
end

function Position:Recount_MainWindow_Clear(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('lui_recount')
end

function Position:Omen_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('lui_omen')
end

function Position:GridLayoutFrame_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('lui_grid')
end

function Position:DurabilityFrame_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('durability')
end

function Position:WatchFrame_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('questWatch')
end

function Position:VehicleSeatIndicator_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('vehicleSeats')
end

function Position:WorldStateAlwaysUpFrame_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('worldState')
end

function Position:WorldStateCaptureBar_SetPoint(this)
	if shouldntSetPoint then return end
	self:SetFramePosition('capture')
end

function Position:WorldStateAlwaysUpFrame_Update(this)
	while numHookedCaptureFrames < NUM_EXTENDED_UI_FRAMES do
		numHookedCaptureFrames = numHookedCaptureFrames + 1

		self:SecureHook(_G["WorldStateCaptureBar" .. numHookedCaptureFrames], "SetPoint", "WorldStateCaptureBar_SetPoint")
		self:WorldStateCaptureBar_SetPoint()
	end
end

local nameToFrame = {
	boss = Blizz_UnitAnchor,
	durability = DurabilityFrame,
	questWatch = WatchFrame,
	worldState = WorldStateAlwaysUpFrame,
	vehicleSeats = VehicleSeatIndicator,
	ticketStatus = TicketStatusFrame,
}

function Position:SetFramePosition(frame)
	local point,x,y = 0
	
	if frame == "worldState" then
		point = "TOP"
		x = tonumber(db.Minimap.AlwaysUpFrameX)
		y = tonumber(db.Minimap.AlwaysUpFrameY)
	elseif frame == "vehicleSeats" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.VehicleSeatIndicatorX)
		y = tonumber(db.Minimap.VehicleSeatIndicatorY)
	elseif frame == "durability" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.DurabilityFrameX)
		y = tonumber(db.Minimap.DurabilityFrameY)
	elseif frame == "questWatch" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.WatchFrameX)
		y = tonumber(db.Minimap.WatchFrameY)
	elseif frame == "boss" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.Boss1TargetFrameX)
		y = tonumber(db.Minimap.Boss1TargetFrameY)
	elseif frame == "ticketStatus" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.TicketX)
		y = tonumber(db.Minimap.TicketY)
	elseif frame == "capture" then
		point = "TOPRIGHT"
		x = tonumber(db.Minimap.CaptureX)
		y = tonumber(db.Minimap.CaptureY)
	elseif frame == "lui_recount" then
		point = "BOTTOMRIGHT"
		x = tonumber(db.General.Recount.X)
		y = tonumber(db.General.Recount.Y)
	elseif frame == "lui_grid" then
		if GridLayout.db.profile.groupAnchor == "TOPLEFT" then
			GridLayout.db.profile.groupAnchor = "TOPLEFT"
			GridLayout.db.profile.Anchor = "TOPLEFT"
			
			point = "TOPLEFT"
			x =  UIParent:GetWidth() - tonumber(db.General.Grid.X) 
			y = - UIParent:GetHeight() + tonumber(db.General.Grid.Y)
		elseif GridLayout.db.profile.groupAnchor == "TOPRIGHT" then
			GridLayout.db.profile.groupAnchor = "TOPRIGHT"
			GridLayout.db.profile.Anchor = "TOPRIGHT"
		
			point = "TOPRIGHT"
			x = tonumber(db.General.Grid.X) - UIParent:GetWidth()
			y = - UIParent:GetHeight() + tonumber(db.General.Grid.Y)
		elseif GridLayout.db.profile.groupAnchor == "BOTTOMLEFT" then	
			GridLayout.db.profile.groupAnchor = "BOTTOMLEFT"
			GridLayout.db.profile.Anchor = "BOTTOMLEFT"
		
			point = "BOTTOMLEFT"
			x = UIParent:GetWidth() - tonumber(db.General.Grid.X) 
			y = tonumber(db.General.Grid.Y)
		elseif GridLayout.db.profile.groupAnchor == "BOTTOMRIGHT" then
			GridLayout.db.profile.groupAnchor = "BOTTOMRIGHT"
			GridLayout.db.profile.Anchor = "BOTTOMRIGHT"
			
			point = "BOTTOMRIGHT"
			x = tonumber(db.General.Grid.X) - UIParent:GetWidth()
			y = tonumber(db.General.Grid.Y)
		end
	elseif frame == "lui_omen" then
		point = "BOTTOMLEFT"
		x = tonumber(db.General.Omen.X)
		y = tonumber(db.General.Omen.Y)
	end

	shouldntSetPoint = true
	
	if frame == "capture" then
		for i = 1, NUM_EXTENDED_UI_FRAMES do
			_G["WorldStateCaptureBar" .. i]:ClearAllPoints()
			_G["WorldStateCaptureBar" .. i]:SetPoint(point, UIParent, point, x, y)
		end
	elseif frame == "lui_recount" then
		Recount_MainWindow:ClearAllPoints()
		Recount_MainWindow:SetPoint(point, UIParent, point, x, y)
	elseif frame == "lui_grid" then
		GridLayoutFrame:ClearAllPoints()
		GridLayoutFrame:SetPoint(point, UIParent, point, x, y)
	elseif frame == "lui_omen" then
		Omen.Anchor:ClearAllPoints()
		Omen.Anchor:SetPoint(point, UIParent, point, x, y)
	else
		nameToFrame[frame]:ClearAllPoints()
		nameToFrame[frame]:SetPoint(point, UIParent, point, x, y)
	end

	shouldntSetPoint = false
end

------------------------------------------------------
-- / Install OmniCC / --
------------------------------------------------------

function InstallOmnicc()
	if IsAddOnLoaded("OmniCC") then
		OmniCC:SetFont("Prototype")
		OmniCC:SetFontSize(21)
		OmniCC:SetMinDuration(3)
		OmniCC:SetUseMMSS(1)
		OmniCC:SetShowModels(1)
		OmniCC:SetFontOutline("OUTLINE")
		OmniCC:SetDurationColor("secs", 0.8, 0.8, 0.9)
		OmniCC:SetDurationColor("mins", 0.8, 0.8, 0.9)
		OmniCC:SetDurationColor("short", 1, 0, 0)
		OmniCC:SetDurationColor("days", 0.8, 0.8, 0.9)
		OmniCC:SetDurationColor("hrs", 0.8, 0.8, 0.9)
		OmniCC:SetDurationScale("secs", 1)
		OmniCC:SetDurationScale("mins", 0.9)
		OmniCC:SetDurationScale("short", 1)
		OmniCC:SetDurationScale("days", 0.65)
		OmniCC:SetDurationScale("hrs", 0.8)
		
		LUICONFIG.Versions.omnicc = versions.omnicc
	end
end

------------------------------------------------------
-- / Install Grid / --
------------------------------------------------------
		
function InstallGrid()
	if IsAddOnLoaded("Grid") then
		
		local GridStatus = Grid:GetModule("GridStatus")
		local GridLayout = Grid:GetModule("GridLayout")
		local GridFrame = Grid:GetModule("GridFrame")
		local GridRange = Grid:GetModule("GridRange")
		local GridRoster = Grid:GetModule("GridRoster")
		local GridStatusHealth = Grid:GetModule("GridStatus"):GetModule("GridStatusHealth")
		local GridStatusRange = Grid:GetModule("GridStatus"):GetModule("GridStatusRange")
		local GridStatusAuras = Grid:GetModule("GridStatus"):GetModule("GridStatusAuras")
		
		Grid:ToggleModuleActive(GridStatus, true)
		Grid:ToggleModuleActive(GridLayout, true)
		Grid:ToggleModuleActive(GridFrame, true)
		
		local CharName = UnitName("player")
		local ServerName = GetRealmName()
		local ProfileName = CharName.." - "..ServerName
		
		if GridDB.currentProfile ~= nil then
			local GridOldProfile = nil
			
			for i, v in pairs(GridDB.currentProfile) do
				if i == ProfileName then
					GridOldProfile = v
					break;
				end
			end
			
			if GridOldProfile ~= nil then
				GridDB.namespaces.GridStatusAuras.profiles[CharName] = GridDB.namespaces.GridStatusAuras.profiles[GridOldProfile]
			end
		end
		
		if GridDB.currentProfile[ProfileName] == nil then
			tinsert(GridDB.currentProfile,ProfileName)
			GridDB.currentProfile[ProfileName] = CharName
		elseif GridDB.currentProfile[ProfileName] ~= CharName then
			GridDB.currentProfile[ProfileName] = CharName
		end
		
		GridDB.profiles[CharName] = ""
		GridDB.profiles[CharName] = {}
		GridDB.namespaces.GridFrame.profiles[CharName] = ""
		GridDB.namespaces.GridFrame.profiles[CharName] = {}
		GridDB.namespaces.GridStatusRange.profiles[CharName] = ""
		GridDB.namespaces.GridStatusRange.profiles[CharName] = {}
		GridDB.namespaces.GridStatus.profiles[CharName] = ""
		GridDB.namespaces.GridStatus.profiles[CharName] = {}
		GridDB.namespaces.GridLayout.profiles[CharName] = ""
		GridDB.namespaces.GridLayout.profiles[CharName] = {}
		GridDB.namespaces.GridStatusHealth.profiles[CharName] = ""
		GridDB.namespaces.GridStatusHealth.profiles[CharName] = {}
		
		GridProfileDefaults = {
			[CharName] = {
				["showText"] = false,
				["showIcon"] = false,
				["hidden"] = true,
				["minimap"] = {
					["hide"] = true,
				},
			},
		}
		
		for k,v in pairs(GridProfileDefaults) do
			GridDB.profiles[k] = v
		end
		
		GridFrameDefaults = {
			[CharName] = {
				["fontSize"] = 12,
				["statusmap"] = {
					["text"] = {
						["alert_voice"] = false,
						["alert_heals"] = false,
						["unit_health"] = false,
						["unit_healthDeficit"] = false,
						["player_target"] = false,
					},
					["border"] = {
						["alert_aggro"] = false,
						["unit_name"] = false,
						["alert_lowHealth"] = false,
						["alert_lowMana"] = false,
						["unit_health"] = false,
					},
					["barcolor"] = {
						["player_target"] = false,
						["debuff_ghost"] = true,
						["unit_healthDeficit"] = false,
						["unit_name"] = false,
						["alert_offline"] = false,
						["alert_death"] = false,
						["alert_aggro"] = false,
					},
					["corner4"] = {
						["alter_aggro"] = true,
					},
					["healingBar"] = {
						["alert_heals"] = false,
						["unit_name"] = false,
						["unit_health"] = false,
					},
					["frameAlpha"] = {
						["alert_offline"] = false,
						["unit_health"] = false,
						["player_target"] = false,
						["unit_name"] = false,
						["alert_range_10"] = false,
						["alert_range_30"] = false,
						["alert_death"] = false,
						["alert_range_100"] = false,
					},
					["corner3"] = {
						["debuff_curse"] = false,
						["debuff_poison"] = false,
						["debuff_disease"] = false,
						["debuff_magic"] = false,
					},
					["icon"] = {
						["debuff_poison"] = false,
						["debuff_disease"] = false,
						["debuff_magic"] = false,
					},
					["bar"] = {
						["debuff_ghost"] = true,
					},
				},
				["showTooltip"] = "Always",
				["iconSize"] = 17,
				["enableBarColor"] = true,
				["textlength"] = 8,
				["texture"] = "Minimalist",
				["enableIconStackText"] = false,
				["frameHeight"] = 37,
				["font"] = "vibroceb",
				["orientation"] = "HORIZONTAL",
				["frameWidth"] = 82,
			},
		}
		
		for k,v in pairs(GridFrameDefaults) do
			GridDB.namespaces.GridFrame.profiles[k] = v
		end
		
		GridStatusRangeDefaults = {
			[CharName] = {
				["alert_range_100"] = {
					["color"] = {
						["a"] = 0.1090909090909091,
						["b"] = 0,
						["g"] = 0,
						["r"] = 0,
					},
					["priority"] = 90,
					["enable"] = false,
					["text"] = "100 yards",
					["range"] = false,
					["desc"] = "More than 100 yards away",
				},
				["alert_range_10"] = {
					["color"] = {
						["a"] = 0.8181818181818181,
						["b"] = 0.3,
						["g"] = 0.2,
						["r"] = 0.1,
					},
					["priority"] = 81,
					["enable"] = false,
					["text"] = "10 yards",
					["range"] = false,
					["desc"] = "More than 10 yards away",
				},
				["alert_range_40"] = {
					["color"] = {
						["a"] = 0.2727272727272727,
						["b"] = 0.2,
						["g"] = 0.8,
						["r"] = 0.4,
					},
					["priority"] = 84,
					["enable"] = true,
					["text"] = "40 yards",
					["range"] = false,
					["desc"] = "More than 40 yards away",
				},
				["alert_range_28"] = {
					["color"] = {
						["a"] = 0.490909090909091,
						["b"] = 0.84,
						["g"] = 0.5600000000000001,
						["r"] = 0.28,
					},
					["priority"] = 83,
					["enable"] = false,
					["text"] = "28 yards",
					["range"] = false,
					["desc"] = "More than 28 yards away",
				},
				["alert_range_30"] = {
					["color"] = {
						["a"] = 0.4545454545454546,
						["b"] = 0.9,
						["g"] = 0.6,
						["r"] = 0.3,
					},
					["priority"] = 83,
					["enable"] = false,
					["text"] = "30 yards",
					["range"] = false,
					["desc"] = "More than 30 yards away",
				},
				["alert_range_38"] = {
					["color"] = {
						["a"] = 0.3090909090909091,
						["b"] = 0.14,
						["g"] = 0.76,
						["r"] = 0.38,
					},
					["priority"] = 84,
					["enable"] = false,
					["text"] = "38 yards",
					["range"] = false,
					["desc"] = "More than 38 yards away",
				},
			},
		}
		
		for k,v in pairs(GridStatusRangeDefaults) do
			GridDB.namespaces.GridStatusRange.profiles[k] = v
		end
		
		GridStatusDefaults = {
			[CharName] = {
				["colors"] = {
					["PALADIN"] = {
						["b"] = 0.73,
						["g"] = 0.55,
						["r"] = 0.96,
					},
					["MAGE"] = {
						["b"] = 0.94,
						["g"] = 0.8,
						["r"] = 0.41,
					},
					["DRUID"] = {
						["b"] = 0.04,
						["g"] = 0.49,
						["r"] = 1,
					},
					["DEATHKNIGHT"] = {
						["b"] = 0.23,
						["g"] = 0.12,
						["r"] = 0.77,
					},
					["ROGUE"] = {
						["b"] = 0.41,
						["g"] = 0.96,
						["r"] = 1,
					},
					["HUNTER"] = {
						["b"] = 0.45,
						["g"] = 0.83,
						["r"] = 0.67,
					},
					["PRIEST"] = {
						["b"] = 1,
						["g"] = 1,
						["r"] = 1,
					},
					["SHAMAN"] = {
						["b"] = 0.87,
						["g"] = 0.44,
						["r"] = 0,
					},
					["WARLOCK"] = {
						["b"] = 0.79,
						["g"] = 0.51,
						["r"] = 0.58,
					},
					["WARRIOR"] = {
						["b"] = 0.43,
						["g"] = 0.61,
						["r"] = 0.78,
					},
				},
			},
		}
		
		for k,v in pairs(GridStatusDefaults) do
			GridDB.namespaces.GridStatus.profiles[k] = v
		end
		
		GridLayoutDefaults = {
			[CharName] = {
				["anchorRel"] = "TOPLEFT",
				["BorderB"] = 0.2470588235294118,
				["layouts"] = {
					["party"] = "By Group 25",
					["solo"] = "By Group 25",
					["arena"] = "By Group 25",
					["bg"] = "By Group 25",
					["raid"] = "By Group 25",
				},
				["BackgroundR"] = 0.3294117647058824,
				["FrameLock"] = true,
				["BorderA"] = 0,
				["BorderR"] = 0.2470588235294118,
				["Spacing"] = 3,
				["layout"] = "By Group 25",
				["Padding"] = 0,
				["BackgroundA"] = 0,
				["BackgroundB"] = 0.3294117647058824,
				["BorderG"] = 0.2470588235294118,
				["BackgroundG"] = 0.3294117647058824,
				["PosX"] = 939.721672815782,
				["PosY"] = -601.9189477952709,
			},
		}
				
		for k,v in pairs(GridLayoutDefaults) do
			GridDB.namespaces.GridLayout.profiles[k] = v
		end
		
		GridStatusHealthDefaults = {
			[CharName] = {
				["unit_healthDeficit"] = {
					["threshold"] = 59,
					["useClassColors"] = false,
					["text"] = "TG",
					["icon"] = "Interface\\Icons\\Ability_Rogue_FeignDeath",
					["color"] = {
						["b"] = 0.5,
						["g"] = 0.5,
						["r"] = 0.5,
					},
					["priority"] = 99,
				},
				["alert_lowHealth"] = {
					["enable"] = false,
					["text"] = "Less HP",
				},
				["alert_death"] = {
					["priority"] = 99,
				},
				["unit_health"] = {
					["deadAsFullHealth"] = false,
					["color"] = {
						["b"] = 0.5019607843137255,
						["g"] = 0.5019607843137255,
						["r"] = 0.5019607843137255,
					},
					["priority"] = 99,
					["useClassColors"] = false,
				},
			},
		}
		
		for k,v in pairs(GridStatusHealthDefaults) do
			GridDB.namespaces.GridStatusHealth.profiles[k] = v
		end
		
		LUICONFIG.Versions.grid = versions.grid
		GridFrame.db.profile.showTooltip = true
		GridStatusHealth.db.profile.unit_health.useClassColors = false
	
	end
end

------------------------------------------------------
-- / Install pMinimap / --
------------------------------------------------------

function InstallPMinimap()
	if IsAddOnLoaded("pMinimap") then
		Minimap:SetMovable(true)
		Minimap:StartMoving()
		Minimap:ClearAllPoints()
		Minimap:SetPoint("TOPRIGHT", UIParent, -25, -40)
		Minimap:StopMovingOrSizing()
		Minimap:SetMovable(false)
		
		pMinimapDefaults = {
			["durability"] = false,
			["strata"] = "HIGH",
			["coordinates"] = false,
			["zone"] = false,
			["clock"] = false,
			["level"] = 3,
			["borderoffset"] = 0,
			["mail"] = true,
			["fontflag"] = "OUTLINE",
			["font"] = "visitor1",
			["fontsize"] = 14
		}
		
		pMinimapDB = {}
	
		for k,v in pairs(pMinimapDefaults) do
			pMinimapDB[k] = v
		end
		
		LUICONFIG.Versions.pminimap = versions.pminimap
	end
end

------------------------------------------------------
-- / Install Recount / --
------------------------------------------------------

function InstallRecount()
	if IsAddOnLoaded("Recount") then
		Recount.db.profile.GraphWindowY = 0
		Recount.db.profile.MainWindow.Buttons.CloseButton = false
		Recount.db.profile.MainWindow.Buttons.LeftButton = false
		Recount.db.profile.MainWindow.Buttons.ResetButton = false
		Recount.db.profile.MainWindow.Buttons.ConfigButton = false
		Recount.db.profile.MainWindow.Buttons.FileButton = false
		Recount.db.profile.MainWindow.Buttons.RightButton = false
		Recount.db.profile.MainWindow.Buttons.ReportButton = false
		Recount.db.profile.MainWindow.ShowScrollbar = false
		Recount.db.profile.MainWindow.Position.y = -421.097536516879
		Recount.db.profile.MainWindow.Position.x = 332.9999067269808
		Recount.db.profile.MainWindow.Position.w = 197
		Recount.db.profile.MainWindow.Position.h = 245
		Recount.db.profile.MainWindow.RowHeight = 27
		Recount.db.profile.MainWindow.BarText.NumFormat = 3
		Recount.db.profile.MainWindow.BarText.Percent = false
		Recount.db.profile.ConfirmDeleteInstance = false
		Recount.db.profile.ReportLines = 4
		Recount.db.profile.SegmentBosses = true
		
		local function RecountSetColor(Branch,Name,r,g,b,a)
			Recount.db.profile.Colors[Branch][Name].r=r
			Recount.db.profile.Colors[Branch][Name].g=g
			Recount.db.profile.Colors[Branch][Name].b=b
			Recount.db.profile.Colors[Branch][Name].a=a
		end
		
		RecountSetColor("Other Windows","Background",0,0,0)
		RecountSetColor("Other Windows","Title",0.2980392156862745,0.3058823529411765,0.2980392156862745)
		RecountSetColor("Window","Background",0,0,0,0)
		RecountSetColor("Window","Title",0.1333333333333333,0.1333333333333333,0.1333333333333333,0)
		RecountSetColor("Window","Title Text",0.1333333333333333,0.1333333333333333,0.1333333333333333,0)
		RecountSetColor("Bar","Bar Text",0.7764705882352941,0.7764705882352941,0.7764705882352941,1)
		RecountSetColor("Bar","Total Bar",0.7764705882352941,0.7764705882352941,0.7764705882352941,1)
		
		local function RecountSetClassColor(ctype,self)
			if(self==1) then
				Recount.db.profile.Colors.Class[ctype].r = 0.592156862745098
				Recount.db.profile.Colors.Class[ctype].g = 0.592156862745098
				Recount.db.profile.Colors.Class[ctype].b = 0.592156862745098
				Recount.db.profile.Colors.Class[ctype].a = 1
			else
				Recount.db.profile.Colors.Class[ctype].r = 0.3686274509803922
				Recount.db.profile.Colors.Class[ctype].g = 0.3686274509803922
				Recount.db.profile.Colors.Class[ctype].b = 0.3686274509803922
				Recount.db.profile.Colors.Class[ctype].a = 0.8900000005960465
			end
		end
		
		RecountSetClassColor("HUNTER")
		RecountSetClassColor("WARRIOR")
		RecountSetClassColor("PALADIN")
		RecountSetClassColor("MAGE")
		RecountSetClassColor("PRIEST")
		RecountSetClassColor("ROGUE")
		RecountSetClassColor("WARLOCK")
		RecountSetClassColor("PET")
		RecountSetClassColor("MOB")
		RecountSetClassColor("DRUID")
		RecountSetClassColor("SHAMAN")
		RecountSetClassColor("DEATHKNIGHT")
		
		if class == "WARRIOR" then
			RecountSetClassColor("WARRIOR",1)
		elseif class == "PRIEST" then
			RecountSetClassColor("PRIEST",1)
		elseif class == "DRUID" then
			RecountSetClassColor("DRUID",1)
		elseif class == "HUNTER" then 
			RecountSetClassColor("HUNTER",1)
		elseif class == "MAGE" then
			RecountSetClassColor("MAGE",1)
		elseif class == "PALADIN" then
			RecountSetClassColor("PALADIN",1)
		elseif class == "SHAMAN" then
			RecountSetClassColor("SHAMAN",1)
		elseif class == "WARLOCK" then
			RecountSetClassColor("WARLOCK",1)
		elseif class == "ROGUE" then
			RecountSetClassColor("ROGUE",1)
		elseif class== "DEATH KNIGHT" then
			RecountSetClassColor("DEATHKNIGHT",1)
		end
		
		Recount.db.profile.DetailWindowY = 143.0000041470295
		Recount.db.profile.ConfirmDeleteGroup = false
		Recount.db.profile.DetailWindowX = 281.0000099106976
		Recount.db.profile.GraphWindowX = 0
		
		Recount.db.profile.Filters.Show.Pet = true
		Recount.db.profile.Filters.Show.Ungrouped = false
		Recount.db.profile.Filters.Data.Boss = false
		Recount.db.profile.Filters.Data.Unknown = false
		Recount.db.profile.Filters.TrackDeaths.Self = false
		Recount.db.profile.Filters.TrackDeaths.Pet = false
		Recount.db.profile.Filters.TrackDeaths.Boss = false
		Recount.db.profile.Filters.TrackDeaths.Grouped = false
		
		Recount.db.profile.BarTexture = "Minimalist"
		Recount.db.profile.CurDataSet = "CurrentFightData"
		Recount.db.profile.BarTextColorSwap = false
		Recount.db.profile.Font = "vibrocen"
		Recount.db.profile.ConfirmDeleteRaid = false
		
		Recount:LockWindows(false)
		Recount.MainWindow:SetResizable(true)
		Recount.db.profile.MainWindowHeight = 245
		Recount.db.profile.MainWindowWidth = 197
		Recount:SetBarTextures(Recount.db.profile.BarTexture)
		Recount:RestoreMainWindowPosition(Recount.db.profile.MainWindow.Position.x,Recount.db.profile.MainWindow.Position.y,Recount.db.profile.MainWindow.Position.w,Recount.db.profile.MainWindow.Position.h)
		Recount:ResizeMainWindow()
		Recount:FullRefreshMainWindow()
		Recount:SetupMainWindowButtons()
		Recount.profilechange = true
		Recount:CloseAllRealtimeWindows()
		Recount.Colors:UpdateAllColors()
		Recount.profilechange = nil
		Recount:SetStrataAndClamp()
		Recount.db.profile.Locked = true
		Recount:LockWindows(true)
		
		LUICONFIG.Versions.recount = versions.recount
	end
end

------------------------------------------------------
-- / Install Omen / --
------------------------------------------------------

function InstallOmen()
	if IsAddOnLoaded("Omen") then	
		Omen.db.profile.Shown = true
		Omen.db.profile.VGrip1 = 155.3166898740382
		Omen.db.profile.VGrip2 = 155.3166898740382
		Omen.db.profile.Locked = true
		Omen.db.profile.Background.EdgeSize = 9
		Omen.db.profile.Background.BorderTexture = "None"
		Omen.db.profile.Background.Color.a = 0
		Omen.db.profile.Background.Color.r = 0
		Omen.db.profile.Background.Color.g = 0
		Omen.db.profile.Background.Color.b = 0
		Omen.db.profile.Background.BorderColor.a = 0
		Omen.db.profile.Background.BorderColor.r = 0
		Omen.db.profile.Background.BorderColor.g = 0
		Omen.db.profile.Background.BorderColor.b = 0
		Omen.db.profile.Background.Texture = "Solid"
		Omen.db.profile.MinimapIcon.hide = true
		Omen.db.profile.ShowWith.UseShowWith = false
		Omen.db.profile.ShowWith.PVP = true
		Omen.db.profile.ShowWith.Alone = true
		Omen.db.profile.ShowWith.Resting = true
		Omen.db.profile.ShowWith.HideWhileResting = false
		Omen.db.profile.ShowWith.HideInPVP = false
		Omen.db.profile.Warnings.Sound = false
		Omen.db.profile.TitleBar.ShowTitleBar = false
		Omen.db.profile.TitleBar.FontSize = 12
		Omen.db.profile.TitleBar.Height = 18
		Omen.db.profile.Bar.FontSize = 13
		Omen.db.profile.Bar.FontColor.r = 0.7764705882352941
		Omen.db.profile.Bar.FontColor.g = 0.7764705882352941
		Omen.db.profile.Bar.FontColor.b = 0.7764705882352941
		Omen.db.profile.Bar.ShowHeadings = false
		Omen.db.profile.Bar.ShowValue = false
		Omen.db.profile.Bar.UseClassColors = false
		Omen.db.profile.Bar.Spacing = 1
		Omen.db.profile.Bar.MyBarColor.r = 0.592156862745098
		Omen.db.profile.Bar.MyBarColor.g = 0.592156862745098
		Omen.db.profile.Bar.MyBarColor.b = 0.592156862745098
		Omen.db.profile.Bar.Texture = "Minimalist"
		Omen.db.profile.Bar.ShowTPS = false
		Omen.db.profile.Bar.AggroBarColor.r = color_r
		Omen.db.profile.Bar.AggroBarColor.g = color_g
		Omen.db.profile.Bar.AggroBarColor.b = color_b
		Omen.db.profile.Bar.BarColor.a = 0.8900000005960465
		Omen.db.profile.Bar.BarColor.r = 0.3686274509803922
		Omen.db.profile.Bar.BarColor.g = 0.3686274509803922
		Omen.db.profile.Bar.BarColor.b = 0.3686274509803922
		Omen.db.profile.Bar.Font = "vibrocen"
		Omen.db.profile.Bar.Height = 25
		Omen.db.profile.Bar.FadeBarColor.r = 0.4666666666666667
		Omen.db.profile.Bar.FadeBarColor.g = 0.4666666666666667
		Omen.db.profile.Bar.FadeBarColor.b = 0.4666666666666667
		Omen.db.profile.Bar.UseMyBarColor = true
		Omen.db.profile.PositionX = 428.618218069226
		Omen.db.profile.PositionY = 224.0147437441533
		Omen.db.profile.PositionW = 198.8860415275098
		Omen.db.profile.PositionH = 196.9849329984127
		
		LUICONFIG.Versions.omen = versions.omen
	end
end

------------------------------------------------------
-- / Install Bartender / --
------------------------------------------------------
		
function InstallBartender()
	if IsAddOnLoaded("Bartender4") then
		local CharName = UnitName("player")
		local ServerName = GetRealmName()
		local ProfileName = CharName.." - "..ServerName
		
		BagBarDefaults = {
			[CharName] = {
				["skin"] = {
					["Colors"] = {
						["Normal"] = {
							0.203921568627451, -- [1]
							0.203921568627451, -- [2]
							0.203921568627451, -- [3]
							1, -- [4]
						},
						["Pushed"] = {
							1, -- [1]
							1, -- [2]
							1, -- [3]
							0.3199999928474426, -- [4]
						},
						["Highlight"] = {
							1, -- [1]
							1, -- [2]
							1, -- [3]
							1, -- [4]
						},
						["Gloss"] = {
							0.9803921568627451, -- [1]
							0.9803921568627451, -- [2]
							0.9803921568627451, -- [3]
							1, -- [4]
						},
						["Backdrop"] = {
							0.9803921568627451, -- [1]
							1, -- [2]
							0.9686274509803922, -- [3]
							1, -- [4]
						},
						["Border"] = {
							0.08235294117647059, -- [1]
							1, -- [2]
							0.04313725490196078, -- [3]
							1, -- [4]
						},
						["Checked"] = {
							0.9882352941176471, -- [1]
							1, -- [2]
							0.984313725490196, -- [3]
							1, -- [4]
						},
					},
					["ID"] = "Caith",
					["Backdrop"] = false,
				},
				["enabled"] = false,
				["show"] = "alwayshide",
				["version"] = 3,
				["position"] = {
					["y"] = 6.869293713785169,
					["x"] = 62.96281414890549,
					["point"] = "LEFT",
				},
			},
		}
		
		for k,v in pairs(BagBarDefaults) do
			Bartender4DB.namespaces.BagBar.profiles[k] = v
		end

		RepBarDefaults = {
			[CharName] = {
				["position"] = {
					["y"] = 9.999978772832151,
					["x"] = 361.714377491161,
					["point"] = "LEFT",
				},
				["version"] = 3,
			},
		}
		
		for k,v in pairs(RepBarDefaults) do
			Bartender4DB.namespaces.RepBar.profiles[k] = v
		end
		
		XPBarDefaults = {
			[CharName] = {
				["position"] = {
					["y"] = 218.9714880476636,
					["x"] = 398.3903171500545,
					["point"] = "BOTTOMLEFT",
					["scale"] = 0.9,
				},
				["visibility"] = {
					["possess"] = false,
				},
				["version"] = 3,
			},
		}
		
		for k,v in pairs(XPBarDefaults) do
			Bartender4DB.namespaces.XPBar.profiles[k] = v
		end
		
		ActionBarsDefaults = {
			[CharName] = {
				["actionbars"] = {
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["version"] = 3,
						["position"] = {
							["y"] = 60,
							["x"] = -197,
							["point"] = "BOTTOM",
							["scale"] = 0.85,
						},
						["hidehotkey"] = true,
						["hidemacrotext"] = true,
						["visibility"] = {
							["always"] = false,
						},
						["states"] = {
							["actionbar"] = false,
						},
					}, -- [1]
					{
						["fadeoutdelay"] = 0,
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["hidehotkey"] = true,
						["fadeoutalpha"] = 0,
						["version"] = 3,
						["position"] = {
							["y"] = 94,
							["x"] = -197,
							["point"] = "BOTTOM",
							["scale"] = 0.85,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = false,
						},
					}, -- [2]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									0.9803921568627451, -- [1]
									0.9803921568627451, -- [2]
									0.9803921568627451, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["enabled"] = false,
						["hidehotkey"] = true,
						["show"] = "alwayshide",
						["version"] = 3,
						["position"] = {
							["y"] = 173.326953106798,
							["x"] = 344.0160633672025,
							["point"] = "LEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = false,
							["vehicleui"] = false,
						},
					}, -- [3]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["hidehotkey"] = true,
						["show"] = "alwayshide",
						["version"] = 3,
						["position"] = {
							["y"] = -266.7948988830055,
							["x"] = 344.0160633672025,
							["point"] = "TOPLEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = true,
							["vehicleui"] = false,
						},
					}, -- [4]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["enabled"] = false,
						["hidehotkey"] = true,
						["version"] = 3,
						["position"] = {
							["y"] = 209.326940513326,
							["x"] = 344.0160633672025,
							["point"] = "LEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,

							["always"] = false,
							["vehicleui"] = false,
						},
					}, -- [5]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["hidehotkey"] = true,
						["version"] = 3,
						["position"] = {
							["y"] = 245.3267011968378,
							["x"] = 344.0160633672025,
							["point"] = "LEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = true,
							["vehicleui"] = false,
						},
					}, -- [6]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									0.9803921568627451, -- [1]
									0.9803921568627451, -- [2]
									0.9803921568627451, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["hidehotkey"] = true,
						["version"] = 3,
						["position"] = {
							["y"] = 137.3269333112677,
							["x"] = 344.0160633672025,
							["point"] = "LEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = true,
						},
					}, -- [7]
					{
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Gloss"] = {
									0.9803921568627451, -- [1]
									0.9803921568627451, -- [2]
									0.9803921568627451, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["hidehotkey"] = true,
						["version"] = 3,
						["position"] = {
							["y"] = 101.3269459047398,
							["x"] = 344.0160633672025,
							["point"] = "LEFT",
							["scale"] = 0.8999999761581421,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = true,
						},
					}, -- [8]
					{
						["rows"] = 6,
						["fadeoutdelay"] = 0,
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Gloss"] = {
									1, -- [1]
									1, -- [2]
									1, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
								["Flash"] = {
									1, -- [1]
									0, -- [2]
									0, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Disabled"] = {
									0.9882352941176471, -- [1]
									1, -- [2]
									0.9490196078431372, -- [3]
									1, -- [4]
								},
							},
							["ID"] = "Darion",
							["Gloss"] = 0.3,
						},
						["enabled"] = true,
						["fadeoutalpha"] = 0,
						["version"] = 3,
						["hidehotkey"] = true,
						["position"] = {
							["y"] = 65.20006318506091,
							["x"] = 30.77499950488759,
							["point"] = "LEFT",
							["scale"] = 0.8500000238418579,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["possess"] = false,
							["always"] = false,
							["vehicleui"] = false,
						},
					}, -- [9]
					{
						["rows"] = 6,
						["fadeoutdelay"] = 0,
						["skin"] = {
							["Colors"] = {
								["Normal"] = {
									0.1333333333333333, -- [1]
									0.1333333333333333, -- [2]
									0.1333333333333333, -- [3]
									0.9500000029802322, -- [4]
								},
								["Pushed"] = {
									0.3215686274509804, -- [1]
									0.3215686274509804, -- [2]
									0.3215686274509804, -- [3]
									1, -- [4]
								},
								["Checked"] = {
									0.01176470588235294, -- [1]
									0.01176470588235294, -- [2]
									0.01176470588235294, -- [3]
									0, -- [4]
								},
								["Highlight"] = {
									0.403921568627451, -- [1]
									0.403921568627451, -- [2]
									0.403921568627451, -- [3]
									1, -- [4]
								},
								["Backdrop"] = {
									0.1098039215686275, -- [1]
									0.1098039215686275, -- [2]
									0.1098039215686275, -- [3]
									1, -- [4]
								},
								["Border"] = {
									0.407843137254902, -- [1]
									0.403921568627451, -- [2]
									0.4117647058823529, -- [3]
									1, -- [4]
								},
							},
							["Gloss"] = 0.3,
							["ID"] = "Darion",
						},
						["enabled"] = true,
						["alpha"] = 0,
						["version"] = 3,
						["hidehotkey"] = true,
						["fadeoutalpha"] = 0,
						["position"] = {
							["y"] = 65.20006318506091,
							["x"] = -103.0250394585505,
							["point"] = "RIGHT",
							["scale"] = 0.8500000238418579,
						},
						["hidemacrotext"] = true,
						["visibility"] = {
							["custom"] = false,
							["customdata"] = "",
							["always"] = false,
							["possess"] = false,
							["vehicleui"] = false,
						},
					}, -- [10]
				},
			},
		}
			
		for k,v in pairs(ActionBarsDefaults) do
			Bartender4DB.namespaces.ActionBars.profiles[k] = v
		end
		
		VehicleDefaults = {
			[CharName] = {
				["version"] = 3,
				["fadeoutalpha"] = 1,
				["skin"] = {
					["Colors"] = {
						["Normal"] = {
							0.1333333333333333, -- [1]
							0.1333333333333333, -- [2]
							0.1333333333333333, -- [3]
							0.9500000029802322, -- [4]
						},
						["Pushed"] = {
							0.3215686274509804, -- [1]
							0.3215686274509804, -- [2]
							0.3215686274509804, -- [3]
							1, -- [4]
						},
						["Highlight"] = {
							0.403921568627451, -- [1]
							0.403921568627451, -- [2]
							0.403921568627451, -- [3]
							1, -- [4]
						},
						["Checked"] = {
							0.01176470588235294, -- [1]
							0.01176470588235294, -- [2]
							0.01176470588235294, -- [3]
							0, -- [4]
						},
						["Gloss"] = {
							1, -- [1]
							1, -- [2]
							1, -- [3]
							1, -- [4]
						},
						["Border"] = {
							0.407843137254902, -- [1]
							0.403921568627451, -- [2]
							0.4117647058823529, -- [3]
							1, -- [4]
						},
						["Backdrop"] = {
							0.1098039215686275, -- [1]
							0.1098039215686275, -- [2]
							0.1098039215686275, -- [3]
							1, -- [4]
						},
						["Flash"] = {
							1, -- [1]
							0, -- [2]
							0, -- [3]
							1, -- [4]
						},
					},
					["Gloss"] = 0.3,
					["ID"] = "Darion",
				},
				["fadeoutdelay"] = 1,
				["padding"] = 0,
				["visibility"] = {
					["nopet"] = false,
					["always"] = false,
					["possess"] = false,
				},
				["position"] = {
					["y"] = -184.1292338095927,
					["x"] = 432.4822981234832,
					["point"] = "LEFT",
					["scale"] = 0.9,
				},
			},
		}
		
		for k,v in pairs(VehicleDefaults) do
			Bartender4DB.namespaces.Vehicle.profiles[k] = v
		end
		
		StanceBarDefaults = {
			[CharName] = {
				["position"] = {
					["y"] = -16.50000411188517,
					["x"] = -82.49990584837293,
					["point"] = "CENTER",
					["scale"] = 1,
				},
				["fadeoutalpha"] = 1,
				["skin"] = {
					["Colors"] = {
						["Normal"] = {
							0.1333333333333333, -- [1]
							0.1333333333333333, -- [2]
							0.1333333333333333, -- [3]
							0.9500000029802322, -- [4]
						},
						["Pushed"] = {
							0.3215686274509804, -- [1]
							0.3215686274509804, -- [2]
							0.3215686274509804, -- [3]
							1, -- [4]
						},
						["Highlight"] = {
							0.403921568627451, -- [1]
							0.403921568627451, -- [2]
							0.403921568627451, -- [3]
							1, -- [4]
						},
						["Gloss"] = {
							1, -- [1]
							1, -- [2]
							1, -- [3]
							1, -- [4]
						},
						["Backdrop"] = {
							0.1098039215686275, -- [1]
							0.1098039215686275, -- [2]
							0.1098039215686275, -- [3]
							1, -- [4]
						},
						["Flash"] = {
							1, -- [1]
							0, -- [2]
							0, -- [3]
							1, -- [4]
						},
						["Border"] = {
							0.407843137254902, -- [1]
							0.403921568627451, -- [2]
							0.4117647058823529, -- [3]
							1, -- [4]
						},
						["Checked"] = {
							0.01176470588235294, -- [1]
							0.01176470588235294, -- [2]
							0.01176470588235294, -- [3]
							0, -- [4]
						},
						["Disabled"] = {
							0.9882352941176471, -- [1]
							1, -- [2]
							0.9490196078431372, -- [3]
							1, -- [4]
						},
					},
					["Gloss"] = 0.3,
					["ID"] = "Darion",
				},
				["fadeoutdelay"] = 1,
				["padding"] = 1,
				["visibility"] = {
					["possess"] = false,
					["always"] = true,
					["stance"] = {
						false, -- [1]
					},
				},
				["version"] = 3,
			},
		}
		
		for k,v in pairs(StanceBarDefaults) do
			Bartender4DB.namespaces.StanceBar.profiles[k] = v
		end
		
		PetBarDefaults = {
			[CharName] = {
				["rows"] = 2,
				["hidemacrotext"] = true,
				["fadeoutalpha"] = 0,
				["position"] = {
					["y"] = 295,
					["x"] = -195,
					["point"] = "BOTTOMRIGHT",
					["scale"] = 0.8999999761581421,
				},
				["version"] = 3,
				["visibility"] = {
					["always"] = false,
				},
				["skin"] = {
					["Colors"] = {
						["Normal"] = {
							0.1333333333333333, -- [1]
							0.1333333333333333, -- [2]
							0.1333333333333333, -- [3]
							0.9500000029802322, -- [4]
						},
						["Pushed"] = {
							0.3215686274509804, -- [1]
							0.3215686274509804, -- [2]
							0.3215686274509804, -- [3]
							1, -- [4]
						},
						["Highlight"] = {
							0.4509803921568628, -- [1]
							0.4509803921568628, -- [2]
							0.4509803921568628, -- [3]
							1, -- [4]
						},
						["Gloss"] = {
							1, -- [1]
							1, -- [2]
							1, -- [3]
							1, -- [4]
						},
						["Backdrop"] = {
							0.1098039215686275, -- [1]
							0.1098039215686275, -- [2]
							0.1098039215686275, -- [3]
							1, -- [4]
						},
						["Flash"] = {
							1, -- [1]
							0, -- [2]
							0, -- [3]
							1, -- [4]
						},
						["Border"] = {
							0.407843137254902, -- [1]
							0.403921568627451, -- [2]
							0.4117647058823529, -- [3]
							1, -- [4]
						},
						["Checked"] = {
							0.6, -- [1]
							0.6, -- [2]
							0.6, -- [3]
							1, -- [4]
						},
						["Disabled"] = {
							0.9882352941176471, -- [1]
							1, -- [2]
							0.9490196078431372, -- [3]
							1, -- [4]
						},
					},
					["ID"] = "Darion",
					["Gloss"] = 0.3,
				},
			},
		}
		
		for k,v in pairs(PetBarDefaults) do
			Bartender4DB.namespaces.PetBar.profiles[k] = v
		end
		
		MicroMenuDefaults = {
			[CharName] = {
				["enabled"] = false,
				["version"] = 3,
				["show"] = "alwayshide",
				["skin"] = {
					["Colors"] = {
						["Normal"] = {
							0.1333333333333333, -- [1]
							0.1333333333333333, -- [2]
							0.1333333333333333, -- [3]
							1, -- [4]
						},
						["Border"] = {
							0.392156862745098, -- [1]
							0.3882352941176471, -- [2]
							0.396078431372549, -- [3]
							1, -- [4]
						},
					},
					["ID"] = "Caith",
					["Backdrop"] = false,
				},
				["position"] = {
					["y"] = -257.398563614586,
					["x"] = 21.58512786494109,
					["point"] = "LEFT",
					["scale"] = 0.800000011920929,
				},
			},
		}
		
		for k,v in pairs(MicroMenuDefaults) do
			Bartender4DB.namespaces.MicroMenu.profiles[k] = v
		end

		BTProfilesDefaults = {
			[CharName] = {
				["minimapIcon"] = {
					["minimapPos"] = 268,
					["radius"] = 80,
					["hide"] = true,
				},
				["buttonlock"] = true,
			},
		}
		
		for k,v in pairs(BTProfilesDefaults) do
			Bartender4DB.profiles[k] = v
		end
		
		if Bartender4DB.profileKeys[ProfileName] == nil then
			tinsert(Bartender4DB.profileKeys,ProfileName)
			Bartender4DB.profileKeys[ProfileName] = CharName
		elseif Bartender4DB.profileKeys[ProfileName] ~= CharName then
			Bartender4DB.profileKeys[ProfileName] = CharName
		end
		
		LUICONFIG.Versions.bartender = versions.bartender
	end
end

------------------------------------------------------
-- / Install XLoot / --
------------------------------------------------------

function InstallXLoot()
	if IsAddOnLoaded("XLoot") then
		local CharName = UnitName("player")
		local ServerName = GetRealmName()
		local ProfileName = CharName.." - "..ServerName	
				
		local XLootMonitorDBDefaults = {
			[CharName] = {
				["selfqualitythreshold"] = 2,
				["money"] = false,
				["rollchoices"] = true,
				["rollwins"] = true,
				["qualitythreshold"] = 2,
				["AnchorsAway"] = {
					["loot"] = {
						["threshold"] = 6,
						["timeout"] = 15,
						["lock"] = false,
						["anchor"] = false,
						["attach"] = {
							["self"] = "RIGHT",
							["x"] = 0,
							["target"] = "RIGHT",
							["y"] = 0,
						},
						["scale"] = 1,
						["pos"] = {
							["y"] = 660,
							["x"] = 1450,
						},
					},
				},
			},
		}
				
		for k,v in pairs(XLootMonitorDBDefaults) do
			XLootDB.namespaces.XLootMonitorDB.profiles[k] = v
		end
		
		local XLootGroupDBDefaults = {
			[CharName] = {
				["AnchorsAway"] = {
					["roll"] = {
						["threshold"] = 10000,
						["timeout"] = 10000,
						["lock"] = false,
						["anchor"] = false,
						["attach"] = {
							["self"] = "TOPLEFT",
							["x"] = 0,
							["target"] = "BOTTOMLEFT",
							["y"] = 0,
						},
						["scale"] = 1.2,
						["pos"] = {
							["y"] = 660,
							["x"] = 260,
						},
					},
				},
			},
		}
			
		for k,v in pairs(XLootGroupDBDefaults) do
			XLootDB.namespaces.XLootGroupDB.profiles[k] = v
		end
		
		local XLootMasterDBDefaults = {
			[CharName] = {
				["announce"] = {
					["group"] = 6,
					["guild"] = 6,
					["rw"] = 1,
				},
			},
		}
	
		for k,v in pairs(XLootMasterDBDefaults) do
			XLootDB.namespaces.XLootMasterDB.profiles[k] = v
		end
		
		local XLootProfileDefaults = {
			[CharName] = {
				["cursor"] = false,
				["linkallchannels"] = {
					["General"] = false,
					["SucheNachGruppe"] = false,
					["ifmages"] = false,
					["OFFICER"] = false,
					["Handel"] = false,
					["Allgemein"] = false,
					["YELL"] = false,
					["SAY"] = false,
					["lyllizwelt"] = false,
					["fidemfail"] = false,
					["naboki"] = false,
					["GUILD"] = false,
					["LookingForGroup"] = false,
					["LocalDefense"] = false,
					["Gildenrekrutierung"] = false,
					["RAID"] = false,
					["Trade"] = false,
					["RAID_WARNING"] = false,
					["PARTY"] = false,
					["LokaleVerteidigung"] = false,
					["fidemheiler"] = false,
				},
				["pos"] = {
					["y"] = 586.9918425118459,
					["x"] = 776.7265871191437,
				},
			},
		}
			
		for k,v in pairs(XLootProfileDefaults) do
			XLootDB.profiles[k] = v
		end
		
		if XLootDB.currentProfile[ProfileName] == nil then
			tinsert(XLootDB.currentProfile,ProfileName)
			XLootDB.currentProfile[ProfileName] = CharName
		elseif XLootDB.currentProfile[ProfileName] ~= CharName then
			XLootDB.currentProfile[ProfileName] = CharName
		end
		
		LUICONFIG.Versions.xloot = versions.xloot
	end
end

------------------------------------------------------
-- / Install Forte / --
------------------------------------------------------

function InstallForte()
	if IsAddOnLoaded("Forte_Core") then
		local CharName = UnitName("player")
		local ServerName = GetRealmName()
		local ProfileName = CharName.." - "..ServerName	
		
		local health_r = db.oUF.Player.Health.IndividualColor.r
		local health_g = db.oUF.Player.Health.IndividualColor.g
		local health_b = db.oUF.Player.Health.IndividualColor.b
		
		local ProfileNameForte = CharName.."-"..ServerName
		
		local ForteTimerArray = FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Filter"]
		local ForteCooldownArray = FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["Filter"]
		
		local ForteProfileFound = false
		
		for i, v in ipairs(FC_Saved.ProfileNames) do
			if v[1] == CharName then
				ForteProfileFound = true
				break;
			end
		end
		
		if ForteProfileFound == false then
			tinsert(FC_Saved.ProfileNames,{CharName, CharName})
		end
			
		ForteDefaults = {
			[CharName] = {
				["RemoveAfterCombat"] = false,
				["TimerInstantSoundEnable"] = false,
				["RightClickIconOptions"] = true,
				["GlobalFrameNames"] = true,
				["FrameSnap"] = true,
				["GlobalAlpha"] = 1,
				["AnimateScroll"] = false,
				["ShardEnable"] = false,
				["SoulstoneEnable"] = false,
				["HealthstoneEnable"] = false,
				["SummonEnable"] = false,
				["Timer"] = {
					["HighlightColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["FocusBgColor"] = {
						1, -- [1]
						1, -- [2]
						0.5019607843137255, -- [3]
						1, -- [4]
					},
					["MaxEnable"] = false,
					["CustomTag"] = false,
					["Expand"] = true,
					["SelfDebuffColor"] = {
						health_r-0.3, -- [1]
						health_g-0.3, -- [2]
						health_b-0.3, -- [3]
					},
					["HideTime"] = 2,
					["CurseEnable"] = true,
					["MagicEnable"] = true,
					["CustomTagMsg"] = "id target :: spell stacks",
					["TicksEnable"] = false,
					["FadeTime"] = 0.5,
					["PetEnable"] = true,
					["HealEnable"] = true,
					["y"] = 261,
					["BuffEnable"] = true,
					["ExpiredEnable"] = false,
					["ExpiredColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
						0.1, -- [4]
					},
					["Filter"] = {
					},
					["DrainColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["GroupID"] = false,
					["scale"] = 1.2,
					["TargetColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						1, -- [4]
					},
					["MagicColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["Target"] = true,
					["IgnoreLong"] = false,
					["ShowID"] = false,
					["MaximizeName"] = false,
					["MaxTimeEnable"] = false,
					["FocusEnable"] = false,
					["PetColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["Max"] = 10,
					["Backdrop"] = {
						"Interface\\AddOns\\Forte_Core\\Textures\\Background", -- [1]
						"Interface\\AddOns\\oUF_LUI\\media\\textures\\glowTex", -- [2]
						false, -- [3]
						16, -- [4]
						6, -- [5]
						5, -- [6]
					},
					["HighlightEnable"] = true,
					["CooldownsEnable"] = true,
					["FailEnable"] = true,
					["Height"] = 17,
					["CurseColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["x"] = 475,
					["DrainEnable"] = true,
					["alpha"] = 1,
					["RaidTargetsAlpha"] = 0.7,
					["Enable"] = true,
					["TargetBgColor"] = {
						0, -- [1]
						0, -- [2]
						0, -- [3]
						1, -- [4]
					},
					["SpacingHeight"] = 0,
					["Fade"] = true,
					["FocusBgEnable"] = false,
					["BarBackgroundAlpha"] = 0.5,
					["Time"] = true,
					["Focus"] = true,
					["Blink"] = 3,
					["TicksNext"] = false,
					["FailTime"] = 2,
					["RaidTargets"] = false,
					["NormalAlpha"] = 0.4,
					["FadeSpeed"] = 0.3,
					["MaxTime"] = 30,
					["CrowdEnable"] = true,
					["Spell"] = false,
					["LabelHeight"] = 16,
					["LabelFont"] = "Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibrocen.ttf",
					["Width"] = 210,
					["BuffColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["SparkColor"] = {
						color_r, -- [1]
						color_g, -- [2]
						color_b, -- [3]
						0.5, -- [4]
					},
					["Ticks"] = false,
					["NormalBgColor"] = {
						0, -- [1]
						0, -- [2]
						0, -- [3]
						0.7300000190734863, -- [4]
					},
					["TimeColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						1, -- [4]
					},
					["FriendlyBuffColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["FriendlyBuffEnable"] = true,
					["CrowdColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["Other"] = true,
					["OneMax"] = false,
					["SparkEnable"] = true,
					["Flip"] = false,
					["Texture"] = "Interface\\AddOns\\Forte_Core\\Textures\\Minimalist",
					["HideLongerEnable"] = false,
					["HideNonStacking"] = false,
					["HideLonger"] = 30,
					["FailColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["DebuffsEnable"] = true,
					["TimeSpace"] = 25,
					["FontSize"] = 10,
					["Space"] = 1,
					["Background"] = true,
					["Outwands"] = true,
					["BlinkEnable"] = false,
					["HealColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["DebuffsColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["TicksColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						1, -- [4]
					},
					["TargetEnable"] = false,
					["HideLongerNoBoss"] = false,
					["CastSpark"] = false,
					["TargetBgEnable"] = false,
					["SelfDebuffEnable"] = true,
					["NormalColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						1, -- [4]
					},
					["CooldownsColor"] = {
						health_r, -- [1]
						health_g, -- [2]
						health_b, -- [3]
					},
					["FocusColor"] = {
						1, -- [1]
						1, -- [2]
						0.5, -- [3]
						1, -- [4]
					},
					["lock"] = true,
					["Test"] = false,
					["ForceMax"] = false,
					["LabelFontSize"] = 10,
					["Font"] = "Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibrocen.ttf",
				},
				["Cooldown"] = {
					["ResTimerEnable"] = false,
					["BgColor"] = {
						0, -- [1]
						0, -- [2]
						0, -- [3]
						0, -- [4]
					},
					["SpellEnable"] = true,
					["AlphaMax"] = 0.6,
					["Tags"] = 5,
					["PetEnable"] = true,
					["y"] = 73,
					["BuffEnable"] = true,
					["Filter"] = {
						["unknown"] = {
							{
								-1, -- [1]
							}, -- [1]
						},
						["Blessed Medallion of Karabor"] = {
							{
								-1, -- [1]
							}, -- [1]
						},
						["Recently Bandaged"] = {
							{
								-2, -- [1]
								1, -- [2]
								0.65, -- [3]
								0, -- [4]
							}, -- [1]
						},
					},
					["MinRangeEnable"] = false,
					["IconTextEnable"] = true,
					["scale"] = 0.7,
					["PotionColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["HealthstoneColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["PetColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["MaxRangeEnable"] = false,
					["Max"] = 300,
					["Backdrop"] = {
						"Interface\\AddOns\\Forte_Core\\Textures\\Background", -- [1]
						"Interface\\Addons\\oUF_LUI\\media\\textures\\glowTex", -- [2]
						false, -- [3]
						16, -- [4]
						5, -- [5]
						2, -- [6]
					},
					["Font"] = "Interface\\AddOns\\SharedMedia_MyMedia\\font\\vibrocen.ttf",
					["DebuffEnable"] = true,
					["Height"] = 40,
					["FontSize"] = 15,
					["MinRange"] = 0,
					["Enable"] = true,
					["Loga"] = 0.255,
					["Vertical"] = false,
					["MaxRange"] = 3600,
					["lock"] = true,
					["PotionEnable"] = true,
					["CustomTagsMsg"] = "0 1 10 30 60 120 180 240",
					["SoulstoneEnable"] = false,
					["Texture"] = "Interface\\AddOns\\Forte_Core\\Textures\\Minimalist",
					["DebuffColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["Spark"] = true,
					["Width"] = 551,
					["BuffColor"] = {
						0.01568627450980392, -- [1]
						0.01568627450980392, -- [2]
						0.01568627450980392, -- [3]
					},
					["TextColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						1, -- [4]
					},
					["Swing"] = false,
					["Flip"] = false,
					["Detail"] = true,
					["alpha"] = 1,
					["IconTextColor"] = {
						1, -- [1]
						1, -- [2]
						1, -- [3]
						0, -- [4]
					},
					["IconFont"] = "Interface\\AddOns\\Forte_Core\\Fonts\\GOTHIC.TTF",
					["Warn"] = true,
					["Splash"] = true,
					["ResTimerColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["EnchantColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["EnchantEnable"] = true,
					["PowerupColor"] = {
						0.01568627450980392, -- [1]
						0.01568627450980392, -- [2]
						0.01568627450980392, -- [3]
					},
					["SoulstoneColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["GroupOverride"] = true,
					["Alpha"] = 0.1,
					["ItemEnable"] = true,
					["CustomTags"] = false,
					["SpellColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["BarColor"] = {
						0.8627450980392157, -- [1]
						0.8627450980392157, -- [2]
						0.8627450980392157, -- [3]
						0.3500000238418579, -- [4]
					},
					["Ignore"] = true,
					["IconFontSize"] = 11,
					["HealthstoneEnable"] = false,
					["ItemColor"] = {
						0.07450980392156863, -- [1]
						0.07450980392156863, -- [2]
						0.07450980392156863, -- [3]
					},
					["SplashFactor"] = 6,
					["Test"] = false,
					["Hide"] = true,
					["PowerupEnable"] = true,
					["x"] = 609,
				},
				["Splash"] = {
					["SplashGlow"] = true,
					["SecondSplashMax"] = 3,
					["Enable"] = true,
					["lock"] = true,
					["scale"] = 2,
					["y"] = 384.0000092153639,
					["alpha"] = 0.7,
					["x"] = 614.4000447540723,
				},
				["RAID"] = false,
				["PARTY"] = false,
			}
		}
		
		FC_Saved.Profiles[CharName] = ""
		FC_Saved.Profiles[CharName] = {}
	
		for k,v in pairs(ForteDefaults) do
			FC_Saved.Profiles[k] = v
		end
		
		FC_Saved.Profiles[CharName]["Timer"]["Filter"] = ForteTimerArray
		FC_Saved.Profiles[CharName]["Cooldown"]["Filter"] = ForteCooldownArray
		
		FW:UseProfile(CharName)
		
		LUICONFIG.Versions.forte = versions.forte
	end
end

------------------------------------------------------
-- / Install TipTop / --
------------------------------------------------------

function InstallTiptop()
	if IsAddOnLoaded("Tiptop") then		
		TipTopDefaults = {
			["raidIconX"] = "0",
			["healthText"] = false,
			["raidIconSize"] = 23,
			["offsetX"] = "-250",
			["borderColor"] = {
				["a"] = 1,
				["r"] = 0.2901960784313725,
				["g"] = 0.2901960784313725,
				["b"] = 0.2901960784313725,
			},
			["anchor"] = "RIGHT",
			["bg"] = "Blizzard Tooltip",
			["sbarbgcolor"] = {
				["a"] = 0.8299999982118607,
				["r"] = 0,
				["g"] = 0,
				["b"] = 0,
			},
			["healthBar"] = "Minimalist",
			["onCursor"] = false,
			["raidIconY"] = "0",
			["font"] = "Friz Quadrata TT",
			["textformat"] = "100%",
			["offsetY"] = "0",
			["classIcon"] = false,
			["insideBar"] = true,
			["scale"] = 1,
			["border"] = "5",
			["elite"] = false,
			["inset"] = 0,
			["showTalentText"] = false,
			["showTargetText"] = false,
			["fontFlag"] = "None",
			["alpha"] = 1,
			["you"] = false,
			["classColor"] = false,
			["sbarcolor"] = {
				["a"] = 1,
				["r"] = 0,
				["g"] = 1,
				["b"] = 0,
			},
			["borderWidth"] = 14,
			["itemColor"] = false,
			["topBar"] = false,
			["bgColor"] = {
				["r"] = 0.1843137254901961,
				["g"] = 0.1882352941176471,
				["b"] = 0.1803921568627451,
			},
			["raidIconPosition"] = "TOP",
			["sbarbg"] = "Minimalist",
		}
		
		TipTopDB = {}
	
		for k,v in pairs(TipTopDefaults) do
			TipTopDB[k] = v
		end
		
		LUICONFIG.Versions.tiptop = versions.tiptop
	end
end

function InstallSBC()
	if IsAddOnLoaded("StatBlockCore") then
		local CharName = UnitName("player")
		local ServerName = GetRealmName()
		local ProfileName = CharName.." - "..ServerName	
	
		SBCDefaults = {
			[CharName] = {
				["plugins"] = {
					["First Aid"] = {
						["enabled"] = false,
					},
					["Cooking"] = {
						["enabled"] = false,
					},
					["Verzauberkunst"] = {
						["enabled"] = false,
					},
					["Bartender4"] = {
						["enabled"] = false,
					},
					["Grid"] = {
						["enabled"] = false,
					},
					["Erste Hilfe"] = {
						["enabled"] = false,
					},
					["Kochkunst"] = {
						["enabled"] = false,
					},
					["Juwelenschleifen"] = {
						["enabled"] = false,
					},
					["Enchanting"] = {
						["enabled"] = false,
					},
					["Jewelcrafting"] = {
						["enabled"] = false,
					},
					["PallyPower"] = {
						["enabled"] = false,
					},
					["GearScore"] = {
						["enabled"] = false,
					},
					["Omen"] = {
						["enabled"] = false,
					},
				},
			},
		}
			
		StatBlockCoreDB.profiles[CharName] = ""	
		StatBlockCoreDB.profiles[CharName] = {}
	
		for k,v in pairs(SBCDefaults) do
			StatBlockCoreDB.profiles[k] = v
		end
		
		if StatBlockCoreDB.profileKeys[ProfileName] == nil then
			tinsert(StatBlockCoreDB.profileKeys,ProfileName)
			StatBlockCoreDB.profileKeys[ProfileName] = CharName
		elseif StatBlockCoreDB.profileKeys[ProfileName] ~= CharName then
			StatBlockCoreDB.profileKeys[ProfileName] = CharName
		end
		
		LUICONFIG.Versions.sbc = versions.sbc
	end
end

function InstallStuffing()
	if IsAddOnLoaded("Stuffing") then
		StuffingDefaults = {
			["quiver_color"] = {
				0.8, -- [1]
				0.8, -- [2]
				0.2, -- [3]
				1, -- [4]
			},
			["bankCols"] = 14,
			["cols"] = 11,
			["bsize"] = 33,
			["locked"] = 0,
			["StuffingFrameBagsPosX"] = 1289.775738907522,
			["force_defaults"] = 0,
			["rarity_glow"] = 0,
			["stackfont_size"] = 12,
			["StuffingFrameBankPosX"] = 775.7833473711453,
			["custom_stackfont"] = 1,
			["fontName"] = "test5",
			["font"] = "Interface\\Addons\\SharedMedia_MyMedia\\font\\test5.ttf",
			["soulbag_color"] = {
				0.8, -- [1]
				0.2, -- [2]
				0.2, -- [3]
				1, -- [4]
			},
			["edge"] = "Interface\\Addons\\SharedMedia_MyMedia\\border\\5.tga",
			["stackfontName"] = "Futura LT Heavy",
			["custom_skin"] = 1,
			["quest_glow"] = 1,
			["spacing"] = 1,
			["StuffingFrameBagsPosY"] = 575.9535262789175,
			["edgeSize"] = 20,
			["special_color"] = {
				0.2, -- [1]
				0.2, -- [2]
				0.8, -- [3]
				1, -- [4]
			},
			["StuffingFrameBankPosY"] = 604.871471958595,
			["border_color"] = {
				0.3254901960784314, -- [1]
				0.3294117647058824, -- [2]
				0.3294117647058824, -- [3]
				1, -- [4]
			},
			["quest_glow_color"] = {
				1, -- [1]
				0.3, -- [2]
				0.3, -- [3]
			},
			["hide_soulbag"] = 0,
			["fontSize"] = 15,
			["clamp"] = 1,
			["bag_bars"] = 0,
			["search_glow"] = {
				0.8, -- [1]
				0.8, -- [2]
				0.3, -- [3]
			},
			["backdrop_color"] = {
				0.05098039215686274, -- [1]
				0.05098039215686274, -- [2]
				0.05098039215686274, -- [3]
				1, -- [4]
			},
			["background"] = "Interface\\ChatFrame\\ChatFrameBackground",
			["padding"] = 9,
			["stackfont"] = "Interface\\Addons\\SharedMedia_MyMedia\\font\\Futura LT Heavy.ttf",
			["edgeName"] = "5",
		}
	
		for k,v in pairs(StuffingDefaults) do
			StuffingDB[k] = v
		end
		
		LUICONFIG.Versions.stuffing = versions.stuffing
	end
end

------------------------------------------------------
-- / UPDATE / --
------------------------------------------------------

function Update()
	local updateBG = create_me_a_frame("FRAME","updateBG",UIParent,2400,2000,1,"HIGH",0,"CENTER",UIParent,"CENTER",0,0,1)
	updateBG:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	updateBG:SetBackdropColor(0,0,0,1)
	updateBG:SetBackdropBorderColor(0,0,0,0)
	updateBG:SetAlpha(1)
	updateBG:Show() 
	
	local updatelogo = create_me_a_frame("FRAME","updatelogo",UIParent,512,512,1,"HIGH",1,"CENTER",UIParent,"CENTER",0,150,1)
	updatelogo:SetBackdrop({bgFile=fdir.."logo.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	updatelogo:SetBackdropBorderColor(0,0,0,0)
	updatelogo:Show()
	
	local update = create_me_a_frame("FRAME","update",updatelogo,512,512,1,"HIGH",1,"BOTTOM",updatelogo,"BOTTOM",0,-130,1)
	update:SetBackdrop({bgFile=fdir.."update.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	update:SetBackdropColor(1,1,1,1)
	update:SetBackdropBorderColor(0,0,0,0)
	update:Show()
	
	local update_hover = create_me_a_frame("FRAME","update_hover",updatelogo,512,512,1,"HIGH",2,"BOTTOM",updatelogo,"BOTTOM",0,-130,1)
	update_hover:SetBackdrop({bgFile=fdir.."update_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	update_hover:SetBackdropColor(1,1,1,1)
	update_hover:SetBackdropBorderColor(0,0,0,0)
	update_hover:Hide()
	
	local update_frame = create_me_a_frame("BUTTON","update_frame",updatelogo,310,80,1,"HIGH",3,"BOTTOM",updatelogo,"BOTTOM",-5,90,1)
	update_frame:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	update_frame:SetBackdropColor(1,1,1,0)
	update_frame:SetBackdropBorderColor(0,0,0,0)
	update_frame:Show()
	
	update_frame:SetScript("OnEnter", function(self)
		update:Hide()
		update_hover:Show()
	end)
	
	update_frame:SetScript("OnLeave", function(self)
		update_hover:Hide()
		update:Show()
	end)

	update_frame:RegisterForClicks("AnyUp")
	update_frame:SetScript("OnClick", function(self)
		
		if IsAddOnLoaded("Grid") then
			if LUICONFIG.Versions.grid ~= versions.grid then
				InstallGrid()
			end
		end
		
		if IsAddOnLoaded("pMinimap") then
			if LUICONFIG.Versions.pminimap ~= versions.pminimap then
				InstallPMinimap()
			end
		end
		
		if IsAddOnLoaded("OmniCC") then
			if LUICONFIG.Versions.omnicc ~= versions.omnicc then
				InstallOmnicc()
			end
		end
		
		if IsAddOnLoaded("Recount") then
			if LUICONFIG.Versions.recount ~= versions.recount then
				InstallRecount()
			end
		end
		
		if IsAddOnLoaded("Omen") then	
			if LUICONFIG.Versions.omen ~= versions.omen then
				InstallOmen()
			end
		end
		
		if IsAddOnLoaded("Bartender4") then
			if LUICONFIG.Versions.bartender ~= versions.bartender then
				InstallBartender()
			end
		end
		
		if IsAddOnLoaded("XLoot") then
			if LUICONFIG.Versions.xloot ~= versions.xloot then
				InstallXLoot()
			end
		end
		
		if IsAddOnLoaded("Forte_Core") then
			if LUICONFIG.Versions.forte ~= versions.forte then
				InstallForte()
			end
		end
		
		if IsAddOnLoaded("Tiptop") then	
			if LUICONFIG.Versions.tiptop ~= versions.tiptop then
				InstallTiptop()
			end
		end
		
		if IsAddOnLoaded("StatBlockCore") then
			if LUICONFIG.Versions.sbc ~= versions.sbc then
				InstallSBC()
			end
		end
		
		if IsAddOnLoaded("Stuffing") then
			if LUICONFIG.Versions.stuffing ~= versions.stuffing then
				InstallStuffing()
			end
		end
	
		LUICONFIG.Versions.lui = versions.lui
		ReloadUI()
	end)
end

------------------------------------------------------
-- / CONFIGURE / --
------------------------------------------------------

function Configure()
	if InterfaceOptionsFrame:IsShown() then
		InterfaceOptionsFrame:Hide()
	end
	
	local configureBG = create_me_a_frame("FRAME","configureBG",UIParent,2400,2000,1,"HIGH",0,"CENTER",UIParent,"CENTER",0,0,1)
	configureBG:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	configureBG:SetBackdropColor(0,0,0,1)
	configureBG:SetBackdropBorderColor(0,0,0,0)
	configureBG:SetAlpha(1)
	configureBG:Show() 
	
	local logo = create_me_a_frame("FRAME","logo",UIParent,512,512,1,"HIGH",1,"CENTER",UIParent,"CENTER",0,150,1)
	logo:SetBackdrop({bgFile=fdir.."logo.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	logo:SetBackdropBorderColor(0,0,0,0)
	logo:Show()
	
	local install = create_me_a_frame("FRAME","install",logo,512,512,1,"HIGH",1,"BOTTOM",logo,"BOTTOM",0,-130,1)
	install:SetBackdrop({bgFile=fdir.."install.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	install:SetBackdropColor(1,1,1,1)
	install:SetBackdropBorderColor(0,0,0,0)
	install:Show()
	
	local install_hover = create_me_a_frame("FRAME","install_hover",logo,512,512,1,"HIGH",2,"BOTTOM",logo,"BOTTOM",0,-130,1)
	install_hover:SetBackdrop({bgFile=fdir.."install_hover.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	install_hover:SetBackdropColor(1,1,1,1)
	install_hover:SetBackdropBorderColor(0,0,0,0)
	install_hover:Hide()
	
	local install_frame = create_me_a_frame("BUTTON","install_frame",logo,310,80,1,"HIGH",3,"BOTTOM",logo,"BOTTOM",-5,90,1)
	install_frame:SetBackdrop({bgFile="Interface\\Tooltips\\UI-Tooltip-Background", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
	install_frame:SetBackdropColor(1,1,1,0)
	install_frame:SetBackdropBorderColor(0,0,0,0)
	install_frame:Show()
	
	install_frame:SetScript("OnEnter", function(self)
		install:Hide()
		install_hover:Show()
	end)
	
	install_frame:SetScript("OnLeave", function(self)
		install_hover:Hide()
		install:Show()
	end)

	install_frame:RegisterForClicks("AnyUp")
	install_frame:SetScript("OnClick", function(self) 
		
		SetCVar("screenshotQuality", 8)
		SetCVar("buffDurations", 1)
		SetCVar("showItemLevel", 1)
		SetCVar("equipmentManager", 1)
		SetCVar("mapQuestDifficulty", 1)
		SetCVar("previewTalents", 1)
		SetCVar("scriptErrors", 0)
		SetCVar("nameplateShowFriends", 0)
		SetCVar("nameplateShowEnemies", 1)
		SetCVar("ShowClassColorInNameplate", 1)
		SetCVar("screenshotQuality", 8)
		SetCVar("CombatDamage",1)
		SetCVar("CombatHealing",1)
		SetCVar("ChatBubbles",1)
		SetCVar("uiScale", 0.6949)
		SetCVar("useUiScale", 1)
		SetCVar("chatMouseScroll", 1)
		SetCVar("chatStyle", "classic")
		
		InstallGrid()
		InstallPMinimap()
		InstallOmnicc()
		InstallRecount()
		InstallOmen()
		InstallBartender()
		InstallXLoot()
		InstallForte()
		InstallTiptop()
		InstallSBC()
		InstallStuffing()
		
		LUICONFIG.Versions.lui = versions.lui
		LUICONFIG.IsConfigured = true
		ReloadUI()
	end)
end

local options, moduleOptions = nil, {}
local function getOptions()
	if not LUI.options then
		LUI.options = {
			name = "LUI",
			type = "group",
			args = {
				General = {
					name = "General",
					order = 1,
					type = "group",
					args = {
						IntroImage = {
							order = 1,
							image = [[Interface\AddOns\LUI\textures\logo]],
							imageWidth = 128,
							width = "full",
							imageHeight = 128,
							imageCoords = { 0, 1, 0, 1 },
							type = "description",
							name = " ",
						},
						empty5 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 2,
						},
						IntroText = {
							order = 3,
							width = "full",
							type = "description",
							name = "Welcome to |c0090ffffLUI v3|r the first and only NextGeneration\nWorld of Warcraft User Interface.\n\nPlease read the FAQ if you have Questions!\nFor more information please visit\n|cff8080ffhttp://www.wow-lui.com|r\n|cff8080ffhttp://wowinterface.com|r\n\nEnjoy!\n\n\nVersion: |c0090ffff"..LUICONFIG.Versions.lui.."|r",
						},
						Settings = {
							name = "Settings",
							type = "group",
							order = 1,
							args = {
								header1 = {
									name = "Restore Addon Defaults",
									type = "header",
									order = 1,
								},
								ResetDesc = {
									order = 2,
									width = "full",
									type = "description",
									name = "ATTENTION:\nAll SavedVariables from Grid, pMinimap, Omnicc, Recount, Omen, Bartender, XLoot, ForteXorcist, StatBlockCore and Tiptop will be resetted!"
								},
								Reset = {
									order = 3,
									type = "execute",
									name = "Restore Defaults",
									func = function()
										StaticPopup_Show("RESTORE_DETAULTS")
									end,
								},
								empty566 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 3.5,
								},
								header2 = {
									name = "General Options",
									type = "header",
									order = 4,
								},
								alwaysShowMinimap = {
									name = "Show Minimap",
									desc = "Whether you want to show the Minimap by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowMinimap end,
									set = function()
												db.Frames.AlwaysShowMinimap = not db.Frames.AlwaysShowMinimap
											end,
									order = 5,
								},
								alwaysShowChat = {
									name = "Show Chat",
									desc = "Whether you want to show the Chat by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowChat end,
									set = function()
												db.Frames.AlwaysShowChat = not db.Frames.AlwaysShowChat
											end,
									order = 6,
								},
								alwaysShowOmen = {
									name = "Show Omen",
									desc = "Whether you want to show Omen by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowOmen end,
									set = function()
												db.Frames.AlwaysShowOmen = not db.Frames.AlwaysShowOmen
											end,
									order = 7,
								},
								alwaysShowRecount = {
									name = "Show Recount",
									desc = "Whether you want to show Recount by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowRecount end,
									set = function()
												db.Frames.AlwaysShowRecount = not db.Frames.AlwaysShowRecount
											end,
									order = 8,
								},
								alwaysShowGrid = {
									name = "Show Grid",
									desc = "Whether you want to show Grid by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowGrid end,
									set = function()
												db.Frames.AlwaysShowGrid = not db.Frames.AlwaysShowGrid
											end,
									order = 9,
								},
								alwaysShowMicroMenu = {
									name = "Show MicroMenu",
									desc = "Whether you want to show the Micromenu by entering World or not.\n",
									type = "toggle",
									get = function() return db.Frames.AlwaysShowMicroMenu end,
									set = function()
												db.Frames.AlwaysShowMicroMenu = not db.Frames.AlwaysShowMicroMenu
											end,
									order = 10,
								},
								header91 = {
									name = "Misc Options",
									type = "header",
									order = 33,
								},
								AutoAcceptInvite = {
									name = "Enable Auto Accept Invites",
									desc = "Choose if you want to accept all Invites from Guildmembers/Friends or not.",
									type = "toggle",
									width = "full",
									get = function() return db.General.AutoAcceptInvite end,
									set = function()
											db.General.AutoAcceptInvite = not db.General.AutoAcceptInvite
										end,
									order = 34,
								},
								AutoInvite = {
									name = "Enable Autoinvite",
									desc = "Choose if you want to Enable Autoinvite or not.",
									type = "toggle",
									width = "full",
									get = function() return db.General.Autoinvite end,
									set = function()
											db.General.Autoinvite = not db.General.Autoinvite
										end,
									order = 35,
								},
								AutoInviteKeyword = {
									name = "Auto Invite Keyword",
									desc = "Choose any Keyword for Auto Invite",
									type = "input",
									disabled = function() return not db.General.Autoinvite end,
									get = function() return db.General.AutoInviteKeyword end,
									set = function(self,AutoInviteKeyword)
												if AutoInviteKeyword == nil or AutoInviteKeyword == "" then
													AutoInviteKeyword = ""
												end
												db.General.AutoInviteKeyword = AutoInviteKeyword
											end,
									order = 36,
								},
							},
						},
						Colors = {
							name = "Colors",
							type = "group",
							order = 2,
							args = {
								header11 = {
									name = "Color scheme",
									type = "header",
									order = 12,
								},
								ColorScheme = {
									name = "Color Scheme",
									desc = "Choose one predefined Color Scheme!",
									type = "select",
									values = {"None","Deep Freeze","Goldenboy","Bloodprince","Absinth","Demonic Pact","Orangemarmalade"},
									get = function() return db.Frames.Scheme end,
									set = function(_, ColorScheme)
												db.Frames.Scheme = ColorScheme
												db.Theme.IndividualColor = true
												db.Frames.IndividualColor = true
												db.Chat.Editbox.Color.Enable = true
												
												-- DEEP FREEZE THEME
												if ColorScheme == 2 then 					
													-- THEME COLORS
														db.Theme.IndividualColor_r = 0.28
														db.Theme.IndividualColor_g = 0.52
														db.Theme.IndividualColor_b = 0.85
														db.Theme.IndividualColor_a = 0.65
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 0.28
														db.Frames.IndividualColor_g = 0.52
														db.Frames.IndividualColor_b = 0.85
														db.Frames.IndividualColor_a = 0.46
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 0.28
														db.Frames.IndividualFillColor_g = 0.52
														db.Frames.IndividualFillColor_b = 0.85
														db.Frames.IndividualFillColor_a = 0.46
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 0.33
														db.Frames.IndividualBarColor_g = 0.61
														db.Frames.IndividualBarColor_b = 1
														db.Frames.IndividualBarColor_a = 1
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.33
														db.Frames.IndividualMinimapColor_g = 0.61
														db.Frames.IndividualMinimapColor_b = 1
														db.Frames.IndividualMinimapColor_a = 1
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 0.45
														db.Frames.IndividualMicroMenuColor_g = 0.71
														db.Frames.IndividualMicroMenuColor_b = 0.98
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.28
														db.Frames.IndividualTopMenuColor_g = 0.52
														db.Frames.IndividualTopMenuColor_b = 0.85
														db.Frames.IndividualTopMenuColor_a = 0.63
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0.28
														db.Chat.Editbox.Color.g = 0.52
														db.Chat.Editbox.Color.b = 0.85
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.44
														db.Frames.IndividualOrbColor_g = 0.60
														db.Frames.IndividualOrbColor_b = 0.80
													StaticPopup_Show("RELOAD_UI")
												
												-- GOLDENBOY THEME
												elseif ColorScheme == 3 then				
													-- THEME COLORS
														db.Theme.IndividualColor_r = 0.85
														db.Theme.IndividualColor_g = 0.58
														db.Theme.IndividualColor_b = 0.33
														db.Theme.IndividualColor_a = 0.73
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 0
														db.Frames.IndividualFillColor_g = 0
														db.Frames.IndividualFillColor_b = 0
														db.Frames.IndividualFillColor_a = 0.45
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 0
														db.Frames.IndividualColor_g = 0
														db.Frames.IndividualColor_b = 0
														db.Frames.IndividualColor_a = 0.45
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 0.85
														db.Frames.IndividualBarColor_g = 0.58
														db.Frames.IndividualBarColor_b = 0.33
														db.Frames.IndividualBarColor_a = 0.68
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.85
														db.Frames.IndividualMinimapColor_g = 0.58
														db.Frames.IndividualMinimapColor_b = 0.33
														db.Frames.IndividualMinimapColor_a = 0.2
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 0.85
														db.Frames.IndividualMicroMenuColor_g = 0.58
														db.Frames.IndividualMicroMenuColor_b = 0.33
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.02
														db.Frames.IndividualTopMenuColor_g = 0.02
														db.Frames.IndividualTopMenuColor_b = 0.02
														db.Frames.IndividualTopMenuColor_a = 1
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0
														db.Chat.Editbox.Color.g = 0
														db.Chat.Editbox.Color.b = 0
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.85
														db.Frames.IndividualOrbColor_g = 0.58
														db.Frames.IndividualOrbColor_b = 0.33
													StaticPopup_Show("RELOAD_UI")
													
												-- BLOODPRINCE THEME
												elseif ColorScheme == 4 then				
													-- THEME COLORS
														db.Theme.IndividualColor_r = 0.75
														db.Theme.IndividualColor_g = 0.25
														db.Theme.IndividualColor_b = 0.20
														db.Theme.IndividualColor_a = 0.6
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 0
														db.Frames.IndividualFillColor_g = 0
														db.Frames.IndividualFillColor_b = 0
														db.Frames.IndividualFillColor_a = 0.45
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 0
														db.Frames.IndividualColor_g = 0
														db.Frames.IndividualColor_b = 0
														db.Frames.IndividualColor_a = 0.45
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 0
														db.Frames.IndividualBarColor_g = 0
														db.Frames.IndividualBarColor_b = 0
														db.Frames.IndividualBarColor_a = 0.35
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.4
														db.Frames.IndividualMinimapColor_g = 0
														db.Frames.IndividualMinimapColor_b = 0
														db.Frames.IndividualMinimapColor_a = 0.7
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 0.7
														db.Frames.IndividualMicroMenuColor_g = 0.16
														db.Frames.IndividualMicroMenuColor_b = 0.12
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.3
														db.Frames.IndividualTopMenuColor_g = 0.05
														db.Frames.IndividualTopMenuColor_b = 0.02
														db.Frames.IndividualTopMenuColor_a = 1
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0
														db.Chat.Editbox.Color.g = 0
														db.Chat.Editbox.Color.b = 0
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.71
														db.Frames.IndividualOrbColor_g = 0.33
														db.Frames.IndividualOrbColor_b = 0.27
													StaticPopup_Show("RELOAD_UI")
													
												-- ABSINTH
												elseif ColorScheme == 5 then				
													-- THEME COLORS
														db.Theme.IndividualColor_r = 0.63
														db.Theme.IndividualColor_g = 0.6
														db.Theme.IndividualColor_b = 0.62
														db.Theme.IndividualColor_a = 0.65
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 0.11
														db.Frames.IndividualFillColor_g = 0.67
														db.Frames.IndividualFillColor_b = 0.13
														db.Frames.IndividualFillColor_a = 0.4
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 0.11
														db.Frames.IndividualColor_g = 0.67
														db.Frames.IndividualColor_b = 0.13
														db.Frames.IndividualColor_a = 0.4
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 0
														db.Frames.IndividualBarColor_g = 0
														db.Frames.IndividualBarColor_b = 0
														db.Frames.IndividualBarColor_a = 1
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.43
														db.Frames.IndividualMinimapColor_g = 1
														db.Frames.IndividualMinimapColor_b = 0.43
														db.Frames.IndividualMinimapColor_a = 1
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 0.9
														db.Frames.IndividualMicroMenuColor_g = 0.9
														db.Frames.IndividualMicroMenuColor_b = 0.9
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.38
														db.Frames.IndividualTopMenuColor_g = 0.85
														db.Frames.IndividualTopMenuColor_b = 0
														db.Frames.IndividualTopMenuColor_a = 0.26
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0.28
														db.Chat.Editbox.Color.g = 0.8
														db.Chat.Editbox.Color.b = 0.36
														db.Chat.Editbox.Color.a = 0.2
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.28
														db.Frames.IndividualOrbColor_g = 0.8
														db.Frames.IndividualOrbColor_b = 0.36
													StaticPopup_Show("RELOAD_UI")
													
												-- DEMONIC PACT THEME
												elseif ColorScheme == 6 then				
													-- THEME COLORS
														db.Theme.IndividualColor_r = 0.55
														db.Theme.IndividualColor_g = 0.38
														db.Theme.IndividualColor_b = 0.85
														db.Theme.IndividualColor_a = 0.45
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 1
														db.Frames.IndividualFillColor_g = 1
														db.Frames.IndividualFillColor_b = 1
														db.Frames.IndividualFillColor_a = 0.27
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 1
														db.Frames.IndividualColor_g = 1
														db.Frames.IndividualColor_b = 1
														db.Frames.IndividualColor_a = 0.27
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 0.53
														db.Frames.IndividualBarColor_g = 0.48
														db.Frames.IndividualBarColor_b = 0.9
														db.Frames.IndividualBarColor_a = 1
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.71
														db.Frames.IndividualMinimapColor_g = 0.66
														db.Frames.IndividualMinimapColor_b = 0.85
														db.Frames.IndividualMinimapColor_a = 1
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 0.76
														db.Frames.IndividualMicroMenuColor_g = 0.72
														db.Frames.IndividualMicroMenuColor_b = 1
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.45
														db.Frames.IndividualTopMenuColor_g = 0.32
														db.Frames.IndividualTopMenuColor_b = 0.83
														db.Frames.IndividualTopMenuColor_a = 0.26
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0.66
														db.Chat.Editbox.Color.g = 0.64
														db.Chat.Editbox.Color.b = 0.82
														db.Chat.Editbox.Color.a = 0.24
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.29
														db.Frames.IndividualOrbColor_g = 0.25
														db.Frames.IndividualOrbColor_b = 0.31
													StaticPopup_Show("RELOAD_UI")
												
												-- ORANGEMARMALADE THEME
												elseif ColorScheme == 7 then				
													-- THEME COLORS
														db.Theme.IndividualColor_r = 1
														db.Theme.IndividualColor_g = 0.43
														db.Theme.IndividualColor_b = 0
														db.Theme.IndividualColor_a = 0.4
													-- FRAME COLORS
														db.Frames.IndividualFillColor_r = 0
														db.Frames.IndividualFillColor_g = 0
														db.Frames.IndividualFillColor_b = 0
														db.Frames.IndividualFillColor_a = 0.86
													-- FRAME BORDER COLORS
														db.Frames.IndividualColor_r = 0
														db.Frames.IndividualColor_g = 0
														db.Frames.IndividualColor_b = 0
														db.Frames.IndividualColor_a = 0.86
													-- BAR COLORS
														db.Frames.IndividualBarColor_r = 1
														db.Frames.IndividualBarColor_g = 0.48
														db.Frames.IndividualBarColor_b = 0
														db.Frames.IndividualBarColor_a = 0.81
													-- MINIMAP COLORS
														db.Frames.IndividualMinimapColor_r = 0.85
														db.Frames.IndividualMinimapColor_g = 0.35
														db.Frames.IndividualMinimapColor_b = 0
														db.Frames.IndividualMinimapColor_a = 0.58
													-- MICRO MENU COLORS
														db.Frames.IndividualMicroMenuColor_r = 1
														db.Frames.IndividualMicroMenuColor_g = 0.54
														db.Frames.IndividualMicroMenuColor_b = 0.32
													-- TOP MENU COLORS
														db.Frames.IndividualTopMenuColor_r = 0.72
														db.Frames.IndividualTopMenuColor_g = 0.75
														db.Frames.IndividualTopMenuColor_b = 0.72
														db.Frames.IndividualTopMenuColor_a = 0.38
													-- EDITBOX COLORS
														db.Chat.Editbox.Color.r = 0.38
														db.Chat.Editbox.Color.g = 0.38
														db.Chat.Editbox.Color.b = 0.38
														db.Chat.Editbox.Color.a = 0.24
													-- ORB COLORS
														db.Frames.IndividualOrbColor_r = 0.8
														db.Frames.IndividualOrbColor_g = 0.38
														db.Frames.IndividualOrbColor_b = 0.05
													StaticPopup_Show("RELOAD_UI")
												end
											end,
									order = 13,
								},
								empty5 = {
									name = "   ",
									type = "description",
									order = 14,
								},
								header13 = {
									name = "Theme Color",
									type = "header",
									order = 15,
								},
								classColors = {
									name = "Class Colors",
									desc = "Whether you want to use Class Colors or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "toggle",
									width = "full",
									get = function() return not db.Theme.IndividualColor end,
									set = function()
												db.Theme.IndividualColor = not db.Theme.IndividualColor
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 16,
								},
								IndividualColor = {
									name = "Theme Color/Alpha",
									desc = "The background color and transparency.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "color",
									width = "full",
									disabled = function() return not db.Theme.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Theme.IndividualColor_r, db.Theme.IndividualColor_g, db.Theme.IndividualColor_b, db.Theme.IndividualColor_a end,
									set = function(_,r,g,b,a)
											db.Theme.IndividualColor_r = r
											db.Theme.IndividualColor_g = g
											db.Theme.IndividualColor_b = b
											db.Theme.IndividualColor_a = a
											
											if IsAddOnLoaded("Omen") and db.General.Omen.ThemeColor == true then
												Omen.db.profile.Bar.AggroBarColor.r = color_r
												Omen.db.profile.Bar.AggroBarColor.g = color_g
												Omen.db.profile.Bar.AggroBarColor.b = color_b
												Omen:UpdateBars()
											end
										end,
									order = 17,
								},
								header9 = {
									name = "Colors",
									type = "header",
									order = 18,
								},
								individualFrameColorEnable = {
									name = "Individual Frame Colors",
									desc = "Whether you want to use the Theme Color or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.Frames.IndividualColor end,
									set = function(self,individualFrameColorEnable)
												db.Frames.IndividualColor = not db.Frames.IndividualColor
												if individualFrameColorEnable == true then
													ChatBackground:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
													ChatBackground2:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
													ChatBackgroundFill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
													
													if IsAddOnLoaded("Omen") then
														OmenBackground:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														OmenBackgroundFill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
													end
													
													BarsBackground:SetBackdropColor(db.Frames.IndividualBarColor_r,db.Frames.IndividualBarColor_g,db.Frames.IndividualBarColor_b,db.Frames.IndividualBarColor_a)
													BarsBackground2:SetBackdropColor(db.Frames.IndividualBarColor_r,db.Frames.IndividualBarColor_g,db.Frames.IndividualBarColor_b,db.Frames.IndividualBarColor_a)
													
													if SidebarRightEnable == true then
														fsidebar_back:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,db.Frames.IndividualSidebarColor_a)
														fsidebar_back2:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
														fsidebar_bt_back:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,db.Frames.IndividualSidebarColor_a)
														fsidebar_button:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
														fsidebar_button_hover:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
													end
													
													if SidebarLeftEnable == true then
														fsidebar2_back:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,db.Frames.IndividualSidebarColor_a)
														fsidebar2_back2:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
														fsidebar2_bt_back:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,db.Frames.IndividualSidebarColor_a)
														fsidebar2_button:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
														fsidebar2_button_hover:SetBackdropColor(db.Frames.IndividualSidebarColor_r,db.Frames.IndividualSidebarColor_g,db.Frames.IndividualSidebarColor_b,1)
													end
													
													if IsAddOnLoaded("Recount") then
														RecountBackground:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														RecountBackgroundFill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
													end
													
													if IsAddOnLoaded("Grid") then
														GridBG_TL:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														GridBG_TR:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														GridBG_BL:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														GridBG_BR:SetBackdropColor(db.Frames.IndividualColor_r,db.Frames.IndividualColor_g,db.Frames.IndividualColor_b,db.Frames.IndividualColor_a)
														
														GridBG_TL_Fill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
														GridBG_TR_Fill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
														GridBG_BL_Fill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
														GridBG_BR_Fill:SetBackdropColor(db.Frames.IndividualFillColor_r,db.Frames.IndividualFillColor_g,db.Frames.IndividualFillColor_b,db.Frames.IndividualFillColor_a)
													end
													fminimap_border3:SetBackdropBorderColor(db.Frames.IndividualMinimapColor_r,db.Frames.IndividualMinimapColor_g,db.Frames.IndividualMinimapColor_b,db.Frames.IndividualMinimapColor_a)
													fminimap_border5:SetBackdropBorderColor(db.Frames.IndividualMinimapColor_r,db.Frames.IndividualMinimapColor_g,db.Frames.IndividualMinimapColor_b,db.Frames.IndividualMinimapColor_a)
													fminimap_border7:SetBackdropBorderColor(db.Frames.IndividualMinimapColor_r,db.Frames.IndividualMinimapColor_g,db.Frames.IndividualMinimapColor_b,db.Frames.IndividualMinimapColor_a)
													fminimap_border9:SetBackdropBorderColor(db.Frames.IndividualMinimapColor_r,db.Frames.IndividualMinimapColor_g,db.Frames.IndividualMinimapColor_b,db.Frames.IndividualMinimapColor_a)
													
													MicroMenuButton_Bags:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Settings:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_GM:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_LFG:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_PVP:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Guild:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Quests:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_AC:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Talents:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Spellbook:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton_Player:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r,db.Frames.IndividualMicroMenuColor_g,db.Frames.IndividualMicroMenuColor_b,1)
													MicroMenuButton:SetBackdropColor(db.Frames.IndividualMicroMenuColor_r-0.3, db.Frames.IndividualMicroMenuColor_g-0.3, db.Frames.IndividualMicroMenuColor_b-0.3,0.2)
												
													menu_button_chat:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_chat_hover:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_omen:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_omen_hover:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_recount:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_recount_hover:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_grid:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													menu_button_grid_hover:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													orb_ring6:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
													ring6:SetBackdropColor(db.Frames.IndividualTopMenuColor_r,db.Frames.IndividualTopMenuColor_g,db.Frames.IndividualTopMenuColor_b,db.Frames.IndividualTopMenuColor_a)
												else
			
													ChatBackground:SetBackdropColor(color_r,color_g,color_b,color_a)
													ChatBackground2:SetBackdropColor(color_r,color_g,color_b,color_a)
													ChatBackgroundFill:SetBackdropColor(color_r,color_g,color_b,color_a)
													
													if IsAddOnLoaded("Omen") then
														OmenBackground:SetBackdropColor(color_r,color_g,color_b,color_a)
														OmenBackgroundFill:SetBackdropColor(color_r,color_g,color_b,color_a)
													end
													
													BarsBackground:SetBackdropColor(color_r,color_g,color_b,color_a)
													BarsBackground2:SetBackdropColor(color_r,color_g,color_b,color_a)
													
													if SidebarRightEnable == true then
														fsidebar_back:SetBackdropColor(color_r,color_g,color_b,color_a)
														fsidebar_back2:SetBackdropColor(color_r,color_g,color_b,1)
														fsidebar_bt_back:SetBackdropColor(color_r,color_g,color_b,color_a)
														fsidebar_button:SetBackdropColor(color_r,color_g,color_b,1)
														fsidebar_button_hover:SetBackdropColor(color_r,color_g,color_b,1)
													end
													
													if SidebarLeftEnable == true then
														fsidebar2_back:SetBackdropColor(color_r,color_g,color_b,color_a)
														fsidebar2_back2:SetBackdropColor(color_r,color_g,color_b,1)
														fsidebar2_bt_back:SetBackdropColor(color_r,color_g,color_b,color_a)
														fsidebar2_button:SetBackdropColor(color_r,color_g,color_b,1)
														fsidebar2_button_hover:SetBackdropColor(color_r,color_g,color_b,1)
													end
													
													if IsAddOnLoaded("Recount") then
														RecountBackground:SetBackdropColor(color_r,color_g,color_b,color_a)
														RecountBackgroundFill:SetBackdropColor(color_r,color_g,color_b,color_a)
													end
													
													if IsAddOnLoaded("Grid") then
														GridBG_TL:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_TR:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_BL:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_BR:SetBackdropColor(color_r,color_g,color_b,color_a)
														
														GridBG_TL_Fill:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_TR_Fill:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_BL_Fill:SetBackdropColor(color_r,color_g,color_b,color_a)
														GridBG_BR_Fill:SetBackdropColor(color_r,color_g,color_b,color_a)
													end
													
													fminimap_border3:SetBackdropBorderColor(color_r,color_g,color_b,color_a)
													fminimap_border5:SetBackdropBorderColor(color_r,color_g,color_b,color_a)
													fminimap_border7:SetBackdropBorderColor(color_r,color_g,color_b,color_a)
													fminimap_border9:SetBackdropBorderColor(color_r,color_g,color_b,color_a)
													
													MicroMenuButton_Bags:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Settings:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_GM:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_LFG:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_PVP:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Guild:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Quests:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_AC:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Talents:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Spellbook:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton_Player:SetBackdropColor(color_r+0.25,color_g+0.25,color_b+0.25,1)
													MicroMenuButton:SetBackdropColor(color_r-0.3, color_g-0.3, color_b-0.3,0.2)
													
													menu_button_chat:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_chat_hover:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_omen:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_omen_hover:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_recount:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_recount_hover:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_grid:SetBackdropColor(color_r,color_g,color_b,color_a)
													menu_button_grid_hover:SetBackdropColor(color_r,color_g,color_b,color_a)
													orb_ring6:SetBackdropColor(color_r,color_g,color_b,0.6)
													ring6:SetBackdropColor(color_r,color_g,color_b,0.6)
												end
											end,
									order = 19,
								},
								individualFillColor = {
									name = "Frame Color",
									desc = "Choose a color for Chat/Omen/Recount/Grid.",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualFillColor_r, db.Frames.IndividualFillColor_g, db.Frames.IndividualFillColor_b, db.Frames.IndividualFillColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualFillColor_r = r
											db.Frames.IndividualFillColor_g = g
											db.Frames.IndividualFillColor_b = b
											db.Frames.IndividualFillColor_a = a
											ChatBackgroundFill:SetBackdropColor(r,g,b,a)
											
											if IsAddOnLoaded("Omen") then
												OmenBackgroundFill:SetBackdropColor(r,g,b,a)
											end
											
											if IsAddOnLoaded("Recount") then
												RecountBackgroundFill:SetBackdropColor(r,g,b,a)
											end
											
											if IsAddOnLoaded("Grid") then
												GridBG_TL_Fill:SetBackdropColor(r,g,b,a)
												GridBG_TR_Fill:SetBackdropColor(r,g,b,a)
												GridBG_BL_Fill:SetBackdropColor(r,g,b,a)
												GridBG_BR_Fill:SetBackdropColor(r,g,b,a)
											end
										end,
									order = 20,
								},
								individualFrameColor = {
									name = "Frame Border Color",
									desc = "Choose a color for Chat/Omen/Recount/Grid Border.",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualColor_r, db.Frames.IndividualColor_g, db.Frames.IndividualColor_b, db.Frames.IndividualColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualColor_r = r
											db.Frames.IndividualColor_g = g
											db.Frames.IndividualColor_b = b
											db.Frames.IndividualColor_a = a
											ChatBackground:SetBackdropColor(r,g,b,a)
											ChatBackground2:SetBackdropColor(r,g,b,a)
											if IsAddOnLoaded("Omen") then
												OmenBackground:SetBackdropColor(r,g,b,a)
											end
											if IsAddOnLoaded("Recount") then
												RecountBackground:SetBackdropColor(r,g,b,a)
											end
											if IsAddOnLoaded("Grid") then
												GridBG_TL:SetBackdropColor(r,g,b,a)
												GridBG_TR:SetBackdropColor(r,g,b,a)
												GridBG_BL:SetBackdropColor(r,g,b,a)
												GridBG_BR:SetBackdropColor(r,g,b,a)
											end
										end,
									order = 21,
								},
								individualBarColor = {
									name = "Bar Color",
									desc = "Choose any Bar Frame Color",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualBarColor_r, db.Frames.IndividualBarColor_g, db.Frames.IndividualBarColor_b, db.Frames.IndividualBarColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualBarColor_r = r
											db.Frames.IndividualBarColor_g = g
											db.Frames.IndividualBarColor_b = b
											db.Frames.IndividualBarColor_a = a
											BarsBackground:SetBackdropColor(r,g,b,a)
											BarsBackground2:SetBackdropColor(r,g,b,a)
										end,
									order = 22,
								},
								individualSidebarColor = {
									name = "Sidebar Color",
									desc = "Choose any color for your Sidebars",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualSidebarColor_r, db.Frames.IndividualSidebarColor_g, db.Frames.IndividualSidebarColor_b, db.Frames.IndividualSidebarColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualSidebarColor_r = r
											db.Frames.IndividualSidebarColor_g = g
											db.Frames.IndividualSidebarColor_b = b
											db.Frames.IndividualSidebarColor_a = a
									
											--if SidebarRightEnable == true then
												fsidebar_back:SetBackdropColor(r,g,b,a)
												fsidebar_back2:SetBackdropColor(r,g,b,1)
												fsidebar_bt_back:SetBackdropColor(r,g,b,a)
												fsidebar_button:SetBackdropColor(r,g,b,1)
												fsidebar_button_hover:SetBackdropColor(r,g,b,1)
											--end
											
											--if SidebarLeftEnable == true then
												fsidebar2_back:SetBackdropColor(r,g,b,a)
												fsidebar2_back2:SetBackdropColor(r,g,b,1)
												fsidebar2_bt_back:SetBackdropColor(r,g,b,a)
												fsidebar2_button:SetBackdropColor(r,g,b,1)
												fsidebar2_button_hover:SetBackdropColor(r,g,b,1)
											--end
										end,
									order = 23,
								},
								individualMinimapColor = {
									name = "Minimap Color",
									desc = "Choose any Minimap Color",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualMinimapColor_r, db.Frames.IndividualMinimapColor_g, db.Frames.IndividualMinimapColor_b, db.Frames.IndividualMinimapColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualMinimapColor_r = r
											db.Frames.IndividualMinimapColor_g = g
											db.Frames.IndividualMinimapColor_b = b
											db.Frames.IndividualMinimapColor_a = a
											fminimap_border3:SetBackdropBorderColor(r,g,b,a)
											fminimap_border5:SetBackdropBorderColor(r,g,b,a)
											fminimap_border7:SetBackdropBorderColor(r,g,b,a)
											fminimap_border9:SetBackdropBorderColor(r,g,b,a)
										end,
									order = 24,
								},
								individualMicroMenuColor = {
									name = "MicroMenu Color",
									desc = "Choose any MicroMenu Color",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = false,
									get = function() return db.Frames.IndividualMicroMenuColor_r, db.Frames.IndividualMicroMenuColor_g, db.Frames.IndividualMicroMenuColor_b end,
									set = function(_,r,g,b)
											db.Frames.IndividualMicroMenuColor_r = r
											db.Frames.IndividualMicroMenuColor_g = g
											db.Frames.IndividualMicroMenuColor_b = b
											MicroMenuButton_Bags:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Settings:SetBackdropColor(r,g,b,1)
											MicroMenuButton_GM:SetBackdropColor(r,g,b,1)
											MicroMenuButton_LFG:SetBackdropColor(r,g,b,1)
											MicroMenuButton_PVP:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Guild:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Quests:SetBackdropColor(r,g,b,1)
											MicroMenuButton_AC:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Talents:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Spellbook:SetBackdropColor(r,g,b,1)
											MicroMenuButton_Player:SetBackdropColor(r,g,b,1)
											MicroMenuButton:SetBackdropColor(r-0.3, g-0.3, b-0.3,0.2)
										end,
									order = 25,
								},
								individualTopMenuColor = {
									name = "TopMenu Color",
									desc = "Choose any Color for the TopMenu",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = true,
									get = function() return db.Frames.IndividualTopMenuColor_r, db.Frames.IndividualTopMenuColor_g, db.Frames.IndividualTopMenuColor_b, db.Frames.IndividualTopMenuColor_a end,
									set = function(_,r,g,b,a)
											db.Frames.IndividualTopMenuColor_r = r
											db.Frames.IndividualTopMenuColor_g = g
											db.Frames.IndividualTopMenuColor_b = b
											db.Frames.IndividualTopMenuColor_a = a
											menu_button_chat:SetBackdropColor(r,g,b,a)
											menu_button_chat_hover:SetBackdropColor(r,g,b,a)
											menu_button_omen:SetBackdropColor(r,g,b,a)
											menu_button_omen_hover:SetBackdropColor(r,g,b,a)
											menu_button_recount:SetBackdropColor(r,g,b,a)
											menu_button_recount_hover:SetBackdropColor(r,g,b,a)
											menu_button_grid:SetBackdropColor(r,g,b,a)
											menu_button_grid_hover:SetBackdropColor(r,g,b,a)
											orb_ring6:SetBackdropColor(r,g,b,a)
											ring6:SetBackdropColor(r,g,b,a)
										end,
									order = 26,
								},
								individualOrbColor = {
									name = "Orb Color",
									desc = "Choose any Color for the Orb.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "color",
									width = "full",
									disabled = function() return not db.Frames.IndividualColor end,
									hasAlpha = false,
									get = function() return db.Frames.IndividualOrbColor_r, db.Frames.IndividualOrbColor_g, db.Frames.IndividualOrbColor_b end,
									set = function(_,r,g,b)
											db.Frames.IndividualOrbColor_r = r
											db.Frames.IndividualOrbColor_g = g
											db.Frames.IndividualOrbColor_b = b
										end,
									order = 27,
								},
								header9fu ={
									name = "Texture Options",
									type = "header",
									order = 28,
								},
								UseFullTexture_Chat = {
									name = "Enable Gradient Chat Texture",
									desc = "Wether you want to use gradient or nonAlpha Frame Textures",
									type = "toggle",
									width = "full",
									get = function() return not db.Frames.UseFullTexture_Chat end,
									set = function(self, UseFullTexture_Chat)
										db.Frames.UseFullTexture_Chat = not db.Frames.UseFullTexture_Chat
										
										if db.Frames.UseFullTexture_Chat == true then
										ChatBackgroundFill:SetBackdrop({bgFile=fdir.."chat_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										ChatBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										ChatBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										
											if db.Chat.SecondChatFrame == true then
												ChatBackground2Fill:SetBackdrop({bgFile=fdir.."grid_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
												ChatBackground2Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
												ChatBackground2Fill:SetBackdropBorderColor(0,0,0,0)
											end
										else
										ChatBackgroundFill:SetBackdrop({bgFile=fdir.."chat_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										ChatBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										ChatBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										
											if db.Chat.SecondChatFrame == true then
												ChatBackground2Fill:SetBackdrop({bgFile=fdir.."grid_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
												ChatBackground2Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
												ChatBackground2Fill:SetBackdropBorderColor(0,0,0,0)
											end
										end
										
										end,
									order = 29,
								},
								UseFullTexture_Omen = {
									name = "Enable Gradient Omen Texture",
									desc = "Wether you want to use gradient or nonAlpha Frame Textures",
									type = "toggle",
									width = "full",
									get = function() return not db.Frames.UseFullTexture_Omen end,
									set = function(self, UseFullTexture_Omen)
										db.Frames.UseFullTexture_Omen = not db.Frames.UseFullTexture_Omen
										
										if db.Frames.UseFullTexture_Omen == true then
										OmenBackgroundFill:SetBackdrop({bgFile=fdir.."omen_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										OmenBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										OmenBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										else
										OmenBackgroundFill:SetBackdrop({bgFile=fdir.."omen_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										OmenBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										OmenBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										end
										
										end,
									order = 30,
								},
								UseFullTexture_Recount = {
									name = "Enable Gradient Recount Texture",
									desc = "Wether you want to use gradient or nonAlpha Frame Textures",
									type = "toggle",
									width = "full",
									get = function() return not db.Frames.UseFullTexture_Recount end,
									set = function(self, UseFullTexture_Recount)
										db.Frames.UseFullTexture_Recount = not db.Frames.UseFullTexture_Recount
										
										if db.Frames.UseFullTexture_Recount == true then
										RecountBackgroundFill:SetBackdrop({bgFile=fdir.."omen_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										RecountBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										RecountBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										else
										RecountBackgroundFill:SetBackdrop({bgFile=fdir.."omen_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										RecountBackgroundFill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										RecountBackgroundFill:SetBackdropBorderColor(0,0,0,0)
										end
										
										end,
									order = 31,
								},
								UseFullTexture_Grid = {
									name = "Enable Gradient Grid Texture",
									desc = "Wether you want to use gradient or nonAlpha Frame Textures",
									type = "toggle",
									width = "full",
									get = function() return not db.Frames.UseFullTexture_Grid end,
									set = function(self, UseFullTexture_Grid)
										db.Frames.UseFullTexture_Grid = not db.Frames.UseFullTexture_Grid
										
										if db.Frames.UseFullTexture_Grid == true then
										GridBG_TL_Fill:SetBackdrop({bgFile=fdir.."grid_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_TL_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_TL_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_TR_Fill:SetBackdrop({bgFile=fdir.."chat_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_TR_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_TR_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_BL_Fill:SetBackdrop({bgFile=fdir.."grid2_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_BL_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_BL_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_BR_Fill:SetBackdrop({bgFile=fdir.."chat2_full.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_BR_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_BR_Fill:SetBackdropBorderColor(0,0,0,0)
										else
										GridBG_TL_Fill:SetBackdrop({bgFile=fdir.."grid_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_TL_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_TL_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_TR_Fill:SetBackdrop({bgFile=fdir.."chat_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_TR_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_TR_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_BL_Fill:SetBackdrop({bgFile=fdir.."grid2_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_BL_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_BL_Fill:SetBackdropBorderColor(0,0,0,0)
										
										GridBG_BR_Fill:SetBackdrop({bgFile=fdir.."chat2_half.tga", edgeFile="Interface\\Tooltips\\UI-Tooltip-Border", tile=0, tileSize=0, edgeSize=1, insets={left=0, right=0, top=0, bottom=0}})
										GridBG_BR_Fill:SetBackdropColor(fill_r, fill_g, fill_b, fill_a)
										GridBG_BR_Fill:SetBackdropBorderColor(0,0,0,0)
										end
										
										end,
									order = 32,
								},
							},
						},
						Omen = {
							name = "Omen",
							type = "group",
							desc = "Omen Options",
							disabled = function()
									if IsAddOnLoaded("Omen") then
										return false
									else
										return true
									end
								end,
							order = 5,
							args = {
								header1 = {
									name = "Omen",
									type = "header",
									order = 1,
								},
								Position = {
									name = "Position",
									type = "group",
									order = 3,
									guiInline = true,
									args = {
										OmenX = {
											name = "X Value",
											desc = "X Value for your Omen.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Omen.X,
											type = "input",
											get = function() return db.General.Omen.X end,
											set = function(self,OmenX)
														if OmenX == nil or OmenX == "" then
															OmenX = "0"
														end
														db.General.Omen.X = OmenX
														Position:SetFramePosition('lui_omen')
													end,
											order = 1,
										},
										OmenY = {
											name = "Y Value",
											desc = "Y Value for your Omen.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.General.Omen.Y,
											type = "input",
											get = function() return db.General.Omen.Y end,
											set = function(self,OmenY)
														if OmenY == nil or OmenY == "" then
															OmenY = "0"
														end
														db.General.Omen.Y = OmenY
														Position:SetFramePosition('lui_omen')
													end,
											order = 2,
										},
									},
								},
								AggroBarColor = {
									name = "AggroBar Color",
									type = "group",
									order = 4,
									guiInline = true,
									args = {
										IndividualColor = {
											name = "Individual Color",
											desc = "Whether you want to use an individual AggroBar Color or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.General.Omen.IndividualAggrobarColor end,
											set = function(self,IndividualColor)
													db.General.Omen.IndividualAggrobarColor = not db.General.Omen.IndividualAggrobarColor
													if IndividualColor == true then
														if db.General.Omen.ThemeColor == true then
															db.General.Omen.ThemeColor = false
														end
														
														Omen.db.profile.Bar.AggroBarColor.r = db.General.Omen.AggroBarColor.r
														Omen.db.profile.Bar.AggroBarColor.g = db.General.Omen.AggroBarColor.g
														Omen.db.profile.Bar.AggroBarColor.b = db.General.Omen.AggroBarColor.b
														Omen:UpdateBars()
													end
												end,
											order = 1,
										},
										ThemeColor = {
											name = "Use Theme Color",
											desc = "Whether you want to use your Theme Color as AggroBar Color or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.General.Omen.ThemeColor end,
											set = function(self,ThemeColor)
													db.General.Omen.ThemeColor = not db.General.Omen.ThemeColor
													if ThemeColor == true then
														if db.General.Omen.IndividualAggrobarColor == true then
															db.General.Omen.IndividualAggrobarColor = false
														end
														
														Omen.db.profile.Bar.AggroBarColor.r = color_r
														Omen.db.profile.Bar.AggroBarColor.g = color_g
														Omen.db.profile.Bar.AggroBarColor.b = color_b
														Omen:UpdateBars()
													end
												end,
											order = 2,
										},
										Color = {
											name = "AggroBar Color",
											desc = "Choose an individual AggroBar Color.",
											type = "color",
											width = "full",
											disabled = function() return not db.General.Omen.IndividualAggrobarColor end,
											hasAlpha = false,
											get = function() return db.General.Omen.AggroBarColor.r, db.General.Omen.AggroBarColor.g, db.General.Omen.AggroBarColor.b end,
											set = function(_,r,g,b)
													db.General.Omen.AggroBarColor.r = r
													db.General.Omen.AggroBarColor.g = g
													db.General.Omen.AggroBarColor.b = b
													
													Omen.db.profile.Bar.AggroBarColor.r = r
													Omen.db.profile.Bar.AggroBarColor.g = g
													Omen.db.profile.Bar.AggroBarColor.b = b
													Omen:UpdateBars()
												end,
											order = 3,
										},
									},
								},
							},
						},
						Recount = {
							name = "Recount",
							type = "group",
							order = 6,
							disabled = function()
									if IsAddOnLoaded("Recount") then
										return false
									else
										return true
									end
								end,
							args = {
								header1 = {
									name = "Recount",
									type = "header",
									order = 1,
								},
								RecountX = {
									name = "X Value",
									desc = "X Value for your Recount.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Recount.X,
									type = "input",
									get = function() return db.General.Recount.X end,
									set = function(self,RecountX)
												if RecountX == nil or RecountX == "" then
													RecountX = "0"
												end
												db.General.Recount.X = RecountX
												Position:SetFramePosition('lui_recount')
											end,
									order = 3,
								},
								RecountY = {
									name = "Y Value",
									desc = "Y Value for your Recount.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.General.Recount.Y,
									type = "input",
									get = function() return db.General.Recount.Y end,
									set = function(self,RecountY)
												if RecountY == nil or RecountY == "" then
													RecountY = "0"
												end
												db.General.Recount.Y = RecountY
												Position:SetFramePosition('lui_recount')
											end,
									order = 4,
								},
							},
						},
						Grid = {
							name = "Grid",
							type = "group",
							order = 7,
							disabled = function()
									if IsAddOnLoaded("Grid") then
										return false
									else
										return true
									end
								end,
							args = {
								header1 = {
									name = "Grid",
									type = "header",
									order = 1,
								},
								GridIntro = {
									order = 2,
									width = "full",
									type = "description",
									name = "Type /grid config to Enter Grid OptionPanel.\nGo to Layout -> Advanced to set an Anchor and Group Anchor.\n",
								},
								GridX = {
									name = "X Value",
									desc = "X Value for your Grid.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Grid.X,
									type = "input",
									get = function() return db.General.Grid.X end,
									set = function(self,GridX)
												if GridX == nil or GridX == "" then
													GridX = "0"
												end
												db.General.Grid.X = GridX
												Position:SetFramePosition('lui_grid')
											end,
									order = 3,
								},
								GridY = {
									name = "Y Value",
									desc = "Y Value for your Grid.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.General.Grid.Y,
									type = "input",
									get = function() return db.General.Grid.Y end,
									set = function(self,GridY)
												if GridY == nil or GridY == "" then
													GridY = "0"
												end
												db.General.Grid.Y = GridY
												Position:SetFramePosition('lui_grid')
											end,
									order = 4,
								},
								GridBG = {
									name = "Background Texture",
									desc = "Choose the Background Texture for GridFrame\n\nDefault: "..defaults.profile.General.Grid.Background,
									type = "select",
									values = frameBackgrounds,
									get = function()
											for k, v in pairs(frameBackgrounds) do
												if db.General.Grid.Background == v then
													return k
												end
											end
										end,
									set = function(self, GridBG)
											db.General.Grid.Background = frameBackgrounds[GridBG]
											SetGridBG()
										end,
									order = 5,
								},
								GridBGWidth = {
									name = "Background Width",
									desc = "Define your Grid Backround Width\nDefault: "..defaults.profile.General.Grid.Width,
									type = "input",
									get = function() return db.General.Grid.Width end,
									set = function(self,GridBGWidth)
												if GridBGWidth == nil or GridBGWidth == "" then
													GridBGWidth = "0"
												end
												db.General.Grid.Width = GridBGWidth
												SetGridBG()
											end,
									order = 6,
								},
							},
						},
						ForteXorcist = {
							name = "ForteXorcist",
							type = "group",
							order = 8,
							childGroups = "tab",
							args = {
								header1 = {
									name = "ForteXorcist",
									type = "header",
									order = 1,
								},
								Spelltimer = {
									name = "Spelltimer",
									type = "group",
									disabled = function()
											if IsAddOnLoaded("Forte_Core") and IsAddOnLoaded("Forte_Timer") then
												if FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Enable"] ~= nil then
													if FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Enable"] == true then
														return false
													else
														return true
													end
												else
													return true
												end
											else
												return true
											end
										end,
									order = 2,
									args = {
										Position = {
											name = "Position",
											type = "group",
											order = 1,
											guiInline = true,
											args = {
												ForteLock = {
													name = "Lock Spelltimer",
													desc = "Whether the Spelltimer should stick to your PlayerFrame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.Lock end,
													set = function(self,ForteLock)
															db.General.Forte.Lock = not db.General.Forte.Lock
															if ForteLock == true then
																SetPosForte()
															end
														end,
													order = 1,
												},
												PaddingX = {
													name = "Padding X",
													desc = "Choose the X Padding for your Forte SpellTimer.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Forte.Timer_PaddingX,
													type = "input",
													get = function() return db.General.Forte.Timer_PaddingX end,
													set = function(self,PaddingX)
															if PaddingX == nil or PaddingX == "" then
																PaddingX = "0"
															end
															db.General.Forte.Timer_PaddingX = PaddingX
															SetPosForte()
														end,
													order = 2,
												},
												PaddingY = {
													name = "Padding Y",
													desc = "Choose the Y Padding for your Forte SpellTimer.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.General.Forte.Timer_PaddingY,
													type = "input",
													get = function() return db.General.Forte.Timer_PaddingY end,
													set = function(self,PaddingY)
															if PaddingY == nil or PaddingY == "" then
																PaddingY = "0"
															end
															db.General.Forte.Timer_PaddingY = PaddingY
															SetPosForte()
														end,
													order = 3,
												},
											},
										},
										Colors = {
											name = "Colors",
											type = "group",
											order = 2,
											guiInline = true,
											args = {
												header1 = {
													name = "Bar Color",
													type = "header",
													order = 1,
												},
												IndividualColor = {
													name = "Individual Color",
													desc = "Whether you want to use an individual Color for all your tracked Buffs/Debuffs or not.\n\nNote: If you want different colors for each of your spells please disable both options (HealthbarColor/Individual Color) and type /fx to enter FortExorcist Options and go to Spelltimer -> Coloring/Filtering",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.IndividualColor end,
													set = function(self,IndividualColor)
															db.General.Forte.IndividualColor = not db.General.Forte.IndividualColor
															if IndividualColor == true then
																if db.General.Forte.UseHealthbarColor == true then
																	db.General.Forte.UseHealthbarColor = false
																end
																
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HighlightColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CooldownsColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DebuffsColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HealColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FailColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CrowdColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["BuffColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FriendlyBuffColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CurseColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["PetColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["MagicColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DrainColor"] = {db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SelfDebuffColor"] = {tonumber(db.General.Forte.Color.r) -0.1, tonumber(db.General.Forte.Color.g) -0.1, tonumber(db.General.Forte.Color.b) -0.1}
																FW:RefreshFrames()
															end
														end,
													order = 2,
												},
												HealthbarColor = {
													name = "Use Healthbar Color",
													desc = "Whether you want to use your Healthbar Color as Bar Color for all your tracked Buffs/Debuffs or not.\n\nNote: If you want different colors for each of your spells please disable both options (HealthbarColor/Individual Color) and type /fx to enter FortExorcist Options and go to Spelltimer -> Coloring/Filtering.",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.UseHealthbarColor end,
													set = function(self,HealthbarColor)
															db.General.Forte.UseHealthbarColor = not db.General.Forte.UseHealthbarColor
															if HealthbarColor == true then
																if db.General.Forte.IndividualColor == true then
																	db.General.Forte.IndividualColor = false
																end
																
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HighlightColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CooldownsColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DebuffsColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HealColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FailColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CrowdColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["BuffColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FriendlyBuffColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CurseColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["PetColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["MagicColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DrainColor"] = {db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b}
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SelfDebuffColor"] = {tonumber(db.oUF.Player.Health.IndividualColor.r) -0.1, tonumber(db.oUF.Player.Health.IndividualColor.g) -0.1, tonumber(db.oUF.Player.Health.IndividualColor.b) -0.1}
																
																FW:RefreshFrames()
															end
														end,
													order = 3,
												},
												Color = {
													name = "Bar Color",
													desc = "Choose an individual Bar Color.",
													type = "color",
													width = "full",
													disabled = function() return not db.General.Forte.IndividualColor end,
													hasAlpha = false,
													get = function() return db.General.Forte.Color.r, db.General.Forte.Color.g, db.General.Forte.Color.b end,
													set = function(_,r,g,b)
															db.General.Forte.Color.r = r
															db.General.Forte.Color.g = g
															db.General.Forte.Color.b = b
															
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HighlightColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CooldownsColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DebuffsColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["HealColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FailColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CrowdColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["BuffColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["FriendlyBuffColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["CurseColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["PetColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["MagicColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["DrainColor"] = {r, g, b}
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SelfDebuffColor"] = {tonumber(r) -0.1, tonumber(g) -0.1, tonumber(b) -0.1}
															FW:RefreshFrames()
														end,
													order = 4,
												},
												header2 = {
													name = "Spark Color",
													type = "header",
													order = 5,
												},
												IndividualSparkColor = {
													name = "Individual Spark Color",
													desc = "Whether you want to use an individual Spark Color for all your tracked Buffs/Debuffs or not.",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.IndividualSparkColor end,
													set = function(self,IndividualSparkColor)
															db.General.Forte.IndividualSparkColor = not db.General.Forte.IndividualSparkColor
															if IndividualSparkColor == true then
																if db.General.Forte.UseThemeColor == true then
																	db.General.Forte.UseThemeColor = false
																end
																
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SparkColor"] = {db.General.Forte.SparkColor.r, db.General.Forte.SparkColor.g, db.General.Forte.SparkColor.b}
																FW:RefreshFrames()
															end
														end,
													order = 6,
												},
												UseThemeColor = {
													name = "Use Theme Color",
													desc = "Whether you want to use your Theme Color as Spark Color for all your tracked Buffs/Debuffs or not.",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.UseThemeColor end,
													set = function(self,UseThemeColor)
															db.General.Forte.UseThemeColor = not db.General.Forte.UseThemeColor
															if UseThemeColor == true then
																if db.General.Forte.IndividualSparkColor == true then
																	db.General.Forte.IndividualSparkColor = false
																end
																FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SparkColor"] = {color_r, color_g, color_b, 0.5}
																FW:RefreshFrames()
															end
														end,
													order = 7,
												},
												SparkColor = {
													name = "Spark Color",
													desc = "Choose an individual Spark Color.",
													type = "color",
													width = "full",
													disabled = function() return not db.General.Forte.IndividualSparkColor end,
													hasAlpha = false,
													get = function() return db.General.Forte.SparkColor.r, db.General.Forte.SparkColor.g, db.General.Forte.SparkColor.b end,
													set = function(_,r,g,b)
															db.General.Forte.SparkColor.r = r
															db.General.Forte.SparkColor.g = g
															db.General.Forte.SparkColor.b = b
															
															FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["SparkColor"] = {r, g, b, 0.5}
															FW:RefreshFrames()
														end,
													order = 8,
												},
											},
										},
									},
								},
								Cooldowntimer = {
									name = "Cooldowntimer",
									type = "group",
									disabled = function()
											if IsAddOnLoaded("Forte_Core") and IsAddOnLoaded("Forte_Cooldown") then
												if FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["Enable"] ~= nil then
													if FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["Enable"] == true then
														return false
													else
														return true
													end
												else
													return true
												end
											else
												return true
											end
										end,
									order = 3,
									args = {
										Position = {
											name = "Position",
											type = "group",
											order = 1,
											guiInline = true,
											args = {
												ForteCDLock = {
													name = "Lock Cooldown Timer",
													desc = "Whether the Cooldown Timer should stick to your Bar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.General.Forte.CDLock end,
													set = function(self,ForteCDLock)
															db.General.Forte.CDLock = not db.General.Forte.CDLock
															if ForteCDLock ~= false then
																SetPosForteCooldown()
															end
														end,
													order = 1,
												},
												PaddingX = {
													name = "Padding X",
													desc = "Choose the X Padding for your Forte Cooldowntimer.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Forte.Cooldown_PaddingX,
													type = "input",
													get = function() return db.General.Forte.Cooldown_PaddingX end,
													set = function(self,PaddingX)
															if PaddingX == nil or PaddingX == "" then
																PaddingX = "0"
															end
															db.General.Forte.Cooldown_PaddingX = PaddingX
															SetPosForteCooldown()
														end,
													order = 2,
												},
												PaddingY = {
													name = "Padding Y",
													desc = "Choose the Y Padding for your Forte Cooldowntimer.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.General.Forte.Cooldown_PaddingY,
													type = "input",
													get = function() return db.General.Forte.Cooldown_PaddingY end,
													set = function(self,PaddingY)
															if PaddingY == nil or PaddingY == "" then
																PaddingY = "0"
															end
															db.General.Forte.Cooldown_PaddingY = PaddingY
															SetPosForteCooldown()
														end,
													order = 3,
												},
											},
										},
									},
								},
							},
						},
						DamageFont = {
							name = "DamageFont",
							type = "group",
							order = 3,
							args = {
								header91 = {
									name = "Damage Font/Size",
									type = "header",
									order = 22,
								},
								DamageFont = {
									name = "Font",
									desc = "Choose your Font!\n\nNote:\nYou have to Relog!.\nType /rl\n\nDefault: neuropol",
									type = "select",
									dialogControl = "LSM30_Font",
									values = widgetLists.font,
									get = function()
											return db.General.DamageFont
										end,
									set = function(self, DamageFont)
											db.General.DamageFont = DamageFont
										end,
									order = 23,
								},
								empty3445 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 24,
								},
								DamageFontSize = {
									name = "Fontsize",
									desc = "Choose your Fontsize!\n\nNote:\nYou have to Relog!.\nType /rl\n\nDefault: 38",
									type = "range",
									min = 20,
									max = 60,
									step = 1,
									get = function() return db.General.DamageFontSize end,
									set = function(_, DamageFontSize) 
												db.General.DamageFontSize = DamageFontSize
											end,
									order = 25,
								},
								empty34456 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 26,
								},
								DamageFontSizeCrit = {
									name = "Fontsize Crits",
									desc = "Choose your Fontsize for Crits!\n\nNote:\nYou have to Relog!.\nType /rl\n\nDefault: 41",
									type = "range",
									min = 20,
									max = 60,
									step = 1,
									get = function() return db.General.DamageFontSizeCrit end,
									set = function(_, DamageFontSizeCrit) 
												db.General.DamageFontSizeCrit = DamageFontSizeCrit
											end,
									order = 27,
								},
							},
						},
						InfoText = {
							name = "Info Text",
							type = "group",
							order = 4,
							args = {
								header91 = {
									name = "Info Text",
									type = "header",
									order = 1,
								},
								empty34452262211 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 2,
								},
								InfoTextIntro = {
									order = 3,
									width = "full",
									type = "description",
									name = "Change Font/Size/Color of your Info Texts like Goldamount, Bags, Durability...",
								},
								InfoFont = {
									name = "Font",
									desc = "Choose your Font!\n\nDefault: vibroceb",
									type = "select",
									dialogControl = "LSM30_Font",
									values = widgetLists.font,
									get = function()
											return db.General.InfoFont
										end,
									set = function(self, InfoFont)
											db.General.InfoFont = InfoFont
											Text_fps:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											Text_mb:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											Text_bags:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											Text_dura:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											Text_gold:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											Text_time:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
											GString:SetFont(LSM:Fetch("font", InfoFont), db.General.InfoFontSize)
										end,
									order = 4,
								},
								empty3445221 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 5,
								},
								InfoFontSize = {
									name = "Fontsize",
									desc = "Choose your Fontsize!\n\nDefault: 12",
									type = "range",
									min = 5,
									max = 25,
									step = 1,
									get = function() return db.General.InfoFontSize end,
									set = function(_, InfoFontSize) 
											db.General.InfoFontSize = InfoFontSize
											Text_fps:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											Text_mb:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											Text_bags:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											Text_dura:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											Text_gold:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											Text_time:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
											GString:SetFont(LSM:Fetch("font", db.General.InfoFont), InfoFontSize)
										end,
									order = 6,
								},
								empty3445622 = {
									name = "   ",
									width = "full",
									type = "description",
									order = 7,
								},
								InfoColor = {
									name = "Color",
									desc = "Choose an individual Info Text Color.",
									type = "color",
									width = "full",
									hasAlpha = false,
									get = function() return db.General.InfoColor.r, db.General.InfoColor.g, db.General.InfoColor.b end,
									set = function(_,r,g,b)
											db.General.InfoColor.r = r
											db.General.InfoColor.g = g
											db.General.InfoColor.b = b
											Text_fps:SetTextColor(r, g, b)
											Text_mb:SetTextColor(r, g, b)
											Text_bags:SetTextColor(r, g, b)
											Text_dura:SetTextColor(r, g, b)
											Text_gold:SetTextColor(r, g, b)
											Text_time:SetTextColor(r, g, b)
											GString:SetTextColor(r, g, b)
										end,
									order = 8,
								},
								header92 = {
									name = "Gold",
									type = "header",
									order = 9,
								},
								GoldEnable = {
									name = "Enable",
									desc = "Whether you want to show your Gold Amount or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Gold.Enable end,
									set = function(self, GoldEnable)
												db.General.Info.Gold.Enable = not db.General.Info.Gold.Enable
												if GoldEnable == true then
													Text_gold:Show()
												else
													Text_gold:Hide()
												end
											end,
									order = 10,
								},
								GoldX = {
									name = "X Value",
									desc = "X Value for your Gold Amount.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Gold.X,
									type = "input",
									disabled = function() return not db.General.Info.Gold.Enable end,
									get = function() return db.General.Info.Gold.X end,
									set = function(self,GoldX)
												if GoldX == nil or GoldX == "" then
													GoldX = "0"
												end
												db.General.Info.Gold.X = GoldX
												Text_gold:SetPoint("CENTER", infos_left, "CENTER", GoldX, db.General.Info.Gold.Y)
											end,
									order = 11,
								},
								GoldY = {
									name = "Y Value",
									desc = "Y Value for your Gold Amount.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Gold.Y,
									type = "input",
									disabled = function() return not db.General.Info.Gold.Enable end,
									get = function() return db.General.Info.Gold.Y end,
									set = function(self,GoldY)
												if GoldY == nil or GoldY == "" then
													GoldY = "0"
												end
												db.General.Info.Gold.Y = GoldY
												Text_gold:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Gold.X, GoldY)
											end,
									order = 12,
								},
								header93 = {
									name = "Clock",
									type = "header",
									order = 13,
								},
								ClockEnable = {
									name = "Enable",
									desc = "Whether you want to show your Clock or not.\n",
									type = "toggle",
									get = function() return db.General.Info.Clock.Enable end,
									set = function(self, ClockEnable)
												db.General.Info.Clock.Enable = not db.General.Info.Clock.Enable
												if ClockEnable == true then
													Text_time:Show()
												else
													Text_time:Hide()
												end
											end,
									order = 14,
								},
								ShowInstanceDifficulty = {
									name = "Show Instance Difficulty",
									desc = "Whether you want to show the Instance Difficulty or not.\n",
									type = "toggle",
									get = function() return db.General.Info.Clock.ShowInstanceDifficulty end,
									set = function(self, ShowInstanceDifficulty)
												db.General.Info.Clock.ShowInstanceDifficulty = not db.General.Info.Clock.ShowInstanceDifficulty
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 15,
								},
								EnableLocalTime = {
									name = "Local Time",
									desc = "Whether you want to show your Local Time or Server Time.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "toggle",
									width = "50%",
									disabled = function() return not db.General.Info.Clock.Enable end,
									get = function() return db.General.Info.Clock.LocalTime end,
									set = function(self, EnableLocalTime)
												db.General.Info.Clock.LocalTime = not db.General.Info.Clock.LocalTime
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 16,
								},
								EnableTime24 = {
									name = "24h Clock",
									desc = "Whether you want to show 24 or 12 hour Clock.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "toggle",
									width = "50%",
									disabled = function() return not db.General.Info.Clock.Enable end,
									get = function() return db.General.Info.Clock.Time24 end,
									set = function(self, EnableTime24)
												db.General.Info.Clock.Time24 = not db.General.Info.Clock.Time24
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 17,
								},
								ClockX = {
									name = "X Value",
									desc = "X Value for your Clock.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Clock.X,
									type = "input",
									disabled = function() return not db.General.Info.Clock.Enable end,
									get = function() return db.General.Info.Clock.X end,
									set = function(self,ClockX)
												if ClockX == nil or ClockX == "" then
													ClockX = "0"
												end
												db.General.Info.Clock.X = ClockX
												Text_time:SetPoint("CENTER", infos_right, "CENTER", ClockX, db.General.Info.Clock.Y)
											end,
									order = 18,
								},
								ClockY = {
									name = "Y Value",
									disabled = function() return not db.General.Info.Clock.Enable end,
									desc = "Y Value for your Clock.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Clock.Y,
									type = "input",
									get = function() return db.General.Info.Clock.Y end,
									set = function(self,ClockY)
												if ClockY == nil or ClockY == "" then
													ClockY = "0"
												end
												db.General.Info.Clock.Y = ClockY
												Text_time:SetPoint("CENTER", infos_right, "CENTER", db.General.Info.Clock.X, ClockY)
											end,
									order = 19,
								},
								header94 = {
									name = "Bags",
									type = "header",
									order = 20,
								},
								BagsEnable = {
									name = "Enable",
									desc = "Whether you want to show your Bag Status or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Bags.Enable end,
									set = function(self, BagsEnable)
												db.General.Info.Bags.Enable = not db.General.Info.Bags.Enable
												if BagsEnable == true then
													Text_bags:Show()
												else
													Text_bags:Hide()
												end
											end,
									order = 21,
								},
								BagsX = {
									name = "X Value",
									desc = "X Value for your Bags Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Bags.X,
									type = "input",
									disabled = function() return not db.General.Info.Bags.Enable end,
									get = function() return db.General.Info.Bags.X end,
									set = function(self,BagsX)
												if BagsX == nil or BagsX == "" then
													BagsX = "0"
												end
												db.General.Info.Bags.X = BagsX
												Text_bags:SetPoint("CENTER", infos_left, "CENTER", BagsX, db.General.Info.Bags.Y)
											end,
									order = 22,
								},
								BagsY = {
									name = "Y Value",
									desc = "Y Value for your Bags Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Bags.Y,
									type = "input",
									disabled = function() return not db.General.Info.Bags.Enable end,
									get = function() return db.General.Info.Bags.Y end,
									set = function(self,BagsY)
												if BagsY == nil or BagsY == "" then
													BagsY = "0"
												end
												db.General.Info.Bags.Y = BagsY
												Text_bags:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Bags.X, BagsY)
											end,
									order = 23,
								},
								header95 = {
									name = "Durability",
									type = "header",
									order = 24,
								},
								ArmorEnable = {
									name = "Enable",
									desc = "Whether you want to show your Durability or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Armor.Enable end,
									set = function(self, ArmorEnable)
												db.General.Info.Armor.Enable = not db.General.Info.Armor.Enable
												if ArmorEnable == true then
													Text_dura:Show()
												else
													Text_dura:Hide()
												end
											end,
									order = 25,
								},
								ArmorX = {
									name = "X Value",
									desc = "X Value for your Durability.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Armor.X,
									type = "input",
									disabled = function() return not db.General.Info.Armor.Enable end,
									get = function() return db.General.Info.Armor.X end,
									set = function(self,ArmorX)
												if ArmorX == nil or ArmorX == "" then
													ArmorX = "0"
												end
												db.General.Info.Armor.X = ArmorX
												Text_dura:SetPoint("CENTER", infos_left, "CENTER", ArmorX, db.General.Info.Armor.Y)
											end,
									order = 26,
								},
								ArmorY = {
									name = "Y Value",
									desc = "Y Value for your Durability.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Armor.Y,
									type = "input",
									disabled = function() return not db.General.Info.Armor.Enable end,
									get = function() return db.General.Info.Armor.Y end,
									set = function(self,ArmorY)
												if ArmorY == nil or ArmorY == "" then
													ArmorY = "0"
												end
												db.General.Info.Armor.Y = ArmorY
												Text_dura:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Armor.X, ArmorY)
											end,
									order = 27,
								},
								header96 = {
									name = "FPS/MS",
									type = "header",
									order = 28,
								},
								FpsEnable = {
									name = "Enable",
									desc = "Whether you want to show your Fps/Ms or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Fps.Enable end,
									set = function(self, FpsEnable)
												db.General.Info.Fps.Enable = not db.General.Info.Fps.Enable
												if FpsEnable == true then
													Text_fps:Show()
												else
													Text_fps:Hide()
												end
											end,
									order = 29,
								},
								FpsX = {
									name = "X Value",
									desc = "X Value for your FPS/MS Notice.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Fps.X,
									type = "input",
									disabled = function() return not db.General.Info.Fps.Enable end,
									get = function() return db.General.Info.Fps.X end,
									set = function(self,FpsX)
												if FpsX == nil or FpsX == "" then
													FpsX = "0"
												end
												db.General.Info.Fps.X = FpsX
												Text_fps:SetPoint("CENTER", infos_left, "CENTER", FpsX, db.General.Info.Fps.Y)
											end,
									order = 30,
								},
								FpsY = {
									name = "Y Value",
									desc = "Y Value for your FPS/MS Notice.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Fps.Y,
									type = "input",
									disabled = function() return not db.General.Info.Fps.Enable end,
									get = function() return db.General.Info.Fps.Y end,
									set = function(self,FpsY)
												if FpsY == nil or FpsY == "" then
													FpsY = "0"
												end
												db.General.Info.Fps.Y = FpsY
												Text_fps:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Fps.X, FpsY)
											end,
									order = 31,
								},
								header97 = {
									name = "Memory Usage",
									type = "header",
									order = 32,
								},
								MemoryEnable = {
									name = "Enable",
									desc = "Whether you want to show your Memory Usage or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Memory.Enable end,
									set = function(self, MemoryEnable)
												db.General.Info.Memory.Enable = not db.General.Info.Memory.Enable
												if MemoryEnable == true then
													Text_mb:Show()
												else
													Text_mb:Hide()
												end
											end,
									order = 33,
								},
								MemoryX = {
									name = "X Value",
									desc = "X Value for your Addon Memory Notice.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Memory.X,
									type = "input",
									disabled = function() return not db.General.Info.Memory.Enable end,
									get = function() return db.General.Info.Memory.X end,
									set = function(self,MemoryX)
												if MemoryX == nil or MemoryX == "" then
													MemoryX = "0"
												end
												db.General.Info.Memory.X = MemoryX
												Text_mb:SetPoint("CENTER", infos_left, "CENTER", MemoryX, db.General.Info.Memory.Y)
											end,
									order = 34,
								},
								MemoryY = {
									name = "Y Value",
									desc = "Y Value for your Addon Memory Notice.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Memory.Y,
									type = "input",
									disabled = function() return not db.General.Info.Memory.Enable end,
									get = function() return db.General.Info.Memory.Y end,
									set = function(self,MemoryY)
												if MemoryY == nil or MemoryY == "" then
													MemoryY = "0"
												end
												db.General.Info.Memory.Y = MemoryY
												Text_mb:SetPoint("CENTER", infos_left, "CENTER", db.General.Info.Memory.X, MemoryY)
											end,
									order = 35,
								},
								header92g = {
									name = "Guild",
									type = "header",
									order = 36,
								},
								GuildEnable = {
									name = "Enable",
									desc = "Whether you want to show your Guild Status or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Guild.Enable end,
									set = function(self, GuildEnable)
												db.General.Info.Guild.Enable = not db.General.Info.Guild.Enable
												if GuildEnable == true then
													GFrame:Show()
												else
													GFrame:Hide()
												end
											end,
									order = 37,
								},
								GuildX = {
									name = "X Value",
									desc = "X Value for your Guild Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Guild.X,
									type = "input",
									disabled = function() return not db.General.Info.Guild.Enable end,
									get = function() return db.General.Info.Guild.X end,
									set = function(self,GuildX)
												if GuildX == nil or GuildX == "" then
													GuildX = "0"
												end
												db.General.Info.Guild.X = GuildX
												GFrame:SetPoint("RIGHT", infos_right, "LEFT", GuildX, db.General.Info.Guild.Y)
											end,
									order = 38,
								},
								GuildY = {
									name = "Y Value",
									desc = "Y Value for your Guild Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Guild.Y,
									type = "input",
									disabled = function() return not db.General.Info.Guild.Enable end,
									get = function() return db.General.Info.Guild.Y end,
									set = function(self,GuildY)
												if GuildY == nil or GuildY == "" then
													GuildY = "0"
												end
												db.General.Info.Guild.Y = GuildY
												GFrame:SetPoint("RIGHT", infos_right, "LEFT", db.General.Info.Guild.X, GuildY)
											end,
									order = 39,
								},
								header92f = {
									name = "Friends",
									type = "header",
									order = 40,
								},
								FriendsEnable = {
									name = "Enable",
									desc = "Whether you want to show your Friends Status or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.General.Info.Friends.Enable end,
									set = function(self, FriendsEnable)
												db.General.Info.Friends.Enable = not db.General.Info.Friends.Enable
												if FriendsEnable == true then
													FFrame:Show()
												else
													FFrame:Hide()
												end
											end,
									order = 41,
								},
								FriendsX = {
									name = "X Value",
									desc = "X Value for your Friends Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Friends.X,
									type = "input",
									disabled = function() return not db.General.Info.Friends.Enable end,
									get = function() return db.General.Info.Friends.X end,
									set = function(self,FriendsX)
												if FriendsX == nil or FriendsX == "" then
													FriendsX = "0"
												end
												db.General.Info.Friends.X = FriendsX
												FFrame:SetPoint("RIGHT", infos_right, "LEFT", FriendsX, db.General.Info.Friends.Y)
											end,
									order = 42,
								},
								FriendsY = {
									name = "Y Value",
									desc = "Y Value for your Friends Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.General.Info.Friends.Y,
									type = "input",
									disabled = function() return not db.General.Info.Friends.Enable end,
									get = function() return db.General.Info.Friends.Y end,
									set = function(self,FriendsY)
												if FriendsY == nil or FriendsY == "" then
													FriendsY = "0"
												end
												db.General.Info.Friends.Y = FriendsY
												FFrame:SetPoint("RIGHT", infos_right, "LEFT", db.General.Info.Friends.X, FriendsY)
											end,
									order = 43,
								},
							},
						},
					},
				},
				Minimap = {
					name = "Minimap",
					type = "group",
					order = 6,
					childGroups = "select",
					args = {
						Enable = {
							name = "Enable",
							desc = "Whether LUI should set some Minimap Settings or not.\n",
							type = "toggle",
							width = "full",
							get = function() return db.Minimap.Enable end,
							set = function(self, Enable)
										db.Minimap.Enable = not db.Minimap.Enable
										StaticPopup_Show("RELOAD_UI")
									end,
							order = 0,
						},
						ShowTextures = {
							name = "Show Minimap Textures",
							desc = "Whether you want to show the Minimap Textures or not.\n",
							type = "toggle",
							width = "full",
							get = function() return db.Minimap.ShowTextures end,
							set = function(self, ShowTextures)
										db.Minimap.ShowTextures = not db.Minimap.ShowTextures
										StaticPopup_Show("RELOAD_UI")
									end,
							order = 1,
						},
						AlwaysUpFrame = {
							name = "AlwaysUpFrame",
							type = "group",
							order = 2,
							args = {
								AlwaysUpFrameText = {
									order = 3,
									width = "full",
									type = "description",
									name = "This Frame occurs in Battlegrounds, Thousendwinter and Instances. Example: Attempts left in Icecrown.",
								},
								AlwaysUpFrameX = {
									name = "X Value",
									desc = "X Value for your AlwaysUpFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: 300",
									type = "input",
									get = function() return db.Minimap.AlwaysUpFrameX end,
									set = function(self,AlwaysUpFrameX)
												if AlwaysUpFrameX == nil or AlwaysUpFrameX == "" then
													AlwaysUpFrameX = "0"
												end
												db.Minimap.AlwaysUpFrameX = AlwaysUpFrameX
												Position:SetFramePosition("worldState")
											end,
									order = 4,
								},
								AlwaysUpFrameY = {
									name = "Y Value",
									desc = "Y Value for your AlwaysUpFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -35",
									type = "input",
									get = function() return db.Minimap.AlwaysUpFrameY end,
									set = function(self,AlwaysUpFrameY)
												if AlwaysUpFrameY == nil or AlwaysUpFrameY == "" then
													AlwaysUpFrameY = "0"
												end
												db.Minimap.AlwaysUpFrameY = AlwaysUpFrameY
												Position:SetFramePosition("worldState")
											end,
									order = 5,
								},
							},
						},
						VehicleSeatIndicator = {
							name = "VehicleSeatIndicator",
							type = "group",
							order = 3,
							args = {
								VehicleSeatIndicatorText = {
									order = 9,
									width = "full",
									type = "description",
									name = "This Frame occurs in some special Mounts and Vehicles. Example: Traveler's Tundra Mammoth.",
								},
								VehicleSeatIndicatorX = {
									name = "X Value",
									desc = "X Value for your VehicleSeatIndicator.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -10",
									type = "input",
									get = function() return db.Minimap.VehicleSeatIndicatorX end,
									set = function(self,VehicleSeatIndicatorX)
												if VehicleSeatIndicatorX == nil or VehicleSeatIndicatorX == "" then
													VehicleSeatIndicatorX = "0"
												end
												db.Minimap.VehicleSeatIndicatorX = VehicleSeatIndicatorX
												Position:SetFramePosition("vehicleSeats")
											end,
									order = 10,
								},
								VehicleSeatIndicatorY = {
									name = "Y Value",
									desc = "Y Value for your VehicleSeatIndicator.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -225",
									type = "input",
									get = function() return db.Minimap.VehicleSeatIndicatorY end,
									set = function(self,VehicleSeatIndicatorY)
												if VehicleSeatIndicatorY == nil or VehicleSeatIndicatorY == "" then
													VehicleSeatIndicatorY = "0"
												end
												db.Minimap.VehicleSeatIndicatorY = VehicleSeatIndicatorY
												Position:SetFramePosition("vehicleSeats")
											end,
									order = 11,
								},
							},
						},
						DurabilityFrame = {
							name = "DurabilityFrame",
							type = "group",
							order = 4,
							args = {
								DurabilityFrameX = {
									name = "X Value",
									desc = "X Value for your DurabilityFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -20",
									type = "input",
									get = function() return db.Minimap.DurabilityFrameX end,
									set = function(self,DurabilityFrameX)
												if DurabilityFrameX == nil or DurabilityFrameX == "" then
													DurabilityFrameX = "0"
												end
												db.Minimap.DurabilityFrameX = DurabilityFrameX
												Position:SetFramePosition("durability")
											end,
									order = 15,
								},
								DurabilityFrameY = {
									name = "Y Value",
									desc = "Y Value for your DurabilityFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -220",
									type = "input",
									get = function() return db.Minimap.DurabilityFrameY end,
									set = function(self,DurabilityFrameY)
												if DurabilityFrameY == nil or DurabilityFrameY == "" then
													DurabilityFrameY = "0"
												end
												db.Minimap.DurabilityFrameY = DurabilityFrameY
												Position:SetFramePosition("durability")
											end,
									order = 16,
								},
							},
						},
						WatchFrame = {
							name = "WatchFrame",
							type = "group",
							order = 5,
							args = {
								WatchFrameText = {
									order = 20,
									width = "full",
									type = "description",
									name = "This Frame occurs when tracking Quests and Achievements.",
								},
								WatchFrameX = {
									name = "X Value",
									desc = "X Value for your WatchFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -100",
									type = "input",
									get = function() return db.Minimap.WatchFrameX end,
									set = function(self,WatchFrameX)
												if WatchFrameX == nil or WatchFrameX == "" then
													WatchFrameX = "0"
												end
												db.Minimap.WatchFrameX = WatchFrameX
												Position:SetFramePosition("questWatch")
											end,
									order = 21,
								},
								WatchFrameY = {
									name = "Y Value",
									desc = "Y Value for your WatchFrame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -300",
									type = "input",
									get = function() return db.Minimap.WatchFrameY end,
									set = function(self,WatchFrameY)
												if WatchFrameY == nil or WatchFrameY == "" then
													WatchFrameY = "0"
												end
												db.Minimap.WatchFrameY = WatchFrameY
												Position:SetFramePosition("questWatch")
											end,
									order = 22,
								},
							},
						},
						TicketStatus = {
							name = "Ticket Status",
							type = "group",
							order = 6,
							args = {
								TicketX = {
									name = "X Value",
									desc = "X Value for your Ticket Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -175",
									type = "input",
									get = function() return db.Minimap.TicketX end,
									set = function(self,TicketX)
												if TicketX == nil or TicketX == "" then
													TicketX = "0"
												end
												db.Minimap.TicketX = TicketX
												Position:SetFramePosition("ticketStatus")
											end,
									order = 32,
								},
								TicketY = {
									name = "Y Value",
									desc = "Y Value for your Ticket Status.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -70",
									type = "input",
									get = function() return db.Minimap.TicketY end,
									set = function(self,TicketY)
												if TicketY == nil or TicketY == "" then
													TicketY = "0"
												end
												db.Minimap.TicketY = TicketY
												Position:SetFramePosition("ticketStatus")
											end,
									order = 33,
								},
							},
						},
						CaptureBar = {
							name = "Capture Bar",
							type = "group",
							order = 7,
							args = {
								CaptureX = {
									name = "X Value",
									desc = "X Value for your Capture Bar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -5",
									type = "input",
									get = function() return db.Minimap.CaptureX end,
									set = function(self,CaptureX)
												if CaptureX == nil or CaptureX == "" then
													CaptureX = "0"
												end
												db.Minimap.CaptureX = CaptureX
												Position:SetFramePosition("capture")
											end,
									order = 37,
								},
								CaptureY = {
									name = "Y Value",
									desc = "Y Value for your Capture Bar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -205",
									type = "input",
									get = function() return db.Minimap.CaptureY end,
									set = function(self,CaptureY)
												if CaptureY == nil or CaptureY == "" then
													CaptureY = "0"
												end
												db.Minimap.CaptureY = CaptureY
												Position:SetFramePosition("capture")
											end,
									order = 38,
								},
							},
						},
					},
				},
				Bars = {
					name = "Bars",
					type = "group",
					order = 3,
					disabled = function() return isLocked end,
					childGroups = "tab",
					args = {
						header3 = {
							name = "Bars",
							type = "header",
							order = 1,
						},
						BarsSettings = {
							name = "Bars",
							type = "group",
							order = 2,
							args = {
								TopTextureSettings = {
									name = "Bars Top Texture Settings",
									type = "group",
									order = 1,
									guiInline = true,
									args = {
										BarsAnchorDropDown = {
											name = "Anchor",
											desc = "Choose the Anchor for your Top Bar Texture.\nDefault: "..defaults.profile.Bars.Anchor,
											type = "select",
											values = barAnchors,
											get = function()
													for k, v in pairs(barAnchors) do
														if db.Bars.Anchor == v then
															return k
														end
													end
												end,
											set = function(self, BarsAnchorDropDown)
													db.Bars.Anchor = barAnchors[BarsAnchorDropDown]
													BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", db.Bars.OffsetX, db.Bars.OffsetY)
												end,
											order = 0,
										},
										BarsAnchor = {
											name = "Individual Anchor",
											desc = "Choose an individual Top Bar Texture Anchor\nDefault: "..defaults.profile.Bars.Anchor,
											type = "input",
											get = function() return db.Bars.Anchor end,
											set = function(self,BarsAnchor)
													if BarsAnchor == nil or BarsAnchor == "" then
														BarsAnchor = db.Bars.Anchor
													end
													db.Bars.Anchor = BarsAnchor
													BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", db.Bars.OffsetX, db.Bars.OffsetY)
												end,
											order = 1,
										},
										BarTextureXOffset = {
											name = "X Offset",
											desc = "Choose an X Offset for your Top Bar Texture.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Bars.OffsetX,
											type = "input",
											get = function() return db.Bars.OffsetX end,
											set = function(self,BarTextureXOffset)
														if BarTextureXOffset == nil or BarTextureXOffset == "" then
															BarTextureXOffset = "0"
														end
														db.Bars.OffsetX = BarTextureXOffset
														BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", db.Bars.OffsetX, db.Bars.OffsetY)
													end,
											order = 3,
										},
										BarTextureYOffset = {
											name = "Y Offset",
											desc = "Choose an Y Offset for your Top Bar Texture.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Bars.OffsetY,
											type = "input",
											get = function() return db.Bars.OffsetY end,
											set = function(self,BarTextureYOffset)
													if BarTextureYOffset == nil or BarTextureYOffset == "" then
														BarTextureYOffset = "0"
													end
													db.Bars.OffsetY = BarTextureYOffset
													BarsBackground:SetPoint("BOTTOM", db.Bars.Anchor, "BOTTOM", db.Bars.OffsetX, db.Bars.OffsetY)
												end,
											order = 4,
										},
										BarTextureAnimation = {
											name = "Enable Bar Texture Animation",
											desc = "Whether you want to show the Bar Texture Animation or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Bars.Animation end,
											set = function()
													db.Bars.Animation = not db.Bars.Animation
												end,
											order = 6,
										},
										BarTextureAnimationHeight = {
											name = "Bar Texture Animation Height",
											desc = "Choose the Animation Height your Bar Texture.\nDefault: "..defaults.profile.Bars.AnimationHeight,
											type = "input",
											disabled = function() return not db.Bars.Animation end,
											get = function() return db.Bars.AnimationHeight end,
											set = function(self,BarTextureAnimationHeight)
													if BarTextureAnimationHeight == nil or BarTextureAnimationHeight == "" then
														BarTextureAnimationHeight = "0"
													end
													db.Bars.AnimationHeight = BarTextureAnimationHeight
												end,
											order = 7,
										},
									},
								},
								BottomTextureSettings = {
									name = "Bars Bottom Texture Settings",
									type = "group",
									order = 2,
									guiInline = true,
									args = {
										BottomBarTextureToggle = {
											name = "Enable",
											desc = "Whether you want to show the bottom Bar Texture or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Bars.ShowBottom end,
											set = function(self,BottomBarTextureToggle)
													db.Bars.ShowBottom = not db.Bars.ShowBottom
													if BottomBarTextureToggle == true then
														BarsBackground2:Show()
													else 
														BarsBackground2:Hide()
													end
												end,
											order = 1,
										},
										BarsAnchor2DropDown = {
											name = "Anchor",
											desc = "Choose the Anchor for your Bottom Bar Texture.\nDefault: "..defaults.profile.Bars.Anchor2,
											type = "select",
											disabled = function() return not db.Bars.ShowBottom end,
											values = barAnchors,
											get = function()
													for k, v in pairs(barAnchors) do
														if db.Bars.Anchor2 == v then
															return k
														end
													end
												end,
											set = function(self, BarsAnchor2DropDown)
													db.Bars.Anchor2 = barAnchors[BarsAnchor2DropDown]
													BarsBackground2:SetPoint("BOTTOM", db.Bars.Anchor2, "BOTTOM", db.Bars.OffsetBottomX, db.Bars.OffsetBottomY)
												end,
											order = 2,
										},
										BarsAnchor2 = {
											name = "Individual Anchor",
											desc = "Choose an individual Bottom Bar Texture Anchor\nDefault: "..defaults.profile.Bars.Anchor2,
											type = "input",
											disabled = function() return not db.Bars.ShowBottom end,
											get = function() return db.Bars.Anchor2 end,
											set = function(self,BarsAnchor2)
													if BarsAnchor2 == nil or BarsAnchor2 == "" then
														BarsAnchor2 = db.Bars.Anchor2
													end
													db.Bars.Anchor2 = BarsAnchor2
													BarsBackground2:SetPoint("BOTTOM", db.Bars.Anchor2, "BOTTOM", db.Bars.OffsetBottomX, db.Bars.OffsetBottomY)
												end,
											order = 3,
										},
										BarTextureXOffsetBottom = {
											name = "X Offset",
											desc = "Choose an X Offset for your Bottom Bar Texture.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Bars.OffsetBottomX,
											type = "input",
											disabled = function() return not db.Bars.ShowBottom end,
											get = function() return db.Bars.OffsetBottomX end,
											set = function(self,BarTextureXOffsetBottom)
														if BarTextureXOffsetBottom == nil or BarTextureXOffsetBottom == "" then
															BarTextureXOffsetBottom = "0"
														end
														db.Bars.OffsetBottomX = BarTextureXOffsetBottom
														BarsBackground2:SetPoint("BOTTOM", db.Bars.Anchor2, "BOTTOM", db.Bars.OffsetBottomX, db.Bars.OffsetBottomY)
													end,
											order = 4,
										},
										BarTextureYOffsetBottom = {
											name = "Y Offset",
											desc = "Choose an Y Offset for your Bottom Bar Texture.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Bars.OffsetBottomY,
											type = "input",
											disabled = function() return not db.Bars.ShowBottom end,
											get = function() return db.Bars.OffsetBottomY end,
											set = function(self,BarTextureYOffsetBottom)
													if BarTextureYOffsetBottom == nil or BarTextureYOffsetBottom == "" then
														BarTextureYOffsetBottom = "0"
													end
													db.Bars.OffsetBottomY = BarTextureYOffsetBottom
													BarsBackground2:SetPoint("BOTTOM", db.Bars.Anchor2, "BOTTOM", db.Bars.OffsetBottomX, db.Bars.OffsetBottomY)
												end,
											order = 5,
										},
									},
								},
							},
						},
						SidebarRight = {
							name = "Right Sidebar",
							type = "group",
							order = 3,
							args = {
								SidebarRightEnable = {
									name = "Enabled",
									desc = "Whether you want to show the right Sidebar or not.\n",
									type = "toggle",
									get = function() return db.SidebarRight.Enable end,
									set = function(self,SidebarRightEnable)
											if isLocked == false then
												db.SidebarRight.Enable = SidebarRightEnable
												if SidebarRightEnable == true then
													if isBartender == true then
														SidebarRight_EnableBar()
														SidebarRight_SetRows()
														SidebarRight_SetButtons()
														SidebarRight_SetConfigAlpha()
														SidebarRight_ClearSetPoint()
														SidebarRight_SavePosition()
														SidebarRight_SetConfigScale()
														SidebarRight_SetFrameStrata()
														SidebarRight_SetFrameLevel()
														SidebarRight_SetFadeOut()
														SidebarRight_SetVisibility()
														SidebarRight_SetPadding()
													else
														SidebarRight_ClearAllPoints()
														SidebarRight_SetPoint()
														SidebarRight_SetFrameStrata()
														SidebarRight_SetFrameLevel()
													end
												else
													fsidebar_anchor:Hide()
													if isBartender == true then
														SidebarRight_SetConfigAlpha()
														SidebarRight_DisableBar()
													else
														SidebarRight_Hide()
													end
												end
											end
										end,
									order = 1,
								},
								Settings = {
									name = "Settings",
									type = "group",
									order = 2,
									guiInline = true,
									args = {
										SidebarRightAnchorDropDown = {
											name = "Bar",
											desc = "Choose the Bar for your Right Sidebar.\nDefault: "..defaults.profile.Bars.SidebarRightAnchor,
											type = "select",
											values = barAnchors,
											get = function()
													for k, v in pairs(barAnchors) do
														if db.Bars.SidebarRightAnchor == v then
															return k
														end
													end
												end,
											set = function(self, SidebarRightAnchorDropDown)
													if isBartender == true then
														SidebarRight_SetVisibility2()
													end
											
													db.Bars.SidebarRightAnchor = barAnchors[SidebarRightAnchorDropDown]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 1,
										},
										SidebarRightAnchor = {
											name = "Individual Bar",
											desc = "Choose the Bar for your Right Sidebar.\nDefault: "..defaults.profile.Bars.SidebarRightAnchor,
											type = "input",
											get = function() return db.Bars.SidebarRightAnchor end,
											set = function(self,SidebarRightAnchor)
													if SidebarRightAnchor == nil or SidebarRightAnchor == "" then
														SidebarRightAnchor = db.Bars.SidebarRightAnchor
													end
													if isBartender == true then
														SidebarRight_SetVisibility2()
													end
													db.Bars.SidebarRightAnchor = SidebarRightAnchor
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 2,
										},
										SidebarRightOffset = {
											name = "Y Offset",
											desc = "Y Offset from the middle-right position.\n\nNote:\nPositive values = up\nNegativ values = down",
											type = "input",
											disabled = function() return not db.SidebarRight.Enable end,
											get = function() return db.SidebarRight.Offset end,
											set = function(self,SidebarRightOffset)
													if isLocked == false then
														if SidebarRightOffset == nil or SidebarRightOffset == "" then
															SidebarRightOffset = "0"
														end
														db.SidebarRight.Offset = SidebarRightOffset
														
														if db.SidebarRight.Enable then
															fsidebar_anchor:SetPoint("RIGHT", UIParent, "RIGHT", 11, SidebarRightOffset)
														end
														
														if isBartender == true then
															SidebarRight_ClearSetPoint()
															SidebarRight_SavePosition()
														else
															SidebarRight_ClearAllPoints()
															SidebarRight_SetPoint()
														end
													end
												end,
											order = 3,
										},
										SidebarRightOpenAnimation = {
											name = "Open Instant",
											desc = "Whether you want to show an open/close animation or not.\n",
											type = "toggle",
											disabled = function() return not db.SidebarRight.Enable end,
											get = function() return db.SidebarRight.OpenInstant end,
											set = function()
														db.SidebarRight.OpenInstant = not db.SidebarRight.OpenInstant
													end,
											order = 4,
										},
									},
								},
							},
						},
						SidebarLeft = {
							name = "Left Sidebar",
							type = "group",
							order = 4,
							args = {
								SidebarLeftEnable = {
									name = "Enabled",
									desc = "Whether you want to show the right Sidebar or not.\n\nOnEnable you will have to reposition your PartyFrame",
									type = "toggle",
									get = function() return db.SidebarLeft.Enable end,
									set = function(self,SidebarLeftEnable)
											if isLocked == false then
												db.SidebarLeft.Enable = SidebarLeftEnable
												if SidebarRightEnable == true then
													if isBartender == true then
														SidebarLeft_EnableBar()
														SidebarLeft_SetRows()
														SidebarLeft_SetButtons()
														SidebarLeft_SetConfigAlpha()
														SidebarLeft_ClearSetPoint()
														SidebarLeft_SavePosition()
														SidebarLeft_SetConfigScale()
														SidebarLeft_SetFrameStrata()
														SidebarLeft_SetFrameLevel()
														SidebarLeft_SetFadeOut()
														SidebarLeft_SetVisibility()
														SidebarLeft_SetPadding()
													else
														SidebarLeft_ClearAllPoints()
														SidebarLeft_SetPoint()
														SidebarLeft_SetFrameStrata()
														SidebarLeft_SetFrameLevel()
													end
												else
													fsidebar2_anchor:Hide()
													if isBartender == true then
														SidebarLeft_SetConfigAlpha()
														SidebarLeft_DisableBar()
													else
														SidebarLeft_Hide()
													end
												end
											end
										end,
									order = 1,
								},
								Settings = {
									name = "Settings",
									type = "group",
									order = 2,
									guiInline = true,
									args = {
										SidebarLeftAnchorDropDown = {
											name = "Bar",
											desc = "Choose the Bar for your Left Sidebar.\nDefault: "..defaults.profile.Bars.SidebarLeftAnchor,
											type = "select",
											values = barAnchors,
											get = function()
													for k, v in pairs(barAnchors) do
														if db.Bars.SidebarLeftAnchor == v then
															return k
														end
													end
												end,
											set = function(self, SidebarLeftAnchorDropDown)
													if isBartender == true then
														SidebarLeft_SetVisibility2()
													end
											
													db.Bars.SidebarLeftAnchor = barAnchors[SidebarLeftAnchorDropDown]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 1,
										},
										SidebarLeftAnchor = {
											name = "Individual Bar",
											desc = "Choose the Bar for your Left Sidebar\nDefault: "..defaults.profile.Bars.SidebarLeftAnchor,
											type = "input",
											get = function() return db.Bars.SidebarLeftAnchor end,
											set = function(self,SidebarLeftAnchor)
													if SidebarLeftAnchor == nil or SidebarLeftAnchor == "" then
														SidebarLeftAnchor = db.Bars.SidebarLeftAnchor
													end
													if isBartender == true then
														SidebarLeft_SetVisibility2()
													end
													db.Bars.SidebarLeftAnchor = SidebarLeftAnchor
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 2,
										},
										SidebarLeftOffset = {
											name = "Y Offset",
											desc = "Y Offset from the middle-left position.\n\nNote:\nPositive values = up\nNegativ values = down",
											type = "input",
											disabled = function() return not db.SidebarLeft.Enable end,
											get = function() return db.SidebarLeft.Offset end,
											set = function(self,SidebarLeftOffset)
													if isLocked == false then
														if SidebarLeftOffset == nil or SidebarLeftOffset == "" then
															SidebarLeftOffset = "0"
														end
														db.SidebarLeft.Offset = SidebarLeftOffset
														fsidebar2_anchor:SetPoint("LEFT", UIParent, "LEFT", -11, SidebarLeftOffset) 
														
														if isBartender == true then
															SidebarLeft_ClearSetPoint()
															SidebarLeft_SavePosition()
														else
															SidebarLeft_ClearAllPoints()
															SidebarLeft_SetPoint()
														end
													end
												end,
											order = 3,
										},
										SidebarLeftOpenAnimation = {
											name = "Open Instant",
											desc = "Whether you want to show an open/close animation or not.\n",
											type = "toggle",
											disabled = function() return not db.SidebarLeft.Enable end,
											get = function() return db.SidebarLeft.OpenInstant end,
											set = function()
														db.SidebarLeft.OpenInstant = not db.SidebarLeft.OpenInstant
													end,
											order = 4,
										},
									},
								},
							},
						},
					},
				},
				Castbars = {
					name = "Castbars",
					type = "group",
					order = 4,
					args = {
						header6 = {
							name = "Castbars",
							type = "header",
							order = 1,
						},
						CBEnable = {
							name = "Enable Castbars",
							desc = "Wether you want to use oUF Castbars or not.",
							type = "toggle",
							get = function() return db.Castbar.Enable end,
							set = function(self,CBEnable)
										db.Castbar.Enable = not db.Castbar.Enable
										StaticPopup_Show("RELOAD_UI")
									end,
							order = 2,
						},
						empty234 = {
							name = "   ",
							type = "description",
							order = 3,
						},
						CastbarSettings = {
							name = "Settings",
							type = "group",
							disabled = function() return not db.Castbar.Enable end,
							guiInline = true,
							order = 4,
							args = {
								CBLatency = {
									name = "Castbar Latency",
									desc = "Wether you want to show your Castbar Latency or not.",
									type = "toggle",
									width = "full",
									get = function() return db.Castbar.Player.Latency end,
									set = function(self,CBLatency)
												db.Castbar.Player.Latency = not db.Castbar.Player.Latency
												if CBLatency == true then
													oUF_LUI_player.Castbar.SafeZone:Show()
												else
													oUF_LUI_player.Castbar.SafeZone:Hide()
												end
											end,
									order = 1,
								},
								CBIcons = {
									name = "Castbar Icons",
									desc = "Wether you want to show Icons on Player/Target Castbar or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "toggle",
									width = "full",
									get = function() return db.Castbar.Player.Icon end,
									set = function(self,CBIcons)
												db.Castbar.Player.Icon = not db.Castbar.Player.Icon
												db.Castbar.Target.Icon = not db.Castbar.Target.Icon
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 2,
								},
								CBIconsTTFT = {
									name = "Castbar Icons FocusTarget",
									desc = "Wether you want to show Icons on Focus Castbar or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
									type = "toggle",
									width = "full",
									get = function() return db.Castbar.Focus.Icon end,
									set = function(self,CBIconsTTFT)
												db.Castbar.Focus.Icon = not db.Castbar.Focus.Icon
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 3,
								},
							},
						},
						Player = {
							name = "Player",
							disabled = function() return not db.Castbar.Enable end,
							type = "group",
							order = 5,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Player Castbar",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									order = 2,
									args = {
										CastbarEnable = {
											name = "Enable",
											desc = "Wether you want to show your Player Castbar or not.",
											type = "toggle",
											width = "full",
											get = function() return db.Castbar.Player.Enable end,
											set = function(self,CastbarEnable)
														db.Castbar.Player.Enable = not db.Castbar.Player.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										CastbarSize = {
											name = "Size/Position",
											type = "group",
											guiInline = true,
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Player.Enable then
													return false
												else
													return true
												end
											end,
											order = 2,
											args = {
												CastbarHeight = {
													name = "Height",
													desc = "Castbar Height.\n\nDefault: "..defaults.profile.Castbar.Player.Height,
													type = "input",
													get = function() return db.Castbar.Player.Height end,
													set = function(self,CastbarHeight)
																if CastbarHeight == nil or CastbarHeight == "" then
																	CastbarHeight = "0"
																end
																db.Castbar.Player.Height = CastbarHeight
																oUF_LUI_player.Castbar:SetHeight(CastbarHeight)
															end,
													order = 1,
												},
												CastbarWidth = {
													name = "Width",
													desc = "Castbar Width.\n\nDefault: "..defaults.profile.Castbar.Player.Width,
													type = "input",
													get = function() return db.Castbar.Player.Width end,
													set = function(self,CastbarWidth)
																if CastbarWidth == nil or CastbarWidth == "" then
																	CastbarWidth = "0"
																end
																db.Castbar.Player.Width = CastbarWidth
																oUF_LUI_player.Castbar:SetWidth(CastbarWidth)
															end,
													order = 2,
												},
												CastbarX = {
													name = "X Value",
													desc = "X Value for your Castbar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Castbar.Player.X,
													type = "input",
													get = function() return db.Castbar.Player.X end,
													set = function(self,CastbarX)
																if CastbarX == nil or CastbarX == "" then
																	CastbarX = "0"
																end
																db.Castbar.Player.X = CastbarX
																oUF_LUI_player.Castbar:SetPoint("BOTTOM", UIParent, "BOTTOM", CastbarX, db.Castbar.Player.Y)
															end,
													order = 3,
												},
												CastbarY = {
													name = "Y Value",
													desc = "Y Value for your Castbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Castbar.Player.Y,
													type = "input",
													get = function() return db.Castbar.Player.Y end,
													set = function(self,CastbarY)
																if CastbarY == nil or CastbarY == "" then
																	CastbarY = "0"
																end
																db.Castbar.Player.Y = CastbarY
																oUF_LUI_player.Castbar:SetPoint("BOTTOM", UIParent, "BOTTOM", db.Castbar.Player.X, CastbarY)
															end,
													order = 4,
												},
											},
										},
									},
								},
								CastbarColors = {
									name = "Colors",
									type = "group",
									disabled = function()
										if db.Castbar.Enable and db.Castbar.Player.Enable then
											return false
										else
											return true
										end
									end,
									order = 3,
									args = {
										Colors = {
											name = "Castbar Colors",
											type = "group",
											guiInline = true,
											order = 1,
											args = {
												CBColorEnable = {
													name = "Individual Castbar Color",
													desc = "Wether you want an individual Castbar Color or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Player.IndividualColor end,
													set = function(self,CBColorEnable)
																db.Castbar.Player.IndividualColor = not db.Castbar.Player.IndividualColor
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CBColor = {
													name = "Castbar Color",
													desc = "Choose an individual Castbar-Color.\n\nDefault: "..color_r.." / "..color_g.." / "..color_b.." / "..1-defaults.profile.Castbar.Player.Colors.Bar.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Player.Colors.Bar.r, db.Castbar.Player.Colors.Bar.g, db.Castbar.Player.Colors.Bar.b, db.Castbar.Player.Colors.Bar.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Player.Colors.Bar.r = r
															db.Castbar.Player.Colors.Bar.g = g
															db.Castbar.Player.Colors.Bar.b = b
															db.Castbar.Player.Colors.Bar.a = a
															oUF_LUI_player.Castbar:SetStatusBarColor(r,g,b,a)
														end,
													order = 2,
												},
												CBBGColor = {
													name = "Castbar BG Color",
													desc = "Choose an individual Castbar-Background-Color.\n\nDefault: "..defaults.profile.Castbar.Player.Colors.Background.r.." / "..defaults.profile.Castbar.Player.Colors.Background.g.." / "..defaults.profile.Castbar.Player.Colors.Background.b.." / "..1-defaults.profile.Castbar.Player.Colors.Background.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Player.Colors.Background.r, db.Castbar.Player.Colors.Background.g, db.Castbar.Player.Colors.Background.b, db.Castbar.Player.Colors.Background.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Player.Colors.Background.r = r
															db.Castbar.Player.Colors.Background.g = g
															db.Castbar.Player.Colors.Background.b = b
															db.Castbar.Player.Colors.Background.a = a
															oUF_LUI_player.Castbar.bg:SetVertexColor(r,g,b,a)
														end,
													order = 3,
												},
												CBLatencyColor = {
													name = "Castbar Latency Color",
													desc = "Choose an individual Castbar-Latency-Color.\n\nDefaults: "..defaults.profile.Castbar.Player.Colors.Latency.r.." / "..defaults.profile.Castbar.Player.Colors.Latency.g.." / "..defaults.profile.Castbar.Player.Colors.Latency.b.." / "..1-defaults.profile.Castbar.Player.Colors.Latency.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Player.Colors.Latency.r, db.Castbar.Player.Colors.Latency.g, db.Castbar.Player.Colors.Latency.b, db.Castbar.Player.Colors.Latency.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Player.Colors.Latency.r = r
															db.Castbar.Player.Colors.Latency.g = g
															db.Castbar.Player.Colors.Latency.b = b
															db.Castbar.Player.Colors.Latency.a = a
															oUF_LUI_player.Castbar.SafeZone:SetVertexColor(r,g,b,a) 
														end,
													order = 4,
												},
												CBBorderColor = {
													name = "Castbar Border Color",
													desc = "Choose an individual Castbar-Border-Color.\n\nDefaults: "..defaults.profile.Castbar.Player.Colors.Border.r.." / "..defaults.profile.Castbar.Player.Colors.Border.g.." / "..defaults.profile.Castbar.Player.Colors.Border.b.." / "..1-defaults.profile.Castbar.Player.Colors.Border.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Player.Colors.Border.r, db.Castbar.Player.Colors.Border.g, db.Castbar.Player.Colors.Border.b, db.Castbar.Player.Colors.Border.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Player.Colors.Border.r = r
															db.Castbar.Player.Colors.Border.g = g
															db.Castbar.Player.Colors.Border.b = b
															db.Castbar.Player.Colors.Border.a = a
															oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(r,g,b,a)
														end,
													order = 5, 
												},
												CBNameColor = {
													name = "Castbar Name Text Color",
													desc = "Choose an individual Castbar Name Text Color.\n\nDefaults: "..defaults.profile.Castbar.Player.Colors.Name.r.." / "..defaults.profile.Castbar.Player.Colors.Name.g.." / "..defaults.profile.Castbar.Player.Colors.Name.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Player.Colors.Name.r, db.Castbar.Player.Colors.Name.g, db.Castbar.Player.Colors.Name.b end,
													set = function(_,r,g,b)
															db.Castbar.Player.Colors.Name.r = r
															db.Castbar.Player.Colors.Name.g = g
															db.Castbar.Player.Colors.Name.b = b
															oUF_LUI_player.Castbar.Text:SetTextColor(r, g, b)
														end,
													order = 6, 
												},
												CBTimeColor = {
													name = "Castbar Time Text Color",
													desc = "Choose an individual Castbar Time Text Color.\n\nDefaults: "..defaults.profile.Castbar.Player.Colors.Time.r.." / "..defaults.profile.Castbar.Player.Colors.Time.g.." / "..defaults.profile.Castbar.Player.Colors.Time.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Player.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Player.Colors.Time.r, db.Castbar.Player.Colors.Time.g, db.Castbar.Player.Colors.Time.b end,
													set = function(_,r,g,b)
															db.Castbar.Player.Colors.Time.r = r
															db.Castbar.Player.Colors.Time.g = g
															db.Castbar.Player.Colors.Time.b = b
															oUF_LUI_player.Castbar.Time:SetTextColor(r, g, b)
														end,
													order = 7, 
												},
											},
										},
										CastbarTexture = {
											name = "Castbar Textures",
											type = "group",
											guiInline = true,
											order = 2,
											args = {
												CBTexture = {
													name = "Bar Texture",
													desc = "Choose your Castbar Texture!\nDefault: LUI_Gradient",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Player.Texture end,
													set = function(self, CBTexture)
															db.Castbar.Player.Texture = CBTexture
															oUF_LUI_player.Castbar:SetStatusBarTexture(LSM:Fetch("statusbar", CBTexture))
														end,
													order = 1,
												},
												CBTextureBG = {
													name = "Background Texture",
													desc = "Choose your Castbar Background Texture!\nDefault: LUI_Minimalist",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Player.TextureBG end,
													set = function(self, CBTextureBG)
															db.Castbar.Player.TextureBG = CBTextureBG
															oUF_LUI_player.Castbar.bg:SetTexture(LSM:Fetch("statusbar", CBTextureBG))
														end,
													order = 2,
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									order = 4,
									args = {
										CastbarText = {
											name = "Castbar Text",
											type = "group",
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Player.Enable then
													return false
												else
													return true
												end
											end,
											guiInline = true,
											order = 7,
											args = {
												CastbarNameFont = {
													name = "Name Font",
													desc = "Choose your Font for your Castbar Name Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function()
															return db.Castbar.Player.Text.Name.Font
														end,
													set = function(self, CastbarNameFont)
															db.Castbar.Player.Text.Name.Font = CastbarNameFont
															oUF_LUI_player.Castbar.Text:SetFont(LSM:Fetch("font", CastbarNameFont),db.Castbar.Player.Text.Name.Size)
														end,
													order = 1,
												},
												CastbarNameFontsize = {
													name = "Size",
													desc = "Choose your Castbar Name Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Player.Text.Name.Size end,
													set = function(_, CastbarNameFontsize) 
															db.Castbar.Player.Text.Name.Size = CastbarNameFontsize
															oUF_LUI_player.Castbar.Text:SetFont(LSM:Fetch("font", db.Castbar.Player.Text.Name.Font),CastbarNameFontsize)
														end,
													order = 2,
												},
												CastbarTimeFont = {
													name = "Time Font",
													desc = "Choose your Font for your Castbar Time Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function()
															return db.Castbar.Player.Text.Time.Font
														end,
													set = function(self, CastbarTimeFont)
															db.Castbar.Player.Text.Time.Font = CastbarTimeFont
															oUF_LUI_player.Castbar.Time:SetFont(LSM:Fetch("font", CastbarTimeFont),db.Castbar.Player.Text.Time.Size)
														end,
													order = 3,
												},
												CastbarTimeFontsize = {
													name = "Size",
													desc = "Choose your Castbar Time Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Player.Text.Time.Size end,
													set = function(_, CastbarTimeFontsize) 
															db.Castbar.Player.Text.Time.Size = CastbarTimeFontsize
															oUF_LUI_player.Castbar.Time:SetFont(LSM:Fetch("font", db.Castbar.Player.Text.Time.Font),CastbarTimeFontsize)
														end,
													order = 4,
												},
												CastbarName = {
													name = "Show Name Text",
													desc = "Wether you want to show your Castbar Name Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Player.Text.Name.Enable end,
													set = function(self,CastbarName)
																db.Castbar.Player.Text.Name.Enable = not db.Castbar.Player.Text.Name.Enable
																if CastbarName == true then
																	oUF_LUI_player.Castbar.Text:Show()
																else
																	oUF_LUI_player.Castbar.Text:Hide()
																end
															end,
													order = 5,
												},
												CastbarTime = {
													name = "Show Time Text",
													desc = "Wether you want to show your Castbar Time Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Player.Text.Time.Enable end,
													set = function(self,CastbarTime)
																db.Castbar.Player.Text.Time.Enable = not db.Castbar.Player.Text.Time.Enable
																if CastbarTime == true then
																	oUF_LUI_player.Castbar.Time:Show()
																else
																	oUF_LUI_player.Castbar.Time:Hide()
																end
															end,
													order = 6,
												},
												CastbarTimeMax = {
													name = "Show Cast Time",
													desc = "Wether you want to show your Castbar Cast Time or not.",
													type = "toggle",
													width = "full",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Player.Enable then
																if db.Castbar.Player.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													get = function() return db.Castbar.Player.Text.Time.ShowMax end,
													set = function(self,CastbarTimeMax)
																db.Castbar.Player.Text.Time.ShowMax = not db.Castbar.Player.Text.Time.ShowMax
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 7,
												},
												CastbarNameOffsetX = {
													name = "Name Text X Offset",
													desc = "Castbar Name Text X Offset.\nDefault: 5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Player.Enable then
																if db.Castbar.Player.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Player.Text.Name.OffsetX end,
													set = function(self,CastbarNameOffsetX)
																if CastbarNameOffsetX == nil or CastbarNameOffsetX == "" then
																	CastbarNameOffsetX = "0"
																end
																db.Castbar.Player.Text.Name.OffsetX = CastbarNameOffsetX
																oUF_LUI_player.Castbar.Text:SetPoint("LEFT", tonumber(CastbarNameOffsetX), tonumber(db.Castbar.Player.Text.Name.OffsetY))
															end,  
													order = 8,
												},
												CastbarNameOffsetY = {
													name = "Name Text Y Offset",
													desc = "Castbar Name Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Player.Enable then
																if db.Castbar.Player.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Player.Text.Name.OffsetY end,
													set = function(self,CastbarNameOffsetY)
																if CastbarNameOffsetY == nil or CastbarNameOffsetY == "" then
																	CastbarNameOffsetY = "0"
																end
																db.Castbar.Player.Text.Name.OffsetY = CastbarNameOffsetY
																oUF_LUI_player.Castbar.Text:SetPoint("LEFT", tonumber(db.Castbar.Player.Text.Name.OffsetX), tonumber(CastbarNameOffsetY))
															end,
													order = 9,
												},
												CastbarTimeOffsetX = {
													name = "Time Text X Offset",
													desc = "Castbar Time Text X Offset.\nDefault: -5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Player.Enable then
																if db.Castbar.Player.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Player.Text.Time.OffsetX end,
													set = function(self,CastbarTimeOffsetX)
																if CastbarTimeOffsetX == nil or CastbarTimeOffsetX == "" then
																	CastbarTimeOffsetX = "0"
																end
																db.Castbar.Player.Text.Time.OffsetX = CastbarTimeOffsetX
																oUF_LUI_player.Castbar.Time:SetPoint("RIGHT", tonumber(CastbarTimeOffsetX), tonumber(db.Castbar.Player.Text.Time.OffsetY))
															end,
													order = 10,
												},
												CastbarTimeOffsetY = {
													name = "Time Text Y Offset",
													desc = "Castbar Time Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Player.Enable then
																if db.Castbar.Player.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Player.Text.Time.OffsetY end,
													set = function(self,CastbarTimeOffsetY)
																if CastbarTimeOffsetY == nil or CastbarTimeOffsetY == "" then
																	CastbarTimeOffsetY = "0"
																end
																db.Castbar.Player.Text.Time.OffsetY = CastbarTimeOffsetY
																oUF_LUI_player.Castbar.Time:SetPoint("RIGHT", tonumber(db.Castbar.Player.Text.Time.OffsetX), tonumber(CastbarTimeOffsetY))
															end,
													order = 11,
												},
											},
										},
									},
								},
								Border = {
									name = "Border",
									type = "group",
									order = 5,
									args = {
										CastbarBorder = {
											name = "Castbar Border",
											type = "group",
											guiInline = true,
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Player.Enable then
													return false
												else
													return true
												end
											end,
											order = 6,
											args = {
												CBBorder = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: glow",
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.Castbar.Player.Border.Texture end,
													set = function(self, CBBorder)
															db.Castbar.Player.Border.Texture = CBBorder
															
															oUF_LUI_player.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", CBBorder), edgeSize = db.Castbar.Player.Border.Thickness,
																insets = {left = db.Castbar.Player.Border.Inset.left, right = db.Castbar.Player.Border.Inset.right, top = db.Castbar.Player.Border.Inset.top, bottom = db.Castbar.Player.Border.Inset.bottom}
															})
														oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
														end,
													order = 1,
												},
												CBBorderThickness = {
													name = "Edge Size",
													desc = "Value for your Castbar Border Edge Size\nDefault: 4",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Player.Border.Thickness end,
													set = function(self,CBBorderThickness)
																if CBBorderThickness == nil or CBBorderThickness == "" then
																	CBBorderThickness = "0"
																end
																db.Castbar.Player.Border.Thickness = CBBorderThickness
																
																oUF_LUI_player.CastbarBackdrop:SetBackdrop({
																edgeFile = LSM:Fetch("border", db.Castbar.Player.Border.Texture), edgeSize = CBBorderThickness,
																	insets = {left = db.Castbar.Player.Border.Inset.left, right = db.Castbar.Player.Border.Inset.right, top = db.Castbar.Player.Border.Inset.top, bottom = db.Castbar.Player.Border.Inset.bottom}
																})
																oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
															end,
													order = 2,
												},
												empty235 = {
													name = "   ",
													type = "description",
													order = 3,
												},
												CBBorderInsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Player.Border.Inset.left end,
													set = function(self,CBBorderInsetLeft)
																if CBBorderInsetLeft == nil or CBBorderInsetLeft == "" then
																	CBBorderInsetLeft = "0"
																end
																db.Castbar.Player.Border.Inset.left = CBBorderInsetLeft
																
																oUF_LUI_player.CastbarBackdrop:SetBackdrop({
																edgeFile = LSM:Fetch("border", db.Castbar.Player.Border.Texture), edgeSize = db.Castbar.Player.Border.Thickness,
																	insets = {left = CBBorderInsetLeft, right = db.Castbar.Player.Border.Inset.right, top = db.Castbar.Player.Border.Inset.top, bottom = db.Castbar.Player.Border.Inset.bottom}
																})
																oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
															end,
													order = 4,
												},
												CBBorderInsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Player.Border.Inset.right end,
													set = function(self,CBBorderInsetRight)
																if CBBorderInsetRight == nil or CBBorderInsetRight == "" then
																	CBBorderInsetRight = "0"
																end
																db.Castbar.Player.Border.Inset.right = CBBorderInsetRight
																
																oUF_LUI_player.CastbarBackdrop:SetBackdrop({
																edgeFile = LSM:Fetch("border", db.Castbar.Player.Border.Texture), edgeSize = db.Castbar.Player.Border.Thickness,
																	insets = {left = db.Castbar.Player.Border.Inset.left, right = CBBorderInsetRight, top = db.Castbar.Player.Border.Inset.top, bottom = db.Castbar.Player.Border.Inset.bottom}
																})
																oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
															end,
													order = 5,
												},
												CBBorderInsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Player.Border.Inset.top end,
													set = function(self,CBBorderInsetTop)
																if CBBorderInsetTop == nil or CBBorderInsetTop == "" then
																	CBBorderInsetTop = "0"
																end
																db.Castbar.Player.Border.Inset.top = CBBorderInsetTop
																
																oUF_LUI_player.CastbarBackdrop:SetBackdrop({
																edgeFile = LSM:Fetch("border", db.Castbar.Player.Border.Texture), edgeSize = db.Castbar.Player.Border.Thickness,
																	insets = {left = db.Castbar.Player.Border.Inset.left, right = db.Castbar.Player.Border.Inset.right, top = CBBorderInsetTop, bottom = db.Castbar.Player.Border.Inset.bottom}
																})
																oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
															end,
													order = 6,
												},
												CBBorderInsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Player.Border.Inset.bottom end,
													set = function(self,CBBorderInsetBottom)
																if CBBorderInsetBottom == nil or CBBorderInsetBottom == "" then
																	CBBorderInsetBottom = "0"
																end
																db.Castbar.Player.Border.Inset.bottom = CBBorderInsetBottom
																
																oUF_LUI_player.CastbarBackdrop:SetBackdrop({
																edgeFile = LSM:Fetch("border", db.Castbar.Player.Border.Texture), edgeSize = db.Castbar.Player.Border.Thickness,
																	insets = {left = db.Castbar.Player.Border.Inset.left, right = db.Castbar.Player.Border.Inset.right, top = db.Castbar.Player.Border.Inset.top, bottom = CBBorderInsetBottom}
																})
																oUF_LUI_player.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
												oUF_LUI_player.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Player.Colors.Border.r,db.Castbar.Player.Colors.Border.g,db.Castbar.Player.Colors.Border.b,db.Castbar.Player.Colors.Border.a)
															end,
													order = 7,
												},
											},
										},
									},
								},
							},
						},
						Target = {
							name = "Target",
							disabled = function() return not db.Castbar.Enable end,
							type = "group",
							order = 6,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Target Castbar",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									order = 2,
									args = {
										CastbarEnable = {
											name = "Enable",
											desc = "Wether you want to show your Target Castbar or not.",
											type = "toggle",
											width = "full",
											get = function() return db.Castbar.Target.Enable end,
											set = function(self,CastbarEnable)
														db.Castbar.Target.Enable = not db.Castbar.Target.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										CastbarSize = {
											name = "Size/Position",
											type = "group",
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Target.Enable then
													return false
												else
													return true
												end
											end,
											guiInline = true,
											order = 3,
											args = {
												CastbarHeight = {
													name = "Height",
													desc = "Castbar Height.\n\nDefault: 30",
													type = "input",
													get = function() return db.Castbar.Target.Height end,
													set = function(self,CastbarHeight)
																if CastbarHeight == nil or CastbarHeight == "" then
																	CastbarHeight = "0"
																end
																db.Castbar.Target.Height = CastbarHeight
																oUF_LUI_target.Castbar:SetHeight(CastbarHeight)
															end,
													order = 1,
												},
												CastbarWidth = {
													name = "Width",
													desc = "Castbar Width.\n\nDefault: 360",
													type = "input",
													get = function() return db.Castbar.Target.Width end,
													set = function(self,CastbarWidth)
																if CastbarWidth == nil or CastbarWidth == "" then
																	CastbarWidth = "0"
																end
																db.Castbar.Target.Width = CastbarWidth
																oUF_LUI_target.Castbar:SetWidth(CastbarWidth)
															end,
													order = 2,
												},
												CastbarX = {
													name = "X Value",
													desc = "X Value for your Castbar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: 20",
													type = "input",
													get = function() return db.Castbar.Target.X end,
													set = function(self,CastbarX)
																if CastbarX == nil or CastbarX == "" then
																	CastbarX = "0"
																end
																db.Castbar.Target.X = CastbarX
																oUF_LUI_target.Castbar:SetPoint("BOTTOM", UIParent, "BOTTOM", CastbarX, db.Castbar.Target.Y)
															end,
													order = 3,
												},
												CastbarY = {
													name = "Y Value",
													desc = "Y Value for your Castbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 205",
													type = "input",
													get = function() return db.Castbar.Target.Y end,
													set = function(self,CastbarY)
																if CastbarY == nil or CastbarY == "" then
																	CastbarY = "0"
																end
																db.Castbar.Target.Y = CastbarY
																oUF_LUI_target.Castbar:SetPoint("BOTTOM", UIParent, "BOTTOM", db.Castbar.Target.X, CastbarY)
															end,
													order = 4,
												},
											},
										},
									},
								},
								CastbarColors = {
									name = "Colors",
									type = "group",
									disabled = function()
										if db.Castbar.Enable and db.Castbar.Target.Enable then
											return false
										else
											return true
										end
									end,
									order = 3,
									args = {
										Colors = {
											name = "Castbar Colors",
											type = "group",
											guiInline = true,
											order = 1,
											args = {
												CBColorEnable = {
													name = "Individual Castbar Color",
													desc = "Wether you want an individual Castbar Color or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Target.IndividualColor end,
													set = function(self,CBColorEnable)
																db.Castbar.Target.IndividualColor = not db.Castbar.Target.IndividualColor
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CBColor = {
													name = "Castbar Color",
													desc = "Choose an individual Castbar-Color.\n\nDefault: "..color_r.." / "..color_g.." / "..color_b.." / "..1-defaults.profile.Castbar.Target.Colors.Bar.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Target.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Target.Colors.Bar.r, db.Castbar.Target.Colors.Bar.g, db.Castbar.Target.Colors.Bar.b, db.Castbar.Target.Colors.Bar.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Target.Colors.Bar.r = r
															db.Castbar.Target.Colors.Bar.g = g
															db.Castbar.Target.Colors.Bar.b = b
															db.Castbar.Target.Colors.Bar.a = a
															oUF_LUI_target.Castbar:SetStatusBarColor(r,g,b,a)
														end,
													order = 2,
												},
												CBBGColor = {
													name = "Castbar BG Color",
													desc = "Choose an individual Castbar-Background-Color.\n\nDefault: "..defaults.profile.Castbar.Target.Colors.Background.r.." / "..defaults.profile.Castbar.Target.Colors.Background.g.." / "..defaults.profile.Castbar.Target.Colors.Background.b.." / "..1-defaults.profile.Castbar.Target.Colors.Background.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Target.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Target.Colors.Background.r, db.Castbar.Target.Colors.Background.g, db.Castbar.Target.Colors.Background.b, db.Castbar.Target.Colors.Background.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Target.Colors.Background.r = r
															db.Castbar.Target.Colors.Background.g = g
															db.Castbar.Target.Colors.Background.b = b
															db.Castbar.Target.Colors.Background.a = a
															oUF_LUI_target.Castbar.bg:SetVertexColor(r,g,b,a)
														end,
													order = 3,
												},
												CBBorderColor = {
													name = "Castbar Border Color",
													desc = "Choose an individual Castbar-Border-Color.\n\nDefaults: "..defaults.profile.Castbar.Target.Colors.Border.r.." / "..defaults.profile.Castbar.Target.Colors.Border.g.." / "..defaults.profile.Castbar.Target.Colors.Border.b.." / "..1-defaults.profile.Castbar.Target.Colors.Border.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Target.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Target.Colors.Border.r, db.Castbar.Target.Colors.Border.g, db.Castbar.Target.Colors.Border.b, db.Castbar.Target.Colors.Border.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Target.Colors.Border.r = r
															db.Castbar.Target.Colors.Border.g = g
															db.Castbar.Target.Colors.Border.b = b
															db.Castbar.Target.Colors.Border.a = a
															oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(r,g,b,a)
														end,
													order = 4, 
												},
												CBNameColor = {
													name = "Castbar Name Text Color",
													desc = "Choose an individual Castbar Name Text Color.\n\nDefaults: "..defaults.profile.Castbar.Target.Colors.Name.r.." / "..defaults.profile.Castbar.Target.Colors.Name.g.." / "..defaults.profile.Castbar.Target.Colors.Name.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Target.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Target.Colors.Name.r, db.Castbar.Target.Colors.Name.g, db.Castbar.Target.Colors.Name.b end,
													set = function(_,r,g,b)
															db.Castbar.Target.Colors.Name.r = r
															db.Castbar.Target.Colors.Name.g = g
															db.Castbar.Target.Colors.Name.b = b
															oUF_LUI_target.Castbar.Text:SetTextColor(r, g, b)
														end,
													order = 5, 
												},
												CBTimeColor = {
													name = "Castbar Time Text Color",
													desc = "Choose an individual Castbar Time Text Color.\n\nDefaults: "..defaults.profile.Castbar.Target.Colors.Time.r.." / "..defaults.profile.Castbar.Target.Colors.Time.g.." / "..defaults.profile.Castbar.Target.Colors.Time.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Target.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Target.Colors.Time.r, db.Castbar.Target.Colors.Time.g, db.Castbar.Target.Colors.Time.b end,
													set = function(_,r,g,b)
															db.Castbar.Target.Colors.Time.r = r
															db.Castbar.Target.Colors.Time.g = g
															db.Castbar.Target.Colors.Time.b = b
															oUF_LUI_target.Castbar.Time:SetTextColor(r, g, b)
														end,
													order = 6, 
												},
											},
										},
										CastbarTexture = {
											name = "Castbar Textures",
											type = "group",
											guiInline = true,
											order = 2,
											args = {
												CBTexture = {
													name = "Bar Texture",
													desc = "Choose your Castbar Texture!\nDefault: LUI_Gradient",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Target.Texture end,
													set = function(self, CBTexture)
															db.Castbar.Target.Texture = CBTexture
															oUF_LUI_target.Castbar:SetStatusBarTexture(LSM:Fetch("statusbar", CBTexture))
														end,
													order = 1,
												},
												CBTextureBG = {
													name = "Background Texture",
													desc = "Choose your Castbar Background Texture!\nDefault: LUI_Minimalist",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Target.TextureBG end,
													set = function(self, CBTextureBG)
															db.Castbar.Target.TextureBG = CBTextureBG
															oUF_LUI_target.Castbar.bg:SetTexture(LSM:Fetch("statusbar", CBTextureBG))
														end,
													order = 2,
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									order = 4,
									args = {
										CastbarText = {
											name = "Castbar Text",
											type = "group",
											guiInline = true,
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Target.Enable then
													return false
												else
													return true
												end
											end,
											order = 7,
											args = {
												CastbarNameFont = {
													name = "Name Font",
													desc = "Choose your Font for your Castbar Name Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function() return db.Castbar.Target.Text.Name.Font end,
													set = function(self, CastbarNameFont)
															db.Castbar.Target.Text.Name.Font = CastbarNameFont
															oUF_LUI_target.Castbar.Text:SetFont(LSM:Fetch("font", CastbarNameFont),db.Castbar.Target.Text.Name.Size)
														end,
													order = 1,
												},
												CastbarNameFontsize = {
													name = "Size",
													desc = "Choose your Castbar Name Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Target.Text.Name.Size end,
													set = function(_, CastbarNameFontsize) 
															db.Castbar.Target.Text.Name.Size = CastbarNameFontsize
															oUF_LUI_target.Castbar.Text:SetFont(LSM:Fetch("font", db.Castbar.Target.Text.Name.Font),CastbarNameFontsize)
														end,
													order = 2,
												},
												CastbarTimeFont = {
													name = "Time Font",
													desc = "Choose your Font for your Castbar Time Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function()
															return db.Castbar.Target.Text.Time.Font
														end,
													set = function(self, CastbarTimeFont)
															db.Castbar.Target.Text.Time.Font = CastbarTimeFont
															oUF_LUI_target.Castbar.Time:SetFont(LSM:Fetch("font", CastbarTimeFont),db.Castbar.Target.Text.Time.Size)
														end,
													order = 3,
												},
												CastbarTimeFontsize = {
													name = "Size",
													desc = "Choose your Castbar Time Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Target.Text.Time.Size end,
													set = function(_, CastbarTimeFontsize) 
															db.Castbar.Target.Text.Time.Size = CastbarTimeFontsize
															oUF_LUI_target.Castbar.Time:SetFont(LSM:Fetch("font", db.Castbar.Target.Text.Time.Font),CastbarTimeFontsize)
														end,
													order = 4,
												},
												CastbarName = {
													name = "Show Name Text",
													desc = "Wether you want to show your Castbar Name Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Target.Text.Name.Enable end,
													set = function(self,CastbarName)
																db.Castbar.Target.Text.Name.Enable = not db.Castbar.Target.Text.Name.Enable
																if CastbarName == true then
																	oUF_LUI_target.Castbar.Text:Show()
																else
																	oUF_LUI_target.Castbar.Text:Hide()
																end
															end,
													order = 5,
												},
												CastbarTime = {
													name = "Show Time Text",
													desc = "Wether you want to show your Castbar Time Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Target.Text.Time.Enable end,
													set = function(self,CastbarTime)
																db.Castbar.Target.Text.Time.Enable = not db.Castbar.Target.Text.Time.Enable
																if CastbarTime == true then
																	oUF_LUI_target.Castbar.Time:Show()
																else
																	oUF_LUI_target.Castbar.Time:Hide()
																end
															end,
													order = 6,
												},
												CastbarTimeMax = {
													name = "Show Cast Time",
													desc = "Wether you want to show your Castbar Cast Time or not.",
													type = "toggle",
													width = "full",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Target.Enable then
																if db.Castbar.Target.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													get = function() return db.Castbar.Target.Text.Time.ShowMax end,
													set = function(self,CastbarTimeMax)
																db.Castbar.Target.Text.Time.ShowMax = not db.Castbar.Target.Text.Time.ShowMax
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 7,
												},
												CastbarNameOffsetX = {
													name = "Name Text X Offset",
													desc = "Castbar Name Text X Offset.\nDefault: 5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Target.Enable then
																if db.Castbar.Target.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Target.Text.Name.OffsetX end,
													set = function(self,CastbarNameOffsetX)
																if CastbarNameOffsetX == nil or CastbarNameOffsetX == "" then
																	CastbarNameOffsetX = "0"
																end
																db.Castbar.Target.Text.Name.OffsetX = CastbarNameOffsetX
																oUF_LUI_target.Castbar.Text:SetPoint("LEFT", tonumber(CastbarNameOffsetX), tonumber(db.Castbar.Target.Text.Name.OffsetY))
															end,
													order = 8,
												},
												CastbarNameOffsetY = {
													name = "Name Text Y Offset",
													desc = "Castbar Name Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Target.Enable then
																if db.Castbar.Target.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Target.Text.Name.OffsetY end,
													set = function(self,CastbarNameOffsetY)
																if CastbarNameOffsetY == nil or CastbarNameOffsetY == "" then
																	CastbarNameOffsetY = "0"
																end
																db.Castbar.Target.Text.Name.OffsetY = CastbarNameOffsetY
																oUF_LUI_target.Castbar.Text:SetPoint("LEFT", tonumber(db.Castbar.Target.Text.Name.OffsetX), tonumber(CastbarNameOffsetY))
															end,
													order = 9,
												},
												CastbarTimeOffsetX = {
													name = "Time Text X Offset",
													desc = "Castbar Time Text X Offset.\nDefault: -5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Target.Enable then
																if db.Castbar.Target.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Target.Text.Time.OffsetX end,
													set = function(self,CastbarTimeOffsetX)
																if CastbarTimeOffsetX == nil or CastbarTimeOffsetX == "" then
																	CastbarTimeOffsetX = "0"
																end
																db.Castbar.Target.Text.Time.OffsetX = CastbarTimeOffsetX
																oUF_LUI_target.Castbar.Time:SetPoint("RIGHT", tonumber(CastbarTimeOffsetX), tonumber(db.Castbar.Target.Text.Time.OffsetY))
															end,
													order = 10,
												},
												CastbarTimeOffsetY = {
													name = "Time Text Y Offset",
													desc = "Castbar Time Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Target.Enable then
																if db.Castbar.Target.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Target.Text.Time.OffsetY end,
													set = function(self,CastbarTimeOffsetY)
																if CastbarTimeOffsetY == nil or CastbarTimeOffsetY == "" then
																	CastbarTimeOffsetY = "0"
																end
																db.Castbar.Target.Text.Time.OffsetY = CastbarTimeOffsetY
																oUF_LUI_target.Castbar.Time:SetPoint("RIGHT", tonumber(db.Castbar.Target.Text.Time.OffsetX), tonumber(CastbarTimeOffsetY))
															end,
													order = 11,
												},
											},
										},
									},
								},
								Border = {
									name = "Border",
									type = "group",
									order = 5,
									args = {
										CastbarBorder = {
											name = "Castbar Border",
											type = "group",
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Target.Enable then
													return false
												else
													return true
												end
											end,
											guiInline = true,
											order = 6,
											args = {
												CBBorder = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: glow",
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.Castbar.Target.Border.Texture end,
													set = function(self, CBBorder)
															db.Castbar.Target.Border.Texture = CBBorder
															oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", CBBorder), edgeSize = db.Castbar.Target.Border.Thickness,
																insets = {left = db.Castbar.Target.Border.Inset.left, right = db.Castbar.Target.Border.Inset.right, top = db.Castbar.Target.Border.Inset.top, bottom = db.Castbar.Target.Border.Inset.bottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
														end,
													order = 1,
												},
												CBBorderThickness = {
													name = "Edge Size",
													desc = "Value for your Castbar Border Edge Size\nDefault: 4",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Target.Border.Thickness end,
													set = function(self,CBBorderThickness)
																if CBBorderThickness == nil or CBBorderThickness == "" then
																	CBBorderThickness = "0"
																end
																db.Castbar.Target.Border.Thickness = CBBorderThickness
																oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Target.Border.Texture), edgeSize = CBBorderThickness,
																insets = {left = db.Castbar.Target.Border.Inset.left, right = db.Castbar.Target.Border.Inset.right, top = db.Castbar.Target.Border.Inset.top, bottom = db.Castbar.Target.Border.Inset.bottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
															end,
													order = 2,
												},
												empty235 = {
													name = "   ",
													type = "description",
													order = 3,
												},
												CBBorderInsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Target.Border.Inset.left end,
													set = function(self,CBBorderInsetLeft)
																if CBBorderInsetLeft == nil or CBBorderInsetLeft == "" then
																	CBBorderInsetLeft = "0"
																end
																db.Castbar.Target.Border.Inset.left = CBBorderInsetLeft
																oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Target.Border.Texture), edgeSize = db.Castbar.Target.Border.Thickness,
																insets = {left = CBBorderInsetLeft, right = db.Castbar.Target.Border.Inset.right, top = db.Castbar.Target.Border.Inset.top, bottom = db.Castbar.Target.Border.Inset.bottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
															end,
													order = 4,
												},
												CBBorderInsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Target.Border.Inset.right end,
													set = function(self,CBBorderInsetRight)
																if CBBorderInsetRight == nil or CBBorderInsetRight == "" then
																	CBBorderInsetRight = "0"
																end
																db.Castbar.Target.Border.Inset.right = CBBorderInsetRight
																oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Target.Border.Texture), edgeSize = db.Castbar.Target.Border.Thickness,
																insets = {left = db.Castbar.Target.Border.Inset.left, right = CBBorderInsetRight, top = db.Castbar.Target.Border.Inset.top, bottom = db.Castbar.Target.Border.Inset.bottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
															end,
													order = 5,
												},
												CBBorderInsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Target.Border.Inset.top end,
													set = function(self,CBBorderInsetTop)
																if CBBorderInsetTop == nil or CBBorderInsetTop == "" then
																	CBBorderInsetTop = "0"
																end
																db.Castbar.Target.Border.Inset.top = CBBorderInsetTop
																oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Target.Border.Texture), edgeSize = db.Castbar.Target.Border.Thickness,
																insets = {left = db.Castbar.Target.Border.Inset.left, right = db.Castbar.Target.Border.Inset.right, top = CBBorderInsetTop, bottom = db.Castbar.Target.Border.Inset.bottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
															end,
													order = 6,
												},
												CBBorderInsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Target.Border.Inset.bottom end,
													set = function(self,CBBorderInsetBottom)
																if CBBorderInsetBottom == nil or CBBorderInsetBottom == "" then
																	CBBorderInsetBottom = "0"
																end
																db.Castbar.Target.Border.Inset.bottom = CBBorderInsetBottom
																oUF_LUI_target.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Target.Border.Texture), edgeSize = db.Castbar.Target.Border.Thickness,
																insets = {left = db.Castbar.Target.Border.Inset.left, right = db.Castbar.Target.Border.Inset.right, top = db.Castbar.Target.Border.Inset.top, bottom = CBBorderInsetBottom}
															})
															oUF_LUI_target.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_target.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Target.Colors.Border.r,db.Castbar.Target.Colors.Border.g,db.Castbar.Target.Colors.Border.b,db.Castbar.Target.Colors.Border.a)
															end,
													order = 7,
												},
											},
										},
									},
								},
							},
						},
						Focus = {
							name = "Focus",
							disabled = function() return not db.Castbar.Enable end,
							type = "group",
							order = 7,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Focus Castbar",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									order = 2,
									args = {
										FocusCastbarEnable = {
											name = "Enable",
											desc = "Wether you want to show your Focus Castbar or not.",
											type = "toggle",
											width = "full",
											get = function() return db.Castbar.Focus.Enable end,
											set = function(self,FocusCastbarEnable)
														db.Castbar.Focus.Enable = not db.Castbar.Focus.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										FocusCastbarSize = {
											name = "Size/Position",
											type = "group",
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Focus.Enable then
													return false
												else
													return true
												end
											end,
											guiInline = true,
											order = 3,
											args = {
												FocusCastbarHeight = {
													name = "Height",
													desc = "Castbar Height.\n\nDefault: 26",
													type = "input",
													get = function() return db.Castbar.Focus.Height end,
													set = function(self,FocusCastbarHeight)
																if FocusCastbarHeight == nil or FocusCastbarHeight == "" then
																	FocusCastbarHeight = "0"
																end
																db.Castbar.Focus.Height = FocusCastbarHeight
																oUF_LUI_focus.Castbar:SetHeight(FocusCastbarHeight)
															end,
													order = 1,
												},
												FocusCastbarWidth = {
													name = "Width",
													desc = "Castbar Width.\n\nDefault: 200",
													type = "input",
													get = function() return db.Castbar.Focus.Width end,
													set = function(self,FocusCastbarWidth)
																if FocusCastbarWidth == nil or FocusCastbarWidth == "" then
																	FocusCastbarWidth = "0"
																end
																db.Castbar.Focus.Width = FocusCastbarWidth
																oUF_LUI_focus.Castbar:SetWidth(FocusCastbarWidth)
															end,
													order = 2,
												},
												FocusCastbarX = {
													name = "X Value",
													desc = "X Value for your Castbar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: 0",
													type = "input",
													get = function() return db.Castbar.Focus.X end,
													set = function(self,FocusCastbarX)
																if FocusCastbarX == nil or FocusCastbarX == "" then
																	FocusCastbarX = "0"
																end
																db.Castbar.Focus.X = FocusCastbarX
																oUF_LUI_focus.Castbar:SetPoint("TOPRIGHT", oUF_LUI_focus.Power, "BOTTOMRIGHT", FocusCastbarX, db.Castbar.Focus.Y)
															end,
													order = 3,
												},
												FocusCastbarY = {
													name = "Y Value",
													desc = "Y Value for your Castbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 70",
													type = "input",
													get = function() return db.Castbar.Focus.Y end,
													set = function(self,FocusCastbarY)
																if FocusCastbarY == nil or FocusCastbarY == "" then
																	FocusCastbarY = "0"
																end
																db.Castbar.Focus.Y = FocusCastbarY
																oUF_LUI_focus.Castbar:SetPoint("TOPRIGHT", oUF_LUI_focus.Power, "BOTTOMRIGHT", db.Castbar.Focus.X, FocusCastbarY)
															end,
													order = 4,
												},
											},
										},
									},
								},
								CastbarColors = {
									name = "Colors",
									type = "group",
									disabled = function()
										if db.Castbar.Enable and db.Castbar.Focus.Enable then
											return false
										else
											return true
										end
									end,
									order = 3,
									args = {
										Colors = {
											name = "Castbar Colors",
											type = "group",
											guiInline = true,
											order = 1,
											args = {
												CBColorEnable = {
													name = "Individual Castbar Color",
													desc = "Wether you want an individual Castbar Color or not.\n\nNote:\nYou have to reload the UI.\nType /rl",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Focus.IndividualColor end,
													set = function(self,CBColorEnable)
																db.Castbar.Focus.IndividualColor = not db.Castbar.Focus.IndividualColor
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CBColor = {
													name = "Castbar Color",
													desc = "Choose an individual Castbar-Color.\n\nDefault: "..color_r.." / "..color_g.." / "..color_b.." / "..1-defaults.profile.Castbar.Focus.Colors.Bar.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Focus.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Focus.Colors.Bar.r, db.Castbar.Focus.Colors.Bar.g, db.Castbar.Focus.Colors.Bar.b, db.Castbar.Focus.Colors.Bar.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Focus.Colors.Bar.r = r
															db.Castbar.Focus.Colors.Bar.g = g
															db.Castbar.Focus.Colors.Bar.b = b
															db.Castbar.Focus.Colors.Bar.a = a
															oUF_LUI_focus.Castbar:SetStatusBarColor(r,g,b,a)
														end,
													order = 2,
												},
												CBBGColor = {
													name = "Castbar BG Color",
													desc = "Choose an individual Castbar-Background-Color.\n\nDefault: "..defaults.profile.Castbar.Focus.Colors.Background.r.." / "..defaults.profile.Castbar.Focus.Colors.Background.g.." / "..defaults.profile.Castbar.Focus.Colors.Background.b.." / "..1-defaults.profile.Castbar.Focus.Colors.Background.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Focus.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Focus.Colors.Background.r, db.Castbar.Focus.Colors.Background.g, db.Castbar.Focus.Colors.Background.b, db.Castbar.Focus.Colors.Background.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Focus.Colors.Background.r = r
															db.Castbar.Focus.Colors.Background.g = g
															db.Castbar.Focus.Colors.Background.b = b
															db.Castbar.Focus.Colors.Background.a = a
															oUF_LUI_focus.Castbar.bg:SetVertexColor(r,g,b,a)
														end,
													order = 3,
												},
												CBBorderColor = {
													name = "Castbar Border Color",
													desc = "Choose an individual Castbar-Border-Color.\n\nDefaults: "..defaults.profile.Castbar.Focus.Colors.Border.r.." / "..defaults.profile.Castbar.Focus.Colors.Border.g.." / "..defaults.profile.Castbar.Focus.Colors.Border.b.." / "..1-defaults.profile.Castbar.Focus.Colors.Border.a,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Focus.IndividualColor end,
													hasAlpha = true,
													get = function() return db.Castbar.Focus.Colors.Border.r, db.Castbar.Focus.Colors.Border.g, db.Castbar.Focus.Colors.Border.b, db.Castbar.Focus.Colors.Border.a end,
													set = function(_,r,g,b,a)
															db.Castbar.Focus.Colors.Border.r = r
															db.Castbar.Focus.Colors.Border.g = g
															db.Castbar.Focus.Colors.Border.b = b
															db.Castbar.Focus.Colors.Border.a = a
															oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(r,g,b,a)
														end,
													order = 4, 
												},
												CBNameColor = {
													name = "Castbar Name Text Color",
													desc = "Choose an individual Castbar Name Text Color.\n\nDefaults: "..defaults.profile.Castbar.Focus.Colors.Name.r.." / "..defaults.profile.Castbar.Focus.Colors.Name.g.." / "..defaults.profile.Castbar.Focus.Colors.Name.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Focus.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Focus.Colors.Name.r, db.Castbar.Focus.Colors.Name.g, db.Castbar.Focus.Colors.Name.b end,
													set = function(_,r,g,b)
															db.Castbar.Focus.Colors.Name.r = r
															db.Castbar.Focus.Colors.Name.g = g
															db.Castbar.Focus.Colors.Name.b = b
															oUF_LUI_focus.Castbar.Text:SetTextColor(r, g, b)
														end,
													order = 5, 
												},
												CBTimeColor = {
													name = "Castbar Time Text Color",
													desc = "Choose an individual Castbar Time Text Color.\n\nDefaults: "..defaults.profile.Castbar.Focus.Colors.Time.r.." / "..defaults.profile.Castbar.Focus.Colors.Time.g.." / "..defaults.profile.Castbar.Focus.Colors.Time.b,
													type = "color",
													width = "full",
													disabled = function() return not db.Castbar.Focus.IndividualColor end,
													hasAlpha = false,
													get = function() return db.Castbar.Focus.Colors.Time.r, db.Castbar.Focus.Colors.Time.g, db.Castbar.Focus.Colors.Time.b end,
													set = function(_,r,g,b)
															db.Castbar.Focus.Colors.Time.r = r
															db.Castbar.Focus.Colors.Time.g = g
															db.Castbar.Focus.Colors.Time.b = b
															oUF_LUI_focus.Castbar.Time:SetTextColor(r, g, b)
														end,
													order = 6, 
												},
											},
										},
										CastbarTexture = {
											name = "Castbar Textures",
											type = "group",
											guiInline = true,
											order = 2,
											args = {
												CBTexture = {
													name = "Bar Texture",
													desc = "Choose your Castbar Texture!\nDefault: LUI_Gradient",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Focus.Texture end,
													set = function(self, CBTexture)
															db.Castbar.Focus.Texture = CBTexture
															oUF_LUI_focus.Castbar:SetStatusBarTexture(LSM:Fetch("statusbar", CBTexture))
														end,
													order = 1,
												},
												CBTextureBG = {
													name = "Background Texture",
													desc = "Choose your Castbar Background Texture!\nDefault: LUI_Minimalist",
													type = "select",
													dialogControl = "LSM30_Statusbar",
													values = widgetLists.statusbar,
													get = function() return db.Castbar.Focus.TextureBG end,
													set = function(self, CBTextureBG)
															db.Castbar.Focus.TextureBG = CBTextureBG
															oUF_LUI_focus.Castbar.bg:SetTexture(LSM:Fetch("statusbar", CBTextureBG))
														end,
													order = 2,
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									order = 4,
									args = {
										CastbarText = {
											name = "Castbar Text",
											type = "group",
											guiInline = true,
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Focus.Enable then
													return false
												else
													return true
												end
											end,
											order = 7,
											args = {
												CastbarNameFont = {
													name = "Name Font",
													desc = "Choose your Font for your Castbar Name Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function() return db.Castbar.Focus.Text.Name.Font end,
													set = function(self, CastbarNameFont)
															db.Castbar.Focus.Text.Name.Font = CastbarNameFont
															oUF_LUI_focus.Castbar.Text:SetFont(LSM:Fetch("font", CastbarNameFont),db.Castbar.Focus.Text.Name.Size)
														end,
													order = 1,
												},
												CastbarNameFontsize = {
													name = "Size",
													desc = "Choose your Castbar Name Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Focus.Text.Name.Size end,
													set = function(_, CastbarNameFontsize) 
															db.Castbar.Focus.Text.Name.Size = CastbarNameFontsize
															oUF_LUI_focus.Castbar.Text:SetFont(LSM:Fetch("font", db.Castbar.Focus.Text.Name.Font),CastbarNameFontsize)
														end,
													order = 2,
												},
												CastbarTimeFont = {
													name = "Time Font",
													desc = "Choose your Font for your Castbar Time Text!\n\nDefault: vibrocen",
													type = "select",
													dialogControl = "LSM30_Font",
													values = widgetLists.font,
													get = function() return db.Castbar.Focus.Text.Time.Font end,
													set = function(self, CastbarTimeFont)
															db.Castbar.Focus.Text.Time.Font = CastbarTimeFont
															oUF_LUI_focus.Castbar.Time:SetFont(LSM:Fetch("font", CastbarTimeFont),db.Castbar.Focus.Text.Time.Size)
														end,
													order = 3,
												},
												CastbarTimeFontsize = {
													name = "Size",
													desc = "Choose your Castbar Time Text Fontsize!\n Default: 14",
													type = "range",
													min = 10,
													max = 40,
													step = 1,
													get = function() return db.Castbar.Focus.Text.Time.Size end,
													set = function(_, CastbarTimeFontsize) 
															db.Castbar.Focus.Text.Time.Size = CastbarTimeFontsize
															oUF_LUI_focus.Castbar.Time:SetFont(LSM:Fetch("font", db.Castbar.Focus.Text.Time.Font),CastbarTimeFontsize)
														end,
													order = 4,
												},
												CastbarName = {
													name = "Show Name Text",
													desc = "Wether you want to show your Castbar Name Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Focus.Text.Name.Enable end,
													set = function(self,CastbarName)
																db.Castbar.Focus.Text.Name.Enable = not db.Castbar.Focus.Text.Name.Enable
																if CastbarName == true then
																	oUF_LUI_focus.Castbar.Text:Show()
																else
																	oUF_LUI_focus.Castbar.Text:Hide()
																end
															end,
													order = 5,
												},
												CastbarTime = {
													name = "Show Time Text",
													desc = "Wether you want to show your Castbar Time Text or not.",
													type = "toggle",
													width = "full",
													get = function() return db.Castbar.Focus.Text.Time.Enable end,
													set = function(self,CastbarTime)
																db.Castbar.Focus.Text.Time.Enable = not db.Castbar.Focus.Text.Time.Enable
																if CastbarTime == true then
																	oUF_LUI_focus.Castbar.Time:Show()
																else
																	oUF_LUI_focus.Castbar.Time:Hide()
																end
															end,
													order = 6,
												},
												CastbarTimeMax = {
													name = "Show Cast Time",
													desc = "Wether you want to show your Castbar Cast Time or not.",
													type = "toggle",
													width = "full",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Focus.Enable then
																if db.Castbar.Focus.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													get = function() return db.Castbar.Focus.Text.Time.ShowMax end,
													set = function(self,CastbarTimeMax)
																db.Castbar.Focus.Text.Time.ShowMax = not db.Castbar.Focus.Text.Time.ShowMax
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 7,
												},
												CastbarNameOffsetX = {
													name = "Name Text X Offset",
													desc = "Castbar Name Text X Offset.\nDefault: 5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Focus.Enable then
																if db.Castbar.Focus.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Focus.Text.Name.OffsetX end,
													set = function(self,CastbarNameOffsetX)
																if CastbarNameOffsetX == nil or CastbarNameOffsetX == "" then
																	CastbarNameOffsetX = "0"
																end
																db.Castbar.Focus.Text.Name.OffsetX = CastbarNameOffsetX
																oUF_LUI_focus.Castbar.Text:SetPoint("LEFT", tonumber(CastbarNameOffsetX), tonumber(db.Castbar.Focus.Text.Name.OffsetY))
															end,
													order = 8,
												},
												CastbarNameOffsetY = {
													name = "Name Text Y Offset",
													desc = "Castbar Name Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Focus.Enable then
																if db.Castbar.Focus.Text.Name.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Focus.Text.Name.OffsetY end,
													set = function(self,CastbarNameOffsetY)
																if CastbarNameOffsetY == nil or CastbarNameOffsetY == "" then
																	CastbarNameOffsetY = "0"
																end
																db.Castbar.Focus.Text.Name.OffsetY = CastbarNameOffsetY
																oUF_LUI_focus.Castbar.Text:SetPoint("LEFT", tonumber(db.Castbar.Focus.Text.Name.OffsetX), tonumber(CastbarNameOffsetY))
															end,
													order = 9,
												},
												CastbarTimeOffsetX = {
													name = "Time Text X Offset",
													desc = "Castbar Time Text X Offset.\nDefault: -5",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Focus.Enable then
																if db.Castbar.Focus.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Focus.Text.Time.OffsetX end,
													set = function(self,CastbarTimeOffsetX)
																if CastbarTimeOffsetX == nil or CastbarTimeOffsetX == "" then
																	CastbarTimeOffsetX = "0"
																end
																db.Castbar.Focus.Text.Time.OffsetX = CastbarTimeOffsetX
																oUF_LUI_focus.Castbar.Time:SetPoint("RIGHT", tonumber(CastbarTimeOffsetX), tonumber(db.Castbar.Focus.Text.Time.OffsetY))
															end,
													order = 10,
												},
												CastbarTimeOffsetY = {
													name = "Time Text Y Offset",
													desc = "Castbar Time Text Y Offset.\nDefault: 0",
													disabled = function()
														if db.Castbar.Enable then
															if db.Castbar.Focus.Enable then
																if db.Castbar.Focus.Text.Time.Enable then
																	return false
																else
																	return true
																end
															else
																return true
															end
														else
															return true
														end
													end,
													type = "input",
													get = function() return db.Castbar.Focus.Text.Time.OffsetY end,
													set = function(self,CastbarTimeOffsetY)
																if CastbarTimeOffsetY == nil or CastbarTimeOffsetY == "" then
																	CastbarTimeOffsetY = "0"
																end
																db.Castbar.Focus.Text.Time.OffsetY = CastbarTimeOffsetY
																oUF_LUI_focus.Castbar.Time:SetPoint("RIGHT", tonumber(db.Castbar.Focus.Text.Time.OffsetX), tonumber(CastbarTimeOffsetY))
															end,
													order = 11,
												},
											},
										},
									},
								},
								Border = {
									name = "Border",
									type = "group",
									order = 5,
									args = {
										CastbarBorder = {
											name = "Castbar Border",
											type = "group",
											disabled = function()
												if db.Castbar.Enable and db.Castbar.Focus.Enable then
													return false
												else
													return true
												end
											end,
											guiInline = true,
											order = 6,
											args = {
												CBBorder = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: glow",
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.Castbar.Focus.Border.Texture end,
													set = function(self, CBBorder)
															db.Castbar.Focus.Border.Texture = CBBorder
															oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", CBBorder), edgeSize = db.Castbar.Focus.Border.Thickness,
																insets = {left = db.Castbar.Focus.Border.Inset.left, right = db.Castbar.Focus.Border.Inset.right, top = db.Castbar.Focus.Border.Inset.top, bottom = db.Castbar.Focus.Border.Inset.bottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
														end,
													order = 1,
												},
												CBBorderThickness = {
													name = "Edge Size",
													desc = "Value for your Castbar Border Edge Size\nDefault: 4",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Focus.Border.Thickness end,
													set = function(self,CBBorderThickness)
																if CBBorderThickness == nil or CBBorderThickness == "" then
																	CBBorderThickness = "0"
																end
																db.Castbar.Focus.Border.Thickness = CBBorderThickness
																oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Focus.Border.Texture), edgeSize = CBBorderThickness,
																insets = {left = db.Castbar.Focus.Border.Inset.left, right = db.Castbar.Focus.Border.Inset.right, top = db.Castbar.Focus.Border.Inset.top, bottom = db.Castbar.Focus.Border.Inset.bottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
															end,
													order = 2,
												},
												empty235 = {
													name = "   ",
													type = "description",
													order = 3,
												},
												CBBorderInsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Focus.Border.Inset.left end,
													set = function(self,CBBorderInsetLeft)
																if CBBorderInsetLeft == nil or CBBorderInsetLeft == "" then
																	CBBorderInsetLeft = "0"
																end
																db.Castbar.Focus.Border.Inset.left = CBBorderInsetLeft
																oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Focus.Border.Texture), edgeSize = db.Castbar.Focus.Border.Thickness,
																insets = {left = CBBorderInsetLeft, right = db.Castbar.Focus.Border.Inset.right, top = db.Castbar.Focus.Border.Inset.top, bottom = db.Castbar.Focus.Border.Inset.bottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
															end,
													order = 4,
												},
												CBBorderInsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Focus.Border.Inset.right end,
													set = function(self,CBBorderInsetRight)
																if CBBorderInsetRight == nil or CBBorderInsetRight == "" then
																	CBBorderInsetRight = "0"
																end
																db.Castbar.Focus.Border.Inset.right = CBBorderInsetRight
																oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Focus.Border.Texture), edgeSize = db.Castbar.Focus.Border.Thickness,
																insets = {left = db.Castbar.Focus.Border.Inset.left, right = CBBorderInsetRight, top = db.Castbar.Focus.Border.Inset.top, bottom = db.Castbar.Focus.Border.Inset.bottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
															end,
													order = 5,
												},
												CBBorderInsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Focus.Border.Inset.top end,
													set = function(self,CBBorderInsetTop)
																if CBBorderInsetTop == nil or CBBorderInsetTop == "" then
																	CBBorderInsetTop = "0"
																end
																db.Castbar.Focus.Border.Inset.top = CBBorderInsetTop
																oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Focus.Border.Texture), edgeSize = db.Castbar.Focus.Border.Thickness,
																insets = {left = db.Castbar.Focus.Border.Inset.left, right = db.Castbar.Focus.Border.Inset.right, top = CBBorderInsetTop, bottom = db.Castbar.Focus.Border.Inset.bottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
															end,
													order = 6,
												},
												CBBorderInsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: 3",
													type = "input",
													width = "half",
													get = function() return db.Castbar.Focus.Border.Inset.bottom end,
													set = function(self,CBBorderInsetBottom)
																if CBBorderInsetBottom == nil or CBBorderInsetBottom == "" then
																	CBBorderInsetBottom = "0"
																end
																db.Castbar.Focus.Border.Inset.bottom = CBBorderInsetBottom
																oUF_LUI_focus.CastbarBackdrop:SetBackdrop({
															edgeFile = LSM:Fetch("border", db.Castbar.Focus.Border.Texture), edgeSize = db.Castbar.Focus.Border.Thickness,
																insets = {left = db.Castbar.Focus.Border.Inset.left, right = db.Castbar.Focus.Border.Inset.right, top = db.Castbar.Focus.Border.Inset.top, bottom = CBBorderInsetBottom}
															})
															oUF_LUI_focus.CastbarBackdrop:SetBackdropColor(0, 0, 0, 0)
								oUF_LUI_focus.CastbarBackdrop:SetBackdropBorderColor(db.Castbar.Focus.Colors.Border.r,db.Castbar.Focus.Colors.Border.g,db.Castbar.Focus.Colors.Border.b,db.Castbar.Focus.Colors.Border.a)
															end,
													order = 7,
												},
											},
										},
									},
								},
							},
						},
					},
				},
				UnitFrames = {
					name = "UnitFrames",
					type = "group",
					order = 5,
					disabled = function()
							if IsAddOnLoaded("oUF") then
								return false
							else
								return true
							end
						end,
					args = {
						header7 = {
							name = "UnitFrames",
							type = "header",
							order = 1,
						},
						Settings = {
							name = "Settings",
							type = "group",
							guiInline = true,
							order = 2,
							args = {
								Enable = {
									name = "Enable oUF LUI",
									desc = "Wether you want to use LUI UnitFrames or not.",
									type = "toggle",
									width = "full",
									get = function() return db.oUF.Settings.Enable end,
									set = function(self,Enable)
												db.oUF.Settings.Enable = not db.oUF.Settings.Enable
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 1,
								},
								ShowV2Textures = {
									name = "Show LUI v2 Connector Frames",
									desc = "Wether you want to show LUI v2 Frames or not.",
									disabled = function() return not db.oUF.Settings.Enable end,
									type = "toggle",
									width = "full",
									get = function() return db.oUF.Settings.show_v2_textures end,
									set = function(self,ShowV2Textures)
												db.oUF.Settings.show_v2_textures = not db.oUF.Settings.show_v2_textures
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 2,
								},
							},
						},
						Colors = {
							name = "Colors",
							type = "group",
							childGroups = "tab",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 3,
							args = {
								ClassColors = {
									name = "Class",
									type = "group",
									order = 1,
									args = {
										header1 = {
											name = "Class Colors",
											type = "header",
											order = 1,
										},
										Warrior = {
											name = "Warrior",
											desc = "Choose an individual Color for Warriors.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Warrior.r, db.oUF.Colors.Class.Warrior.g, db.oUF.Colors.Class.Warrior.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Warrior.r = r
													db.oUF.Colors.Class.Warrior.g = g
													db.oUF.Colors.Class.Warrior.b = b
												end,
											order = 2,
										},
										Priest = {
											name = "Priest",
											desc = "Choose an individual Color for Priests.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Priest.r, db.oUF.Colors.Class.Priest.g, db.oUF.Colors.Class.Priest.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Priest.r = r
													db.oUF.Colors.Class.Priest.g = g
													db.oUF.Colors.Class.Priest.b = b
												end,
											order = 3,
										},
										Druid = {
											name = "Druid",
											desc = "Choose an individual Color for Druids.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Druid.r, db.oUF.Colors.Class.Druid.g, db.oUF.Colors.Class.Druid.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Druid.r = r
													db.oUF.Colors.Class.Druid.g = g
													db.oUF.Colors.Class.Druid.b = b
												end,
											order = 4,
										},
										Hunter = {
											name = "Hunter",
											desc = "Choose an individual Color for Hunters.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Hunter.r, db.oUF.Colors.Class.Hunter.g, db.oUF.Colors.Class.Hunter.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Hunter.r = r
													db.oUF.Colors.Class.Hunter.g = g
													db.oUF.Colors.Class.Hunter.b = b
												end,
											order = 5,
										},
										Mage = {
											name = "Mage",
											desc = "Choose an individual Color for Mages.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Mage.r, db.oUF.Colors.Class.Mage.g, db.oUF.Colors.Class.Mage.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Mage.r = r
													db.oUF.Colors.Class.Mage.g = g
													db.oUF.Colors.Class.Mage.b = b
												end,
											order = 6,
										},
										Paladin = {
											name = "Paladin",
											desc = "Choose an individual Color for Paladins.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Paladin.r, db.oUF.Colors.Class.Paladin.g, db.oUF.Colors.Class.Paladin.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Paladin.r = r
													db.oUF.Colors.Class.Paladin.g = g
													db.oUF.Colors.Class.Paladin.b = b
												end,
											order = 7,
										},
										Shaman = {
											name = "Shaman",
											desc = "Choose an individual Color for Shamans.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Shaman.r, db.oUF.Colors.Class.Shaman.g, db.oUF.Colors.Class.Shaman.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Shaman.r = r
													db.oUF.Colors.Class.Shaman.g = g
													db.oUF.Colors.Class.Shaman.b = b
												end,
											order = 8,
										},
										Warlock = {
											name = "Warlock",
											desc = "Choose an individual Color for Warlocks.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Warlock.r, db.oUF.Colors.Class.Warlock.g, db.oUF.Colors.Class.Warlock.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Warlock.r = r
													db.oUF.Colors.Class.Warlock.g = g
													db.oUF.Colors.Class.Warlock.b = b
												end,
											order = 9,
										},
										Rogue = {
											name = "Rogue",
											desc = "Choose an individual Color for Rogues.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.Rogue.r, db.oUF.Colors.Class.Rogue.g, db.oUF.Colors.Class.Rogue.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.Rogue.r = r
													db.oUF.Colors.Class.Rogue.g = g
													db.oUF.Colors.Class.Rogue.b = b
												end,
											order = 10,
										},
										DeathKnight = {
											name = "Death Knight",
											desc = "Choose an individual Color for Death Knights.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Class.DeathKnight.r, db.oUF.Colors.Class.DeathKnight.g, db.oUF.Colors.Class.DeathKnight.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Class.DeathKnight.r = r
													db.oUF.Colors.Class.DeathKnight.g = g
													db.oUF.Colors.Class.DeathKnight.b = b
												end,
											order = 11,
										},
										empty = {
											name = "   ",
											type = "description",
											order = 12,
											width = "full",
										},
										Reset = {
											order = 13,
											type = "execute",
											name = "Restore Defaults",
											func = function()
												db.oUF.Colors.Class.Warrior.r = defaults.profile.oUF.Colors.Class.Warrior.r
												db.oUF.Colors.Class.Warrior.g = defaults.profile.oUF.Colors.Class.Warrior.g
												db.oUF.Colors.Class.Warrior.b = defaults.profile.oUF.Colors.Class.Warrior.b
												
												db.oUF.Colors.Class.Priest.r = defaults.profile.oUF.Colors.Class.Priest.r
												db.oUF.Colors.Class.Priest.g = defaults.profile.oUF.Colors.Class.Priest.g
												db.oUF.Colors.Class.Priest.b = defaults.profile.oUF.Colors.Class.Priest.b
												
												db.oUF.Colors.Class.Druid.r = defaults.profile.oUF.Colors.Class.Druid.r
												db.oUF.Colors.Class.Druid.g = defaults.profile.oUF.Colors.Class.Druid.g
												db.oUF.Colors.Class.Druid.b = defaults.profile.oUF.Colors.Class.Druid.b
												
												db.oUF.Colors.Class.Hunter.r = defaults.profile.oUF.Colors.Class.Hunter.r
												db.oUF.Colors.Class.Hunter.g = defaults.profile.oUF.Colors.Class.Hunter.g
												db.oUF.Colors.Class.Hunter.b = defaults.profile.oUF.Colors.Class.Hunter.b
												
												db.oUF.Colors.Class.Mage.r = defaults.profile.oUF.Colors.Class.Mage.r
												db.oUF.Colors.Class.Mage.g = defaults.profile.oUF.Colors.Class.Mage.g
												db.oUF.Colors.Class.Mage.b = defaults.profile.oUF.Colors.Class.Mage.b
												
												db.oUF.Colors.Class.Paladin.r = defaults.profile.oUF.Colors.Class.Paladin.r
												db.oUF.Colors.Class.Paladin.g = defaults.profile.oUF.Colors.Class.Paladin.g
												db.oUF.Colors.Class.Paladin.b = defaults.profile.oUF.Colors.Class.Paladin.b
												
												db.oUF.Colors.Class.Shaman.r = defaults.profile.oUF.Colors.Class.Shaman.r
												db.oUF.Colors.Class.Shaman.g = defaults.profile.oUF.Colors.Class.Shaman.g
												db.oUF.Colors.Class.Shaman.b = defaults.profile.oUF.Colors.Class.Shaman.b
												
												db.oUF.Colors.Class.Warlock.r = defaults.profile.oUF.Colors.Class.Warlock.r
												db.oUF.Colors.Class.Warlock.g = defaults.profile.oUF.Colors.Class.Warlock.g
												db.oUF.Colors.Class.Warlock.b = defaults.profile.oUF.Colors.Class.Warlock.b
												
												db.oUF.Colors.Class.Rogue.r = defaults.profile.oUF.Colors.Class.Rogue.r
												db.oUF.Colors.Class.Rogue.g = defaults.profile.oUF.Colors.Class.Rogue.g
												db.oUF.Colors.Class.Rogue.b = defaults.profile.oUF.Colors.Class.Rogue.b
												
												db.oUF.Colors.Class.DeathKnight.r = defaults.profile.oUF.Colors.Class.DeathKnight.r
												db.oUF.Colors.Class.DeathKnight.g = defaults.profile.oUF.Colors.Class.DeathKnight.g
												db.oUF.Colors.Class.DeathKnight.b = defaults.profile.oUF.Colors.Class.DeathKnight.b
												
												StaticPopup_Show("RELOAD_UI")
											end,
										},
									},
								},
								PowerType = {
									name = "Power",
									type = "group",
									order = 2,
									args = {
										header1 = {
											name = "Power Colors",
											type = "header",
											order = 1,
										},
										Mana = {
											name = "Mana",
											desc = "Choose an individual Color for Mana.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Mana.r, db.oUF.Colors.Power.Mana.g, db.oUF.Colors.Power.Mana.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Mana.r = r
													db.oUF.Colors.Power.Mana.g = g
													db.oUF.Colors.Power.Mana.b = b
												end,
											order = 2,
										},
										Rage = {
											name = "Rage",
											desc = "Choose an individual Color for Rage.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Rage.r, db.oUF.Colors.Power.Rage.g, db.oUF.Colors.Power.Rage.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Rage.r = r
													db.oUF.Colors.Power.Rage.g = g
													db.oUF.Colors.Power.Rage.b = b
												end,
											order = 3,
										},
										Focus = {
											name = "Focus",
											desc = "Choose an individual Color for Focus.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Focus.r, db.oUF.Colors.Power.Focus.g, db.oUF.Colors.Power.Focus.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Focus.r = r
													db.oUF.Colors.Power.Focus.g = g
													db.oUF.Colors.Power.Focus.b = b
												end,
											order = 4,
										},
										Energy = {
											name = "Energy",
											desc = "Choose an individual Color for Energy.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Energy.r, db.oUF.Colors.Power.Energy.g, db.oUF.Colors.Power.Energy.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Energy.r = r
													db.oUF.Colors.Power.Energy.g = g
													db.oUF.Colors.Power.Energy.b = b
												end,
											order = 5,
										},
										Runes = {
											name = "Runes",
											desc = "Choose an individual Color for Runes.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Runes.r, db.oUF.Colors.Power.Runes.g, db.oUF.Colors.Power.Runes.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Runes.r = r
													db.oUF.Colors.Power.Runes.g = g
													db.oUF.Colors.Power.Runes.b = b
												end,
											order = 6,
										},
										RunicPower = {
											name = "Runic Power",
											desc = "Choose an individual Color for Runic Power.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.RunicPower.r, db.oUF.Colors.Power.RunicPower.g, db.oUF.Colors.Power.RunicPower.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.RunicPower.r = r
													db.oUF.Colors.Power.RunicPower.g = g
													db.oUF.Colors.Power.RunicPower.b = b
												end,
											order = 7,
										},
										AmmoSlot = {
											name = "Ammo Slot",
											desc = "Choose an individual Color for Ammo Slot.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.AmmoSlot.r, db.oUF.Colors.Power.AmmoSlot.g, db.oUF.Colors.Power.AmmoSlot.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.AmmoSlot.r = r
													db.oUF.Colors.Power.AmmoSlot.g = g
													db.oUF.Colors.Power.AmmoSlot.b = b
												end,
											order = 8,
										},
										Fuel = {
											name = "Fuel",
											desc = "Choose an individual Color for Fuel.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Power.Fuel.r, db.oUF.Colors.Power.Fuel.g, db.oUF.Colors.Power.Fuel.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Power.Fuel.r = r
													db.oUF.Colors.Power.Fuel.g = g
													db.oUF.Colors.Power.Fuel.b = b
												end,
											order = 9,
										},
										empty = {
											name = "   ",
											type = "description",
											order = 10,
											width = "full",
										},
										Reset = {
											order = 11,
											type = "execute",
											name = "Restore Defaults",
											func = function()
												db.oUF.Colors.Power.Mana.r = defaults.profile.oUF.Colors.Power.Mana.r
												db.oUF.Colors.Power.Mana.g = defaults.profile.oUF.Colors.Power.Mana.g
												db.oUF.Colors.Power.Mana.b = defaults.profile.oUF.Colors.Power.Mana.b
												
												db.oUF.Colors.Power.Rage.r = defaults.profile.oUF.Colors.Power.Rage.r
												db.oUF.Colors.Power.Rage.g = defaults.profile.oUF.Colors.Power.Rage.g
												db.oUF.Colors.Power.Rage.b = defaults.profile.oUF.Colors.Power.Rage.b
												
												db.oUF.Colors.Power.Focus.r = defaults.profile.oUF.Colors.Power.Focus.r
												db.oUF.Colors.Power.Focus.g = defaults.profile.oUF.Colors.Power.Focus.g
												db.oUF.Colors.Power.Focus.b = defaults.profile.oUF.Colors.Power.Focus.b
												
												db.oUF.Colors.Power.Energy.r = defaults.profile.oUF.Colors.Power.Energy.r
												db.oUF.Colors.Power.Energy.g = defaults.profile.oUF.Colors.Power.Energy.g
												db.oUF.Colors.Power.Energy.b = defaults.profile.oUF.Colors.Power.Energy.b
												
												db.oUF.Colors.Power.Runes.r = defaults.profile.oUF.Colors.Power.Runes.r
												db.oUF.Colors.Power.Runes.g = defaults.profile.oUF.Colors.Power.Runes.g
												db.oUF.Colors.Power.Runes.b = defaults.profile.oUF.Colors.Power.Runes.b
												
												db.oUF.Colors.Power.RunicPower.r = defaults.profile.oUF.Colors.Power.RunicPower.r
												db.oUF.Colors.Power.RunicPower.g = defaults.profile.oUF.Colors.Power.RunicPower.g
												db.oUF.Colors.Power.RunicPower.b = defaults.profile.oUF.Colors.Power.RunicPower.b
												
												db.oUF.Colors.Power.AmmoSlot.r = defaults.profile.oUF.Colors.Power.AmmoSlot.r
												db.oUF.Colors.Power.AmmoSlot.g = defaults.profile.oUF.Colors.Power.AmmoSlot.g
												db.oUF.Colors.Power.AmmoSlot.b = defaults.profile.oUF.Colors.Power.AmmoSlot.b
												
												db.oUF.Colors.Power.Fuel.r = defaults.profile.oUF.Colors.Power.Fuel.r
												db.oUF.Colors.Power.Fuel.g = defaults.profile.oUF.Colors.Power.Fuel.g
												db.oUF.Colors.Power.Fuel.b = defaults.profile.oUF.Colors.Power.Fuel.b
												
												StaticPopup_Show("RELOAD_UI")
											end,
										},
									},
								},
								HealthGradient = {
									name = "Health Gradient",
									type = "group",
									order = 3,
									args = {
										header1 = {
											name = "Health Gradient Colors",
											type = "header",
											order = 1,
										},
										EmptyHP = {
											name = "Empty (Bad!)",
											desc = "Choose an individual Color for Empty HP.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Smooth.Smooth1.r, db.oUF.Colors.Smooth.Smooth1.g, db.oUF.Colors.Smooth.Smooth1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Smooth.Smooth1.r = r
													db.oUF.Colors.Smooth.Smooth1.g = g
													db.oUF.Colors.Smooth.Smooth1.b = b
												end,
											order = 2,
										},
										OKHP = {
											name = "Half (OK!)",
											desc = "Choose an individual Color for Half HP.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Smooth.Smooth2.r, db.oUF.Colors.Smooth.Smooth2.g, db.oUF.Colors.Smooth.Smooth2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Smooth.Smooth2.r = r
													db.oUF.Colors.Smooth.Smooth2.g = g
													db.oUF.Colors.Smooth.Smooth2.b = b
												end,
											order = 3,
										},
										FullHP = {
											name = "Full (Good!)",
											desc = "Choose an individual Color for Full HP.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Smooth.Smooth3.r, db.oUF.Colors.Smooth.Smooth3.g, db.oUF.Colors.Smooth.Smooth3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Smooth.Smooth3.r = r
													db.oUF.Colors.Smooth.Smooth3.g = g
													db.oUF.Colors.Smooth.Smooth3.b = b
												end,
											order = 4,
										},
										empty = {
											name = "   ",
											type = "description",
											order = 5,
											width = "full",
										},
										Reset = {
											order = 6,
											type = "execute",
											name = "Restore Defaults",
											func = function()
												db.oUF.Colors.Smooth.Smooth1.r = defaults.profile.oUF.Colors.Smooth.Smooth1.r
												db.oUF.Colors.Smooth.Smooth1.g = defaults.profile.oUF.Colors.Smooth.Smooth1.g
												db.oUF.Colors.Smooth.Smooth1.b = defaults.profile.oUF.Colors.Smooth.Smooth1.b
												
												db.oUF.Colors.Smooth.Smooth2.r = defaults.profile.oUF.Colors.Smooth.Smooth2.r
												db.oUF.Colors.Smooth.Smooth2.g = defaults.profile.oUF.Colors.Smooth.Smooth2.g
												db.oUF.Colors.Smooth.Smooth2.b = defaults.profile.oUF.Colors.Smooth.Smooth2.b
												
												db.oUF.Colors.Smooth.Smooth3.r = defaults.profile.oUF.Colors.Smooth.Smooth3.r
												db.oUF.Colors.Smooth.Smooth3.g = defaults.profile.oUF.Colors.Smooth.Smooth3.g
												db.oUF.Colors.Smooth.Smooth3.b = defaults.profile.oUF.Colors.Smooth.Smooth3.b
												
												StaticPopup_Show("RELOAD_UI")
											end,
										},
									},
								},
								Other = {
									name = "Other",
									type = "group",
									order = 4,
									args = {
										header1 = {
											name = "Happyness Colors",
											type = "header",
											order = 1,
										},
										Happy = {
											name = "Happy",
											desc = "Choose an individual Color for Happy.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Happiness.Happiness3.r, db.oUF.Colors.Happiness.Happiness3.g, db.oUF.Colors.Happiness.Happiness3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Happiness.Happiness3.r = r
													db.oUF.Colors.Happiness.Happiness3.g = g
													db.oUF.Colors.Happiness.Happiness3.b = b
												end,
											order = 2,
										},
										Normal = {
											name = "Normal",
											desc = "Choose an individual Color for Normal.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Happiness.Happiness2.r, db.oUF.Colors.Happiness.Happiness2.g, db.oUF.Colors.Happiness.Happiness2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Happiness.Happiness2.r = r
													db.oUF.Colors.Happiness.Happiness2.g = g
													db.oUF.Colors.Happiness.Happiness2.b = b
												end,
											order = 3,
										},
										Unhappy = {
											name = "Unhappy",
											desc = "Choose an individual Color for Unhappy.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Happiness.Happiness1.r, db.oUF.Colors.Happiness.Happiness1.g, db.oUF.Colors.Happiness.Happiness1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Happiness.Happiness1.r = r
													db.oUF.Colors.Happiness.Happiness1.g = g
													db.oUF.Colors.Happiness.Happiness1.b = b
												end,
											order = 4,
										},
										header2 = {
											name = "Rune Colors",
											type = "header",
											order = 5,
										},
										Blood = {
											name = "Blood",
											desc = "Choose an individual Color for Blood.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runes.Rune1.r, db.oUF.Colors.Runes.Rune1.g, db.oUF.Colors.Runes.Rune1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runes.Rune1.r = r
													db.oUF.Colors.Runes.Rune1.g = g
													db.oUF.Colors.Runes.Rune1.b = b
												end,
											order = 6,
										},
										Unholy = {
											name = "Unholy",
											desc = "Choose an individual Color for Unholy.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runes.Rune2.r, db.oUF.Colors.Runes.Rune2.g, db.oUF.Colors.Runes.Rune2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runes.Rune2.r = r
													db.oUF.Colors.Runes.Rune2.g = g
													db.oUF.Colors.Runes.Rune2.b = b
												end,
											order = 7,
										},
										Frost = {
											name = "Frost",
											desc = "Choose an individual Color for Frost.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runes.Rune3.r, db.oUF.Colors.Runes.Rune3.g, db.oUF.Colors.Runes.Rune3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runes.Rune3.r = r
													db.oUF.Colors.Runes.Rune3.g = g
													db.oUF.Colors.Runes.Rune3.b = b
												end,
											order = 8,
										},
										Death = {
											name = "Death",
											desc = "Choose an individual Color for Death.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runes.Rune4.r, db.oUF.Colors.Runes.Rune4.g, db.oUF.Colors.Runes.Rune4.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runes.Rune4.r = r
													db.oUF.Colors.Runes.Rune4.g = g
													db.oUF.Colors.Runes.Rune4.b = b
												end,
											order = 9,
										},
										header3 = {
											name = "Rogue ComboPoint Colors",
											type = "header",
											order = 10,
										},
										Combo1 = {
											name = "1 CP",
											desc = "Choose an individual Color for your 1st ComboPoint.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.ComboPoints.Combo1.r, db.oUF.Colors.ComboPoints.Combo1.g, db.oUF.Colors.ComboPoints.Combo1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.ComboPoints.Combo1.r = r
													db.oUF.Colors.ComboPoints.Combo1.g = g
													db.oUF.Colors.ComboPoints.Combo1.b = b
												end,
											order = 11,
										},
										Combo2 = {
											name = "2 CP",
											desc = "Choose an individual Color for your 2nd ComboPoint.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.ComboPoints.Combo2.r, db.oUF.Colors.ComboPoints.Combo2.g, db.oUF.Colors.ComboPoints.Combo2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.ComboPoints.Combo2.r = r
													db.oUF.Colors.ComboPoints.Combo2.g = g
													db.oUF.Colors.ComboPoints.Combo2.b = b
												end,
											order = 12,
										},
										Combo3 = {
											name = "3 CP",
											desc = "Choose an individual Color for your 3rd ComboPoint.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.ComboPoints.Combo3.r, db.oUF.Colors.ComboPoints.Combo3.g, db.oUF.Colors.ComboPoints.Combo3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.ComboPoints.Combo3.r = r
													db.oUF.Colors.ComboPoints.Combo3.g = g
													db.oUF.Colors.ComboPoints.Combo3.b = b
												end,
											order = 13,
										},
										Combo4 = {
											name = "4 CP",
											desc = "Choose an individual Color for your 4rd ComboPoint.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.ComboPoints.Combo4.r, db.oUF.Colors.ComboPoints.Combo4.g, db.oUF.Colors.ComboPoints.Combo4.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.ComboPoints.Combo4.r = r
													db.oUF.Colors.ComboPoints.Combo4.g = g
													db.oUF.Colors.ComboPoints.Combo4.b = b
												end,
											order = 14,
										},
										Combo5 = {
											name = "5 CP",
											desc = "Choose an individual Color for your 5th ComboPoint.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.ComboPoints.Combo5.r, db.oUF.Colors.ComboPoints.Combo5.g, db.oUF.Colors.ComboPoints.Combo5.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.ComboPoints.Combo5.r = r
													db.oUF.Colors.ComboPoints.Combo5.g = g
													db.oUF.Colors.ComboPoints.Combo5.b = b
												end,
											order = 15,
										},
										header4 = {
											name = "DK Runebar Colors",
											type = "header",
											order = 16,
										},
										Runebar1 = {
											name = "Blood Rune1",
											desc = "Choose an individual Color for Blood Rune1.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune1.r, db.oUF.Colors.Runebar.Rune1.g, db.oUF.Colors.Runebar.Rune1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune1.r = r
													db.oUF.Colors.Runebar.Rune1.g = g
													db.oUF.Colors.Runebar.Rune1.b = b
												end,
											order = 17,
										},
										Runebar2 = {
											name = "Blood Rune2",
											desc = "Choose an individual Color for Blood Rune2.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune2.r, db.oUF.Colors.Runebar.Rune2.g, db.oUF.Colors.Runebar.Rune2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune2.r = r
													db.oUF.Colors.Runebar.Rune2.g = g
													db.oUF.Colors.Runebar.Rune2.b = b
												end,
											order = 18,
										},
										Runebar3 = {
											name = "Unholy Rune1",
											desc = "Choose an individual Color for Unholy Rune1.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune3.r, db.oUF.Colors.Runebar.Rune3.g, db.oUF.Colors.Runebar.Rune3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune3.r = r
													db.oUF.Colors.Runebar.Rune3.g = g
													db.oUF.Colors.Runebar.Rune3.b = b
												end,
											order = 19,
										},
										Runebar4 = {
											name = "Unholy Rune2",
											desc = "Choose an individual Color for Unholy Rune2.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune4.r, db.oUF.Colors.Runebar.Rune4.g, db.oUF.Colors.Runebar.Rune4.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune4.r = r
													db.oUF.Colors.Runebar.Rune4.g = g
													db.oUF.Colors.Runebar.Rune4.b = b
												end,
											order = 20,
										},
										Runebar5 = {
											name = "Frost Rune1",
											desc = "Choose an individual Color for Frost Rune1.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune5.r, db.oUF.Colors.Runebar.Rune5.g, db.oUF.Colors.Runebar.Rune5.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune5.r = r
													db.oUF.Colors.Runebar.Rune5.g = g
													db.oUF.Colors.Runebar.Rune5.b = b
												end,
											order = 21,
										},
										Runebar6 = {
											name = "Frost Rune2",
											desc = "Choose an individual Color for Frost Rune2.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Runebar.Rune6.r, db.oUF.Colors.Runebar.Rune6.g, db.oUF.Colors.Runebar.Rune6.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Runebar.Rune6.r = r
													db.oUF.Colors.Runebar.Rune6.g = g
													db.oUF.Colors.Runebar.Rune6.b = b
												end,
											order = 22,
										},
										header5 = {
											name = "Shaman Totembar Colors",
											type = "header",
											order = 23,
										},
										TotemFire = {
											name = "Fire",
											desc = "Choose an individual Color for your Fire Totems.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Totems.Fire.r, db.oUF.Colors.Totems.Fire.g, db.oUF.Colors.Totems.Fire.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Totems.Fire.r = r
													db.oUF.Colors.Totems.Fire.g = g
													db.oUF.Colors.Totems.Fire.b = b
												end,
											order = 24,
										},
										TotemEarth = {
											name = "Earth",
											desc = "Choose an individual Color for your Earth Totems.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Totems.Earth.r, db.oUF.Colors.Totems.Earth.g, db.oUF.Colors.Totems.Earth.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Totems.Earth.r = r
													db.oUF.Colors.Totems.Earth.g = g
													db.oUF.Colors.Totems.Earth.b = b
												end,
											order = 25,
										},
										TotemWater = {
											name = "Water",
											desc = "Choose an individual Color for your Water Totems.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Totems.Water.r, db.oUF.Colors.Totems.Water.g, db.oUF.Colors.Totems.Water.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Totems.Water.r = r
													db.oUF.Colors.Totems.Water.g = g
													db.oUF.Colors.Totems.Water.b = b
												end,
											order = 26,
										},
										TotemAir = {
											name = "Air",
											desc = "Choose an individual Color for your Air Totems.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Totems.Air.r, db.oUF.Colors.Totems.Air.g, db.oUF.Colors.Totems.Air.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Totems.Air.r = r
													db.oUF.Colors.Totems.Air.g = g
													db.oUF.Colors.Totems.Air.b = b
												end,
											order = 27,
										},
										header6 = {
											name = "Level Difficulty Colors",
											type = "header",
											order = 28,
										},
										LevelDiff1 = {
											name = "Difference >= 5",
											desc = "Level Difference between your Level and your Target's Level greater or equal 5.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Diff.Diff1.r, db.oUF.Colors.Diff.Diff1.g, db.oUF.Colors.Diff.Diff1.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Diff.Diff1.r = r
													db.oUF.Colors.Diff.Diff1.g = g
													db.oUF.Colors.Diff.Diff1.b = b
												end,
											order = 29,
										},
										LevelDiff2 = {
											name = "Difference >= 3",
											desc = "Level Difference between your Level and your Target's Level greater or equal 3.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Diff.Diff2.r, db.oUF.Colors.Diff.Diff2.g, db.oUF.Colors.Diff.Diff2.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Diff.Diff2.r = r
													db.oUF.Colors.Diff.Diff2.g = g
													db.oUF.Colors.Diff.Diff2.b = b
												end,
											order = 30,
										},
										LevelDiff3 = {
											name = "Difference >= -2",
											desc = "Level Difference between your Level and your Target's Level greater or equal -2.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Diff.Diff3.r, db.oUF.Colors.Diff.Diff3.g, db.oUF.Colors.Diff.Diff3.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Diff.Diff3.r = r
													db.oUF.Colors.Diff.Diff3.g = g
													db.oUF.Colors.Diff.Diff3.b = b
												end,
											order = 31,
										},
										LevelDiff4 = {
											name = "Difference is in Green QuestRange",
											desc = "Level Difference between your Level and your Target's Level is in Green QuestRange.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Diff.Diff4.r, db.oUF.Colors.Diff.Diff4.g, db.oUF.Colors.Diff.Diff4.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Diff.Diff4.r = r
													db.oUF.Colors.Diff.Diff4.g = g
													db.oUF.Colors.Diff.Diff4.b = b
												end,
											order = 32,
										},
										LevelDiff5 = {
											name = "Default",
											desc = "Level Difference between your Level and your Target's Level greater is 0.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Diff.Diff5.r, db.oUF.Colors.Diff.Diff5.g, db.oUF.Colors.Diff.Diff5.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Diff.Diff5.r = r
													db.oUF.Colors.Diff.Diff5.g = g
													db.oUF.Colors.Diff.Diff5.b = b
												end,
											order = 33,
										},
										header7 = {
											name = "Tapped Colors",
											type = "header",
											order = 34,
										},
										Tapped = {
											name = "Tapped",
											desc = "Choose an individual Color for Tapped Mobs.\n\nNote:\nYou have to reload the UI.\nType /rl",
											type = "color",
											width = "full",
											hasAlpha = false,
											get = function() return db.oUF.Colors.Tapped.r, db.oUF.Colors.Tapped.g, db.oUF.Colors.Tapped.b end,
											set = function(_,r,g,b)
													db.oUF.Colors.Tapped.r = r
													db.oUF.Colors.Tapped.g = g
													db.oUF.Colors.Tapped.b = b
												end,
											order = 35,
										},
										empty = {
											name = "   ",
											type = "description",
											order = 36,
											width = "full",
										},
										Reset = {
											order = 37,
											type = "execute",
											name = "Restore Defaults",
											func = function()
												db.oUF.Colors.Happiness.Happiness1.r = defaults.profile.oUF.Colors.Happiness.Happiness1.r
												db.oUF.Colors.Happiness.Happiness1.g = defaults.profile.oUF.Colors.Happiness.Happiness1.g
												db.oUF.Colors.Happiness.Happiness1.b = defaults.profile.oUF.Colors.Happiness.Happiness1.b
												
												db.oUF.Colors.Happiness.Happiness2.r = defaults.profile.oUF.Colors.Happiness.Happiness2.r
												db.oUF.Colors.Happiness.Happiness2.g = defaults.profile.oUF.Colors.Happiness.Happiness2.g
												db.oUF.Colors.Happiness.Happiness2.b = defaults.profile.oUF.Colors.Happiness.Happiness2.b
												
												db.oUF.Colors.Happiness.Happiness3.r = defaults.profile.oUF.Colors.Happiness.Happiness3.r
												db.oUF.Colors.Happiness.Happiness3.g = defaults.profile.oUF.Colors.Happiness.Happiness3.g
												db.oUF.Colors.Happiness.Happiness3.b = defaults.profile.oUF.Colors.Happiness.Happiness3.b
												
												db.oUF.Colors.Runes.Rune1.r = defaults.profile.oUF.Colors.Runes.Rune1.r
												db.oUF.Colors.Runes.Rune1.g = defaults.profile.oUF.Colors.Runes.Rune1.g
												db.oUF.Colors.Runes.Rune1.b = defaults.profile.oUF.Colors.Runes.Rune1.b
												
												db.oUF.Colors.Runes.Rune2.r = defaults.profile.oUF.Colors.Runes.Rune2.r
												db.oUF.Colors.Runes.Rune2.g = defaults.profile.oUF.Colors.Runes.Rune2.g
												db.oUF.Colors.Runes.Rune2.b = defaults.profile.oUF.Colors.Runes.Rune2.b
												
												db.oUF.Colors.Runes.Rune3.r = defaults.profile.oUF.Colors.Runes.Rune3.r
												db.oUF.Colors.Runes.Rune3.g = defaults.profile.oUF.Colors.Runes.Rune3.g
												db.oUF.Colors.Runes.Rune3.b = defaults.profile.oUF.Colors.Runes.Rune3.b
												
												db.oUF.Colors.Runes.Rune4.r = defaults.profile.oUF.Colors.Runes.Rune4.r
												db.oUF.Colors.Runes.Rune4.g = defaults.profile.oUF.Colors.Runes.Rune4.g
												db.oUF.Colors.Runes.Rune4.b = defaults.profile.oUF.Colors.Runes.Rune4.b
												
												db.oUF.Colors.ComboPoints.Combo1.r = defaults.profile.oUF.Colors.ComboPoints.Combo1.r
												db.oUF.Colors.ComboPoints.Combo1.g = defaults.profile.oUF.Colors.ComboPoints.Combo1.g
												db.oUF.Colors.ComboPoints.Combo1.b = defaults.profile.oUF.Colors.ComboPoints.Combo1.b
												
												db.oUF.Colors.ComboPoints.Combo2.r = defaults.profile.oUF.Colors.ComboPoints.Combo2.r
												db.oUF.Colors.ComboPoints.Combo2.g = defaults.profile.oUF.Colors.ComboPoints.Combo2.g
												db.oUF.Colors.ComboPoints.Combo2.b = defaults.profile.oUF.Colors.ComboPoints.Combo2.b
												
												db.oUF.Colors.ComboPoints.Combo3.r = defaults.profile.oUF.Colors.ComboPoints.Combo3.r
												db.oUF.Colors.ComboPoints.Combo3.g = defaults.profile.oUF.Colors.ComboPoints.Combo3.g
												db.oUF.Colors.ComboPoints.Combo3.b = defaults.profile.oUF.Colors.ComboPoints.Combo3.b
												
												db.oUF.Colors.ComboPoints.Combo4.r = defaults.profile.oUF.Colors.ComboPoints.Combo4.r
												db.oUF.Colors.ComboPoints.Combo4.g = defaults.profile.oUF.Colors.ComboPoints.Combo4.g
												db.oUF.Colors.ComboPoints.Combo4.b = defaults.profile.oUF.Colors.ComboPoints.Combo4.b
												
												db.oUF.Colors.ComboPoints.Combo5.r = defaults.profile.oUF.Colors.ComboPoints.Combo5.r
												db.oUF.Colors.ComboPoints.Combo5.g = defaults.profile.oUF.Colors.ComboPoints.Combo5.g
												db.oUF.Colors.ComboPoints.Combo5.b = defaults.profile.oUF.Colors.ComboPoints.Combo5.b
												
												db.oUF.Colors.Runebar.Rune1.r = defaults.profile.oUF.Colors.Runebar.Rune1.r
												db.oUF.Colors.Runebar.Rune1.g = defaults.profile.oUF.Colors.Runebar.Rune1.g
												db.oUF.Colors.Runebar.Rune1.b = defaults.profile.oUF.Colors.Runebar.Rune1.b
												
												db.oUF.Colors.Runebar.Rune2.r = defaults.profile.oUF.Colors.Runebar.Rune2.r
												db.oUF.Colors.Runebar.Rune2.g = defaults.profile.oUF.Colors.Runebar.Rune2.g
												db.oUF.Colors.Runebar.Rune2.b = defaults.profile.oUF.Colors.Runebar.Rune2.b
												
												db.oUF.Colors.Runebar.Rune3.r = defaults.profile.oUF.Colors.Runebar.Rune3.r
												db.oUF.Colors.Runebar.Rune3.g = defaults.profile.oUF.Colors.Runebar.Rune3.g
												db.oUF.Colors.Runebar.Rune3.b = defaults.profile.oUF.Colors.Runebar.Rune3.b
												
												db.oUF.Colors.Runebar.Rune4.r = defaults.profile.oUF.Colors.Runebar.Rune4.r
												db.oUF.Colors.Runebar.Rune4.g = defaults.profile.oUF.Colors.Runebar.Rune4.g
												db.oUF.Colors.Runebar.Rune4.b = defaults.profile.oUF.Colors.Runebar.Rune4.b
												
												db.oUF.Colors.Runebar.Rune5.r = defaults.profile.oUF.Colors.Runebar.Rune5.r
												db.oUF.Colors.Runebar.Rune5.g = defaults.profile.oUF.Colors.Runebar.Rune5.g
												db.oUF.Colors.Runebar.Rune5.b = defaults.profile.oUF.Colors.Runebar.Rune5.b
												
												db.oUF.Colors.Runebar.Rune6.r = defaults.profile.oUF.Colors.Runebar.Rune6.r
												db.oUF.Colors.Runebar.Rune6.g = defaults.profile.oUF.Colors.Runebar.Rune6.g
												db.oUF.Colors.Runebar.Rune6.b = defaults.profile.oUF.Colors.Runebar.Rune6.b
												
												db.oUF.Colors.Totems.Fire.r = defaults.profile.oUF.Colors.Totems.Fire.r
												db.oUF.Colors.Totems.Fire.g = defaults.profile.oUF.Colors.Totems.Fire.g
												db.oUF.Colors.Totems.Fire.b = defaults.profile.oUF.Colors.Totems.Fire.b
												
												db.oUF.Colors.Totems.Earth.r = defaults.profile.oUF.Colors.Totems.Earth.r
												db.oUF.Colors.Totems.Earth.g = defaults.profile.oUF.Colors.Totems.Earth.g
												db.oUF.Colors.Totems.Earth.b = defaults.profile.oUF.Colors.Totems.Earth.b
												
												db.oUF.Colors.Totems.Water.r = defaults.profile.oUF.Colors.Totems.Water.r
												db.oUF.Colors.Totems.Water.g = defaults.profile.oUF.Colors.Totems.Water.g
												db.oUF.Colors.Totems.Water.b = defaults.profile.oUF.Colors.Totems.Water.b
												
												db.oUF.Colors.Totems.Air.r = defaults.profile.oUF.Colors.Totems.Air.r
												db.oUF.Colors.Totems.Air.g = defaults.profile.oUF.Colors.Totems.Air.g
												db.oUF.Colors.Totems.Air.b = defaults.profile.oUF.Colors.Totems.Air.b
												
												db.oUF.Colors.Diff.Diff1.r = defaults.profile.oUF.Colors.Diff.Diff1.r
												db.oUF.Colors.Diff.Diff1.g = defaults.profile.oUF.Colors.Diff.Diff1.g
												db.oUF.Colors.Diff.Diff1.b = defaults.profile.oUF.Colors.Diff.Diff1.b
												
												db.oUF.Colors.Diff.Diff2.r = defaults.profile.oUF.Colors.Diff.Diff2.r
												db.oUF.Colors.Diff.Diff2.g = defaults.profile.oUF.Colors.Diff.Diff2.g
												db.oUF.Colors.Diff.Diff2.b = defaults.profile.oUF.Colors.Diff.Diff2.b
												
												db.oUF.Colors.Diff.Diff3.r = defaults.profile.oUF.Colors.Diff.Diff3.r
												db.oUF.Colors.Diff.Diff3.g = defaults.profile.oUF.Colors.Diff.Diff3.g
												db.oUF.Colors.Diff.Diff3.b = defaults.profile.oUF.Colors.Diff.Diff3.b
												
												db.oUF.Colors.Diff.Diff4.r = defaults.profile.oUF.Colors.Diff.Diff4.r
												db.oUF.Colors.Diff.Diff4.g = defaults.profile.oUF.Colors.Diff.Diff4.g
												db.oUF.Colors.Diff.Diff4.b = defaults.profile.oUF.Colors.Diff.Diff4.b
												
												db.oUF.Colors.Diff.Diff5.r = defaults.profile.oUF.Colors.Diff.Diff5.r
												db.oUF.Colors.Diff.Diff5.g = defaults.profile.oUF.Colors.Diff.Diff5.g
												db.oUF.Colors.Diff.Diff5.b = defaults.profile.oUF.Colors.Diff.Diff5.b
												
												db.oUF.Colors.Tapped.r = defaults.profile.oUF.Colors.Tapped.r
												db.oUF.Colors.Tapped.g = defaults.profile.oUF.Colors.Tapped.g
												db.oUF.Colors.Tapped.b = defaults.profile.oUF.Colors.Tapped.b
												
												StaticPopup_Show("RELOAD_UI")
											end,
										},
									},
								},
							},
						},
						Player = {
							name = "Player",
							type = "group",
							order = 4,
							disabled = function() return not db.oUF.Settings.Enable end,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Player",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										Positioning = {
											name = "Positioning",
											type = "group",
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												PlayerX = {
													name = "X Value",
													desc = "X Value for your Player Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.X,
													type = "input",
													get = function() return db.oUF.Player.X end,
													set = function(self,PlayerX)
																if PlayerX == nil or PlayerX == "" then
																	PlayerX = "0"
																end
																db.oUF.Player.X = PlayerX
																oUF_LUI_player:SetPoint("CENTER", UIParent, "CENTER", tonumber(PlayerX), tonumber(db.oUF.Player.Y))
																SetPosForte()
															end,
													order = 2,
												},
												PlayerY = {
													name = "Y Value",
													desc = "Y Value for your Player Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Y,
													type = "input",
													get = function() return db.oUF.Player.Y end,
													set = function(self,PlayerY)
																if PlayerY == nil or PlayerY == "" then
																	PlayerY = "0"
																end
																db.oUF.Player.Y = PlayerY
																oUF_LUI_player:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.Player.X), tonumber(PlayerY))
																SetPosForte()
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												PlayerHeight = {
													name = "Height",
													desc = "Decide the Height of your Player Frame.\n\nDefault: "..defaults.profile.oUF.Player.Height,
													type = "input",
													get = function() return db.oUF.Player.Height end,
													set = function(self,PlayerHeight)
																if PlayerHeight == nil or PlayerHeight == "" then
																	PlayerHeight = "0"
																end
																db.oUF.Player.Height = PlayerHeight
																oUF_LUI_player:SetHeight(tonumber(PlayerHeight))
																SetPosForte()
															end,
													order = 2,
												},
												PlayerWidth = {
													name = "Width",
													desc = "Decide the Width of your Player Frame.\n\nDefault: "..defaults.profile.oUF.Player.Width,
													type = "input",
													get = function() return db.oUF.Player.Width end,
													set = function(self,PlayerWidth)
																if PlayerWidth == nil or PlayerWidth == "" then
																	PlayerWidth = "0"
																end
																db.oUF.Player.Width = PlayerWidth
																oUF_LUI_player:SetWidth(tonumber(PlayerWidth))
																
																if db.oUF.auras.player.buffs_enable == true then
																	oUF_LUI_player.Buffs:SetWidth(tonumber(PlayerWidth))
																end
																
																if db.oUF.auras.player.debuffs_enable == true then
																	oUF_LUI_player.Debuffs:SetWidth(tonumber(PlayerWidth))
																end
																
																SetPosForte()
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Player.Backdrop.Color.r, db.oUF.Player.Backdrop.Color.g, db.oUF.Player.Backdrop.Color.b, db.oUF.Player.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Player.Backdrop.Color.r = r
															db.oUF.Player.Backdrop.Color.g = g
															db.oUF.Player.Backdrop.Color.b = b
															db.oUF.Player.Backdrop.Color.a = a

															oUF_LUI_player.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Player.Border.Color.r, db.oUF.Player.Border.Color.g, db.oUF.Player.Border.Color.b, db.oUF.Player.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Player.Border.Color.r = r
															db.oUF.Player.Border.Color.g = g
															db.oUF.Player.Border.Color.b = b
															db.oUF.Player.Border.Color.a = a
															
															oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Player.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Player.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Player.Backdrop.Texture = BackdropTexture
															oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Player.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Player.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Player.Border.EdgeFile = BorderTexture
															oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Player.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Player.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Player.Border.EdgeSize = BorderSize
															oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Player.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Player.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_player.FrameBackdrop:ClearAllPoints()
														oUF_LUI_player.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_player, "TOPLEFT", tonumber(db.oUF.Player.Backdrop.Padding.Left), tonumber(db.oUF.Player.Backdrop.Padding.Top))
														oUF_LUI_player.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_player, "BOTTOMRIGHT", tonumber(db.oUF.Player.Backdrop.Padding.Right), tonumber(db.oUF.Player.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Player.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Player.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_player.FrameBackdrop:ClearAllPoints()
														oUF_LUI_player.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_player, "TOPLEFT", tonumber(db.oUF.Player.Backdrop.Padding.Left), tonumber(db.oUF.Player.Backdrop.Padding.Top))
														oUF_LUI_player.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_player, "BOTTOMRIGHT", tonumber(db.oUF.Player.Backdrop.Padding.Right), tonumber(db.oUF.Player.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Player.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Player.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_player.FrameBackdrop:ClearAllPoints()
														oUF_LUI_player.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_player, "TOPLEFT", tonumber(db.oUF.Player.Backdrop.Padding.Left), tonumber(db.oUF.Player.Backdrop.Padding.Top))
														oUF_LUI_player.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_player, "BOTTOMRIGHT", tonumber(db.oUF.Player.Backdrop.Padding.Right), tonumber(db.oUF.Player.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Player.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Player.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_player.FrameBackdrop:ClearAllPoints()
														oUF_LUI_player.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_player, "TOPLEFT", tonumber(db.oUF.Player.Backdrop.Padding.Left), tonumber(db.oUF.Player.Backdrop.Padding.Top))
														oUF_LUI_player.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_player, "BOTTOMRIGHT", tonumber(db.oUF.Player.Backdrop.Padding.Right), tonumber(db.oUF.Player.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Player.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Player.Border.Insets.Left = InsetLeft
														oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Player.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Player.Border.Insets.Right = InsetRight
														oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Player.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Player.Border.Insets.Top = InsetTop
														oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Player.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Player.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Player.Border.Insets.Bottom = InsetBottom
														oUF_LUI_player.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Player.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Player.Border.EdgeFile), edgeSize = tonumber(db.oUF.Player.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Player.Border.Insets.Left), right = tonumber(db.oUF.Player.Border.Insets.Right), top = tonumber(db.oUF.Player.Border.Insets.Top), bottom = tonumber(db.oUF.Player.Border.Insets.Bottom)}
															})
															
															oUF_LUI_player.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Player.Backdrop.Color.r), tonumber(db.oUF.Player.Backdrop.Color.g), tonumber(db.oUF.Player.Backdrop.Color.b), tonumber(db.oUF.Player.Backdrop.Color.a))
															oUF_LUI_player.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Player.Border.Color.r), tonumber(db.oUF.Player.Border.Color.g), tonumber(db.oUF.Player.Border.Color.b), tonumber(db.oUF.Player.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Player Health.\n\nDefault: "..defaults.profile.oUF.Player.Health.Height,
															type = "input",
															get = function() return db.oUF.Player.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Player.Health.Height = Height
																		oUF_LUI_player.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Health.Padding,
															type = "input",
															get = function() return db.oUF.Player.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Player.Health.Padding = Padding
																		oUF_LUI_player.Health:ClearAllPoints()
																		oUF_LUI_player.Health:SetPoint("TOPLEFT", oUF_LUI_player, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_player.Health:SetPoint("TOPRIGHT", oUF_LUI_player, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Player.Health.Smooth = not db.oUF.Player.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Player.Health.ColorClass = not db.oUF.Player.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Player.Health.ColorGradient = false
																			db.oUF.Player.Health.IndividualColor.Enable = false
																			
																			print("Player Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Player.Health.ColorGradient = not db.oUF.Player.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Player.Health.ColorClass = false
																			db.oUF.Player.Health.IndividualColor.Enable = false
																			
																			print("Player Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Player.Health.IndividualColor.Enable = not db.oUF.Player.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Player.Health.ColorClass = false
																			db.oUF.Player.Health.ColorGradient = false
																			
																			oUF_LUI_player.Health:SetStatusBarColor(db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b)
																			oUF_LUI_player.Health.bg:SetVertexColor(db.oUF.Player.Health.IndividualColor.r*tonumber(db.oUF.Player.Health.BGMultiplier), db.oUF.Player.Health.IndividualColor.g*tonumber(db.oUF.Player.Health.BGMultiplier), db.oUF.Player.Health.IndividualColor.b*tonumber(db.oUF.Player.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Health.IndividualColor.r, db.oUF.Player.Health.IndividualColor.g, db.oUF.Player.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Health.IndividualColor.r = r
																	db.oUF.Player.Health.IndividualColor.g = g
																	db.oUF.Player.Health.IndividualColor.b = b
																	
																	oUF_LUI_player.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_player.Health.bg:SetVertexColor(r*tonumber(db.oUF.Player.Health.BGMultiplier), g*tonumber(db.oUF.Player.Health.BGMultiplier), b*tonumber(db.oUF.Player.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Player.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Player.Health.Texture = HealthTex
																	oUF_LUI_player.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Player.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Player.Health.TextureBG = HealthTexBG
																	oUF_LUI_player.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Player.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Player.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_player.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Player.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Player.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_player.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Player.Power.Enable = not db.oUF.Player.Power.Enable
																if EnablePower == true then
																	oUF_LUI_player.Power:Show()
																else
																	oUF_LUI_player.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Player Power.\n\nDefault: "..defaults.profile.oUF.Player.Power.Height,
															type = "input",
															get = function() return db.oUF.Player.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Player.Power.Height = Height
																		oUF_LUI_player.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Power.Padding,
															type = "input",
															get = function() return db.oUF.Player.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Player.Power.Padding = Padding
																		oUF_LUI_player.Power:ClearAllPoints()
																		oUF_LUI_player.Power:SetPoint("TOPLEFT", oUF_LUI_player.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_player.Power:SetPoint("TOPRIGHT", oUF_LUI_player.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Player.Power.Smooth = not db.oUF.Player.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Player.Power.ColorClass = not db.oUF.Player.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Player.Power.ColorType = false
																			db.oUF.Player.Power.IndividualColor.Enable = false
																			
																			print("Player Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Player.Power.ColorType = not db.oUF.Player.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Player.Power.ColorClass = false
																			db.oUF.Player.Power.IndividualColor.Enable = false
																			
																			print("Player Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Player.Power.IndividualColor.Enable = not db.oUF.Player.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Player.Power.ColorType = false
																			db.oUF.Player.Power.ColorClass = false
																			
																			oUF_LUI_player.Power:SetStatusBarColor(db.oUF.Player.Power.IndividualColor.r, db.oUF.Player.Power.IndividualColor.g, db.oUF.Player.Power.IndividualColor.b)
																			oUF_LUI_player.Power.bg:SetVertexColor(db.oUF.Player.Power.IndividualColor.r*tonumber(db.oUF.Player.Power.BGMultiplier), db.oUF.Player.Power.IndividualColor.g*tonumber(db.oUF.Player.Power.BGMultiplier), db.oUF.Player.Power.IndividualColor.b*tonumber(db.oUF.Player.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Power.IndividualColor.r, db.oUF.Player.Power.IndividualColor.g, db.oUF.Player.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Power.IndividualColor.r = r
																	db.oUF.Player.Power.IndividualColor.g = g
																	db.oUF.Player.Power.IndividualColor.b = b
																	
																	oUF_LUI_player.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_player.Power.bg:SetVertexColor(r*tonumber(db.oUF.Player.Power.BGMultiplier), g*tonumber(db.oUF.Player.Power.BGMultiplier), b*tonumber(db.oUF.Player.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Player.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Player.Power.Texture = PowerTex
																	oUF_LUI_player.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Player.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Power.TextureBG
																end,
															set = function(self, PowerTexBG)
																	db.oUF.Player.Power.TextureBG = PowerTexBG
																	oUF_LUI_player.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Player.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Player.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_player.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Player.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Player.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_player.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Player.Full.Enable = not db.oUF.Player.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_player.Full:Show()
																else
																	oUF_LUI_player.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Player.Full.Height,
															type = "input",
															get = function() return db.oUF.Player.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Player.Full.Height = Height
																		oUF_LUI_player.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Full.Padding,
															type = "input",
															get = function() return db.oUF.Player.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Player.Full.Padding = Padding
																	oUF_LUI_player.Full:ClearAllPoints()
																	oUF_LUI_player.Full:SetPoint("TOPLEFT", oUF_LUI_player.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_player.Full:SetPoint("TOPRIGHT", oUF_LUI_player.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Player.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Player.Full.Texture = FullTex
																	oUF_LUI_player.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Player.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Player.Full.Alpha = FullAlpha
																	oUF_LUI_player.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Player.Full.Color.r, db.oUF.Player.Full.Color.g, db.oUF.Player.Full.Color.b, db.oUF.Player.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Player.Full.Color.r = r
																	db.oUF.Player.Full.Color.g = g
																	db.oUF.Player.Full.Color.b = b
																	db.oUF.Player.Full.Color.a = a
																	
																	oUF_LUI_player.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
										Totembar = {
											name = "Totembar",
											type = "group",
											order = 4,
											disabled = function()
													if class == "SHAMAN" then
														return false
													else
														return true
													end
												end,
											args = {
												Totems = {
													name = "Enable",
													desc = "Whether you want to show the TotemTimer Bar or not.\n",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Totems.Enable end,
													set = function()
															db.oUF.Player.Totems.Enable = not db.oUF.Player.Totems.Enable
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 1,
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Totems.Enable end,
													guiInline = true,
													order = 2,
													args = {
														LockTotems = {
															name = "Lock",
															desc = "Whether you want to stick the Totembar to your PlayerFrame or not.\nIf Locked, FortExorcist Spelltimer will be adjust automaticly.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Totems.Lock end,
															set = function()
																	db.oUF.Player.Totems.Lock = not db.oUF.Player.Totems.Lock
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 1,
														},
														XValue = {
															name = "X Value",
															desc = "Choose the X Value for your TotemBar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Totems.X,
															type = "input",
															disabled = function() return db.oUF.Player.Totems.Lock end,
															get = function() return db.oUF.Player.Totems.X end,
															set = function(self,XValue)
																	if XValue == nil or XValue == "" then
																		XValue = "0"
																	end
																	db.oUF.Player.Totems.X = XValue
																	oUF_LUI_player.TotemBar[1]:SetPoint("BOTTOMLEFT", oUF_LUI_player, "TOPLEFT", db.oUF.Player.Totems.X, db.oUF.Player.Totems.Y)
																end,
															order = 2,
														},
														YValue = {
															name = "Y Value",
															desc = "Choose the Y Value for your TotemBar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Totems.Y,
															type = "input",
															disabled = function() return db.oUF.Player.Totems.Lock end,
															get = function() return db.oUF.Player.Totems.Y end,
															set = function(self,YValue)
																	if YValue == nil or YValue == "" then
																		YValue = "0"
																	end
																	db.oUF.Player.Totems.Y = YValue
																	oUF_LUI_player.TotemBar[1]:SetPoint("BOTTOMLEFT", oUF_LUI_player, "TOPLEFT", db.oUF.Player.Totems.X, db.oUF.Player.Totems.Y)
																end,
															order = 3,
														},
														Width = {
															name = "Width",
															desc = "Choose your TotemBar Width.\n\nDefault: "..defaults.profile.oUF.Player.Totems.Width,
															type = "input",
															get = function() return db.oUF.Player.Totems.Width end,
															set = function(self,Width)
																	if Width == nil or Width == "" then
																		Width = "0"
																	end
																	db.oUF.Player.Totems.Width = Width
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 4,
														},
														Height = {
															name = "Height",
															desc = "Choose your TotemBar Height.\n\nDefault: "..defaults.profile.oUF.Player.Totems.Height,
															type = "input",
															get = function() return db.oUF.Player.Totems.Height end,
															set = function(self,Height)
																	if Height == nil or Height == "" then
																		Height = "0"
																	end
																	db.oUF.Player.Totems.Height = Height
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 5,
														},
														Texture = {
															name = "Texture",
															desc = "Choose your Totembar Texture!\nDefault: "..defaults.profile.oUF.Player.Totems.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Totems.Texture
																end,
															set = function(self, Texture)
																	db.oUF.Player.Totems.Texture = Texture
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 6,
														},
														Multiplier = {
															name = "Multiplier",
															desc = "Choose your Totembar Background Multiplier!\n Default: "..defaults.profile.oUF.Player.Totems.Multiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Player.Totems.Multiplier end,
															set = function(_, Multiplier)
																	db.oUF.Player.Totems.Multiplier = Multiplier
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 7,
														},
													},
												},
											},
										},
										Runebar = {
											name = "Runebar",
											type = "group",
											order = 5,
											disabled = function()
													if class == "DEATHKNIGHT" then
														return false
													else
														return true
													end
												end,
											args = {
												Runes = {
													name = "Enable",
													desc = "Whether you want to show the DK Rune Bar or not.\n",
													type = "toggle",
													
													width = "full",
													get = function() return db.oUF.Player.Runes.Enable end,
													set = function()
															db.oUF.Player.Runes.Enable = not db.oUF.Player.Runes.Enable
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 1,
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Runes.Enable end,
													guiInline = true,
													order = 2,
													args = {
														LockRunes = {
															name = "Lock",
															desc = "Whether you want to stick the DK Rune Bar to your PlayerFrame or not.\nIf Locked, FortExorcist Spelltimer will be adjust automaticly.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Runes.Lock end,
															set = function()
																	db.oUF.Player.Runes.Lock = not db.oUF.Player.Runes.Lock
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 1,
														},
														XValue = {
															name = "X Value",
															desc = "Choose the X Value for your RuneBar.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Runes.X,
															type = "input",
															disabled = function() return db.oUF.Player.Runes.Lock end,
															get = function() return db.oUF.Player.Runes.X end,
															set = function(self,XValue)
																	if XValue == nil or XValue == "" then
																		XValue = "0"
																	end
																	db.oUF.Player.Runes.X = XValue
																	oUF_LUI_player.Runes:ClearAllPoints()
																	oUF_LUI_player.Runes:SetPoint('BOTTOMLEFT', oUF_LUI_player, 'TOPLEFT', db.oUF.Player.Runes.X, db.oUF.Player.Runes.Y)
																end,
															order = 2,
														},
														YValue = {
															name = "Y Value",
															desc = "Choose the Y Value for your RuneBar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Runes.Y,
															type = "input",
															disabled = function() return db.oUF.Player.Runes.Lock end,
															get = function() return db.oUF.Player.Runes.Y end,
															set = function(self,YValue)
																	if YValue == nil or YValue == "" then
																		YValue = "0"
																	end
																	db.oUF.Player.Runes.Y = YValue
																	oUF_LUI_player.Runes:ClearAllPoints()
																	oUF_LUI_player.Runes:SetPoint('BOTTOMLEFT', oUF_LUI_player, 'TOPLEFT', db.oUF.Player.Runes.X, db.oUF.Player.Runes.Y)
																end,
															order = 3,
														},
														Width = {
															name = "Width",
															desc = "Choose your TotemBar Width.\n\nDefault: "..defaults.profile.oUF.Player.Runes.Width,
															type = "input",
															get = function() return db.oUF.Player.Runes.Width end,
															set = function(self,Width)
																	if Width == nil or Width == "" then
																		Width = "0"
																	end
																	db.oUF.Player.Runes.Width = Width
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 4,
														},
														Height = {
															name = "Height",
															desc = "Choose your TotemBar Height.\n\nDefault: "..defaults.profile.oUF.Player.Runes.Height,
															type = "input",
															get = function() return db.oUF.Player.Runes.Height end,
															set = function(self,Height)
																	if Height == nil or Height == "" then
																		Height = "0"
																	end
																	db.oUF.Player.Runes.Height = Height
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 5,
														},
														Texture = {
															name = "Texture",
															desc = "Choose your Totembar Texture!\nDefault: "..defaults.profile.oUF.Player.Runes.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Player.Runes.Texture
																end,
															set = function(self, Texture)
																	db.oUF.Player.Runes.Texture = Texture
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 6,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between your Runes!\n Default: "..defaults.profile.oUF.Player.Runes.Padding,
															type = "range",
															min = 1,
															max = 10,
															step = 1,
															get = function() return db.oUF.Player.Runes.Padding end,
															set = function(_, Padding)
																	db.oUF.Player.Runes.Padding = Padding
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 7,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Player.Texts.Name.Enable = not db.oUF.Player.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_player.Info:Show()
																else
																	oUF_LUI_player.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player Name Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.Name.Size,
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.Name.Size = FontSize
																	oUF_LUI_player.Info:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Name.Font),db.oUF.Player.Texts.Name.Size,db.oUF.Player.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player Name!\n\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Font,
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.Name.Font = Font
																	oUF_LUI_player.Info:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Name.Font),db.oUF.Player.Texts.Name.Size,db.oUF.Player.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player Name.\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Outline,
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Info:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Name.Font),db.oUF.Player.Texts.Name.Size,db.oUF.Player.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Player Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Player.Texts.Name.X = NameX
																		oUF_LUI_player.Info:ClearAllPoints()
																		oUF_LUI_player.Info:SetPoint(db.oUF.Player.Texts.Name.Point, oUF_LUI_player, db.oUF.Player.Texts.Name.RelativePoint, tonumber(db.oUF.Player.Texts.Name.X), tonumber(db.oUF.Player.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Player Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Player.Texts.Name.Y = NameY
																		oUF_LUI_player.Info:ClearAllPoints()
																		oUF_LUI_player.Info:SetPoint(db.oUF.Player.Texts.Name.Point, oUF_LUI_player, db.oUF.Player.Texts.Name.RelativePoint, tonumber(db.oUF.Player.Texts.Name.X), tonumber(db.oUF.Player.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player Name.\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.Name.Point = positions[Point]
																	oUF_LUI_player.Info:ClearAllPoints()
																	oUF_LUI_player.Info:SetPoint(db.oUF.Player.Texts.Name.Point, oUF_LUI_player, db.oUF.Player.Texts.Name.RelativePoint, tonumber(db.oUF.Player.Texts.Name.X), tonumber(db.oUF.Player.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player Name.\nDefault: "..defaults.profile.oUF.Player.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Info:ClearAllPoints()
																	oUF_LUI_player.Info:SetPoint(db.oUF.Player.Texts.Name.Point, oUF_LUI_player, db.oUF.Player.Texts.Name.RelativePoint, tonumber(db.oUF.Player.Texts.Name.X), tonumber(db.oUF.Player.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Player Name.\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Format,
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Player.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Player.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Player Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Player.Texts.Name.Length,
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Player.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Player.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Player Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Player.Texts.Name.ColorNameByClass = not db.oUF.Player.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Player Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Player.Texts.Name.ColorClassByClass = not db.oUF.Player.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Player.Texts.Name.ColorLevelByDifficulty = not db.oUF.Player.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Player.Texts.Name.Enable end,
															get = function() return db.oUF.Player.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Player.Texts.Name.ShowClassification = not db.oUF.Player.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Player.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Player.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Player.Texts.Name.ShortClassification = not db.oUF.Player.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.Health.Enable = not db.oUF.Player.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_player.Health.value:Show()
															else
																oUF_LUI_player.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player Health Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.Health.Size,
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.Health.Size = FontSize
																	oUF_LUI_player.Health.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Health.Font),db.oUF.Player.Texts.Health.Size,db.oUF.Player.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Player Health.\nDefault: "..defaults.profile.oUF.Player.Texts.Health.Format,
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Player.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Player.Texts.Health.Format = valueFormat[Format]
																	print("Player Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player Health!\n\nDefault: "..defaults.profile.oUF.Player.Texts.Health.Font,
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.Health.Font = Font
																	oUF_LUI_player.Health.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Health.Font),db.oUF.Player.Texts.Health.Size,db.oUF.Player.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player Health.\nDefault: "..defaults.profile.oUF.Player.Texts.Health.Outline,
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Health.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Health.Font),db.oUF.Player.Texts.Health.Size,db.oUF.Player.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Player Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															get = function() return db.oUF.Player.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Player.Texts.Health.X = HealthX
																		oUF_LUI_player.Health.value:ClearAllPoints()
																		oUF_LUI_player.Health.value:SetPoint(db.oUF.Player.Texts.Health.Point, oUF_LUI_player, db.oUF.Player.Texts.Health.RelativePoint, tonumber(db.oUF.Player.Texts.Health.X), tonumber(db.oUF.Player.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Player Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															get = function() return db.oUF.Player.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Player.Texts.Health.Y = HealthY
																		oUF_LUI_player.Health.value:ClearAllPoints()
																		oUF_LUI_player.Health.value:SetPoint(db.oUF.Player.Texts.Health.Point, oUF_LUI_player, db.oUF.Player.Texts.Health.RelativePoint, tonumber(db.oUF.Player.Texts.Health.X), tonumber(db.oUF.Player.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player Health.\nDefault: "..defaults.profile.oUF.Player.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.Health.Point = positions[Point]
																	oUF_LUI_player.Health.value:ClearAllPoints()
																	oUF_LUI_player.Health.value:SetPoint(db.oUF.Player.Texts.Health.Point, oUF_LUI_player, db.oUF.Player.Texts.Health.RelativePoint, tonumber(db.oUF.Player.Texts.Health.X), tonumber(db.oUF.Player.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player Health.\nDefault: "..defaults.profile.oUF.Player.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Health.value:ClearAllPoints()
																	oUF_LUI_player.Health.value:SetPoint(db.oUF.Player.Texts.Health.Point, oUF_LUI_player, db.oUF.Player.Texts.Health.RelativePoint, tonumber(db.oUF.Player.Texts.Health.X), tonumber(db.oUF.Player.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.Health.ColorClass = not db.oUF.Player.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.Health.ColorGradient = false
																			db.oUF.Player.Texts.Health.IndividualColor.Enable = false
																			
																			print("Player Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Player.Texts.Health.ColorGradient = not db.oUF.Player.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Player.Texts.Health.ColorClass = false
																			db.oUF.Player.Texts.Health.IndividualColor.Enable = false
																			
																			print("Player Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.Health.IndividualColor.Enable = not db.oUF.Player.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.Health.ColorClass = false
																			db.oUF.Player.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_player.Health.value:SetTextColor(tonumber(db.oUF.Player.Texts.Health.IndividualColor.r),tonumber(db.oUF.Player.Texts.Health.IndividualColor.g),tonumber(db.oUF.Player.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.Health.IndividualColor.r, db.oUF.Player.Texts.Health.IndividualColor.g, db.oUF.Player.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.Health.IndividualColor.r = r
																	db.oUF.Player.Texts.Health.IndividualColor.g = g
																	db.oUF.Player.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_player.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Player.Texts.Health.ShowDead = not db.oUF.Player.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.Power.Enable = not db.oUF.Player.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_player.Power.value:Show()
															else
																oUF_LUI_player.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player Power Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.Power.Size,
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.Power.Size = FontSize
																	oUF_LUI_player.Power.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Power.Font),db.oUF.Player.Texts.Power.Size,db.oUF.Player.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Player Power.\nDefault: "..defaults.profile.oUF.Player.Texts.Power.Format,
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Player.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Player.Texts.Power.Format = valueFormat[Format]
																	print("Player Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player Power!\n\nDefault: "..defaults.profile.oUF.Player.Texts.Power.Font,
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.Power.Font = Font
																	oUF_LUI_player.Power.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Power.Font),db.oUF.Player.Texts.Power.Size,db.oUF.Player.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player Power.\nDefault: "..defaults.profile.oUF.Player.Texts.Power.Outline,
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Power.value:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.Power.Font),db.oUF.Player.Texts.Power.Size,db.oUF.Player.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Player Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															get = function() return db.oUF.Player.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Player.Texts.Power.X = PowerX
																		oUF_LUI_player.Power.value:ClearAllPoints()
																		oUF_LUI_player.Power.value:SetPoint(db.oUF.Player.Texts.Power.Point, oUF_LUI_player, db.oUF.Player.Texts.Power.RelativePoint, tonumber(db.oUF.Player.Texts.Power.X), tonumber(db.oUF.Player.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Player Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															get = function() return db.oUF.Player.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Player.Texts.Power.Y = PowerY
																		oUF_LUI_player.Power.value:ClearAllPoints()
																		oUF_LUI_player.Power.value:SetPoint(db.oUF.Player.Texts.Power.Point, oUF_LUI_player, db.oUF.Player.Texts.Power.RelativePoint, tonumber(db.oUF.Player.Texts.Power.X), tonumber(db.oUF.Player.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player Power.\nDefault: "..defaults.profile.oUF.Player.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.Power.Point = positions[Point]
																	oUF_LUI_player.Power.value:ClearAllPoints()
																	oUF_LUI_player.Power.value:SetPoint(db.oUF.Player.Texts.Power.Point, oUF_LUI_player, db.oUF.Player.Texts.Power.RelativePoint, tonumber(db.oUF.Player.Texts.Power.X), tonumber(db.oUF.Player.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player Power.\nDefault: "..defaults.profile.oUF.Player.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Power.value:ClearAllPoints()
																	oUF_LUI_player.Power.value:SetPoint(db.oUF.Player.Texts.Power.Point, oUF_LUI_player, db.oUF.Player.Texts.Power.RelativePoint, tonumber(db.oUF.Player.Texts.Power.X), tonumber(db.oUF.Player.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.Power.ColorClass = not db.oUF.Player.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.Power.ColorType = false
																			db.oUF.Player.Texts.Power.IndividualColor.Enable = false
																			
																			print("Player Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Player.Texts.Power.ColorType = not db.oUF.Player.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Player.Texts.Power.ColorClass = false
																			db.oUF.Player.Texts.Power.IndividualColor.Enable = false
																			
																			print("Player Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.Power.IndividualColor.Enable = not db.oUF.Player.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.Power.ColorClass = false
																			db.oUF.Player.Texts.Power.ColorType = false
																			
																			oUF_LUI_player.Power.value:SetTextColor(tonumber(db.oUF.Player.Texts.Power.IndividualColor.r),tonumber(db.oUF.Player.Texts.Power.IndividualColor.g),tonumber(db.oUF.Player.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.Power.IndividualColor.r, db.oUF.Player.Texts.Power.IndividualColor.g, db.oUF.Player.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.Power.IndividualColor.r = r
																	db.oUF.Player.Texts.Power.IndividualColor.g = g
																	db.oUF.Player.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_player.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.HealthPercent.Enable = not db.oUF.Player.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_player.Health.valuePercent:Show()
															else
																oUF_LUI_player.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_player.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthPercent.Font),db.oUF.Player.Texts.HealthPercent.Size,db.oUF.Player.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Player HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Player.Texts.HealthPercent.ShowAlways = not db.oUF.Player.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player HealthPercent!\n\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.HealthPercent.Font = Font
																	oUF_LUI_player.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthPercent.Font),db.oUF.Player.Texts.HealthPercent.Size,db.oUF.Player.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player HealthPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthPercent.Font),db.oUF.Player.Texts.HealthPercent.Size,db.oUF.Player.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Player HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Player.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Player.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_player.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_player.Health.valuePercent:SetPoint(db.oUF.Player.Texts.HealthPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Player.Texts.HealthPercent.X), tonumber(db.oUF.Player.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Player HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Player.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Player.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_player.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_player.Health.valuePercent:SetPoint(db.oUF.Player.Texts.HealthPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Player.Texts.HealthPercent.X), tonumber(db.oUF.Player.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player HealthPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_player.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_player.Health.valuePercent:SetPoint(db.oUF.Player.Texts.HealthPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Player.Texts.HealthPercent.X), tonumber(db.oUF.Player.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player HealthPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_player.Health.valuePercent:SetPoint(db.oUF.Player.Texts.HealthPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Player.Texts.HealthPercent.X), tonumber(db.oUF.Player.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.HealthPercent.ColorClass = not db.oUF.Player.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Player HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Player.Texts.HealthPercent.ColorGradient = not db.oUF.Player.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Player.Texts.HealthPercent.ColorClass = false
																			db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Player HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.HealthPercent.ColorClass = false
																			db.oUF.Player.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_player.Health.valuePercent:SetTextColor(tonumber(db.oUF.Player.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Player.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Player.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.HealthPercent.IndividualColor.r, db.oUF.Player.Texts.HealthPercent.IndividualColor.g, db.oUF.Player.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Player.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Player.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_player.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Player.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Player.Texts.HealthPercent.ShowDead = not db.oUF.Player.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.PowerPercent.Enable = not db.oUF.Player.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_player.Power.valuePercent:Show()
															else
																oUF_LUI_player.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_player.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerPercent.Font),db.oUF.Player.Texts.PowerPercent.Size,db.oUF.Player.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Player PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Player.Texts.PowerPercent.ShowAlways = not db.oUF.Player.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player PowerPercent!\n\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.PowerPercent.Font = Font
																	oUF_LUI_player.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerPercent.Font),db.oUF.Player.Texts.PowerPercent.Size,db.oUF.Player.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player PowerPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerPercent.Font),db.oUF.Player.Texts.PowerPercent.Size,db.oUF.Player.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Player PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Player.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Player.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_player.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_player.Power.valuePercent:SetPoint(db.oUF.Player.Texts.PowerPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Player.Texts.PowerPercent.X), tonumber(db.oUF.Player.Texts.PowerPercent.Y))
																	end,
															order = 5,
														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Player PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Player.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Player.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_player.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_player.Power.valuePercent:SetPoint(db.oUF.Player.Texts.PowerPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Player.Texts.PowerPercent.X), tonumber(db.oUF.Player.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player PowerPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_player.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_player.Power.valuePercent:SetPoint(db.oUF.Player.Texts.PowerPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Player.Texts.PowerPercent.X), tonumber(db.oUF.Player.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player PowerPercent.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_player.Power.valuePercent:SetPoint(db.oUF.Player.Texts.PowerPercent.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Player.Texts.PowerPercent.X), tonumber(db.oUF.Player.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.PowerPercent.ColorClass = not db.oUF.Player.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.PowerPercent.ColorType = false
																			db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Player PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Player.Texts.PowerPercent.ColorType = not db.oUF.Player.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Player.Texts.PowerPercent.ColorClass = false
																			db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Player PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.PowerPercent.ColorClass = false
																			db.oUF.Player.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_player.Power.valuePercent:SetTextColor(tonumber(db.oUF.Player.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Player.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Player.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.PowerPercent.IndividualColor.r, db.oUF.Player.Texts.PowerPercent.IndividualColor.g, db.oUF.Player.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Player.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Player.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_player.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player HealthMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.HealthMissing.Enable = not db.oUF.Player.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_player.Health.valueMissing:Show()
															else
																oUF_LUI_player.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_player.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthMissing.Font),db.oUF.Player.Texts.HealthMissing.Size,db.oUF.Player.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Player HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Player.Texts.HealthMissing.ShowAlways = not db.oUF.Player.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Player.Texts.HealthMissing.ShortValue = not db.oUF.Player.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player HealthMissing!\n\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.HealthMissing.Font = Font
																	oUF_LUI_player.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthMissing.Font),db.oUF.Player.Texts.HealthMissing.Size,db.oUF.Player.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player HealthMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.HealthMissing.Font),db.oUF.Player.Texts.HealthMissing.Size,db.oUF.Player.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Player HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Player.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Player.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_player.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_player.Health.valueMissing:SetPoint(db.oUF.Player.Texts.HealthMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Player.Texts.HealthMissing.X), tonumber(db.oUF.Player.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Player HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Player.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Player.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_player.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_player.Health.valueMissing:SetPoint(db.oUF.Player.Texts.HealthMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Player.Texts.HealthMissing.X), tonumber(db.oUF.Player.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player HealthMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_player.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_player.Health.valueMissing:SetPoint(db.oUF.Player.Texts.HealthMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Player.Texts.HealthMissing.X), tonumber(db.oUF.Player.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player HealthMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_player.Health.valueMissing:SetPoint(db.oUF.Player.Texts.HealthMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Player.Texts.HealthMissing.X), tonumber(db.oUF.Player.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.HealthMissing.ColorClass = not db.oUF.Player.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Player HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Player.Texts.HealthMissing.ColorGradient = not db.oUF.Player.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Player.Texts.HealthMissing.ColorClass = false
																			db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Player HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.HealthMissing.ColorClass = false
																			db.oUF.Player.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_player.Health.valueMissing:SetTextColor(tonumber(db.oUF.Player.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Player.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Player.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.HealthMissing.IndividualColor.r, db.oUF.Player.Texts.HealthMissing.IndividualColor.g, db.oUF.Player.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Player.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Player.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_player.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Player PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.PowerMissing.Enable = not db.oUF.Player.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_player.Power.valueMissing:Show()
															else
																oUF_LUI_player.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Player PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_player.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerMissing.Font),db.oUF.Player.Texts.PowerMissing.Size,db.oUF.Player.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Player PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Player.Texts.PowerMissing.ShowAlways = not db.oUF.Player.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Player.Texts.PowerMissing.ShortValue = not db.oUF.Player.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Player PowerMissing!\n\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.PowerMissing.Font = Font
																	oUF_LUI_player.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerMissing.Font),db.oUF.Player.Texts.PowerMissing.Size,db.oUF.Player.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Player PowerMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_player.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.PowerMissing.Font),db.oUF.Player.Texts.PowerMissing.Size,db.oUF.Player.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Player PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Player.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Player.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_player.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_player.Power.valueMissing:SetPoint(db.oUF.Player.Texts.PowerMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Player.Texts.PowerMissing.X), tonumber(db.oUF.Player.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Player PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Player.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Player.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_player.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_player.Power.valueMissing:SetPoint(db.oUF.Player.Texts.PowerMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Player.Texts.PowerMissing.X), tonumber(db.oUF.Player.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Player PowerMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Player.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_player.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_player.Power.valueMissing:SetPoint(db.oUF.Player.Texts.PowerMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Player.Texts.PowerMissing.X), tonumber(db.oUF.Player.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Player PowerMissing.\nDefault: "..defaults.profile.oUF.Player.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Player.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Player.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_player.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_player.Power.valueMissing:SetPoint(db.oUF.Player.Texts.PowerMissing.Point, oUF_LUI_player, db.oUF.Player.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Player.Texts.PowerMissing.X), tonumber(db.oUF.Player.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Player.Texts.PowerMissing.ColorClass = not db.oUF.Player.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Player.Texts.PowerMissing.ColorType = false
																			db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Player PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Player.Texts.PowerMissing.ColorType = not db.oUF.Player.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Player.Texts.PowerMissing.ColorClass = false
																			db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Player PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Player PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Player.Texts.PowerMissing.ColorClass = false
																			db.oUF.Player.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_player.Power.valueMissing:SetTextColor(tonumber(db.oUF.Player.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Player.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Player.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Player PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Player.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.PowerMissing.IndividualColor.r, db.oUF.Player.Texts.PowerMissing.IndividualColor.g, db.oUF.Player.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Player.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Player.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_player.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										DruidMana = {
											name = "DruidMana",
											type = "group",
											order = 8,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the your Mana Value while in Cat/Bear or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Texts.DruidMana.Enable end,
													set = function(self,Enable)
															db.oUF.Player.Texts.DruidMana.Enable = not db.oUF.Player.Texts.DruidMana.Enable
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 1,
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Player.Texts.DruidMana.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ShowIndicator = {
															name = "Show Indicator",
															desc = "Wether you want to show the '-' before your DruidMana or not",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.DruidMana.ShowIndicator end,
															set = function(self,ShowIndicator)
																	db.oUF.Player.Texts.DruidMana.ShowIndicator = not db.oUF.Player.Texts.DruidMana.ShowIndicator
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 1,
														},
														ShowPercent = {
															name = "Show Percent",
															desc = "Wether you want to show the your Mana Value as Percentage or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.DruidMana.ShowPercent end,
															set = function(self,ShowPercent)
																	db.oUF.Player.Texts.DruidMana.ShowPercent = not db.oUF.Player.Texts.DruidMana.ShowPercent
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 2,
														},
														ShowShortValue = {
															name = "Show Short Value",
															desc = "Wether you want to show a short or long DruidMana Value",
															type = "toggle",
															disabled = function() return db.oUF.Player.Texts.DruidMana.ShowPercent end,
															get = function() return db.oUF.Player.Texts.DruidMana.ShowShortValue end,
															set = function(self,ShowShortValue)
																	db.oUF.Player.Texts.DruidMana.ShowShortValue = not db.oUF.Player.Texts.DruidMana.ShowShortValue
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 3,
														},
														HideIfNoPower = {
															name = "Hide If No Power",
															desc = "Wether you want to show your DruidMana when you have no Power or not.",
															type = "toggle",
															get = function() return db.oUF.Player.Texts.DruidMana.HideIfNoPower end,
															set = function(self,Enable)
																	db.oUF.Player.Texts.DruidMana.HideIfNoPower = not db.oUF.Player.Texts.DruidMana.HideIfNoPower
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 4,
														},
														XValue = {
															name = "X Value",
															desc = "Choose the X Value for your DruidMana.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Texts.DruidMana.X,
															type = "input",
															get = function() return db.oUF.Player.Texts.DruidMana.X end,
															set = function(self,XValue)
																	if XValue == nil or XValue == "" then
																		XValue = "0"
																	end
																	db.oUF.Player.Texts.DruidMana.X = XValue
																	oUF_LUI_player.DruidMana:ClearAllPoints()
																	oUF_LUI_player.DruidMana:SetPoint("LEFT", oUF_LUI_player.Power.value, "RIGHT", tonumber(XValue), tonumber(db.oUF.Player.Texts.DruidMana.Y))
																end,
															order = 5,
														},
														YValue = {
															name = "Y Value",
															desc = "Choose the Y Value for your DruidMana.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Texts.DruidMana.Y,
															type = "input",
															get = function() return db.oUF.Player.Texts.DruidMana.Y end,
															set = function(self,YValue)
																	if YValue == nil or YValue == "" then
																		YValue = "0"
																	end
																	db.oUF.Player.Texts.DruidMana.Y = YValue
																	oUF_LUI_player.DruidMana:ClearAllPoints()
																	oUF_LUI_player.DruidMana:SetPoint("LEFT", oUF_LUI_player.Power.value, "RIGHT", tonumber(db.oUF.Player.Texts.DruidMana.X), tonumber(YValue))
																end,
															order = 6,
														},
														Font = {
															name = "Font",
															desc = "Choose your DruidMana Font!\n\nDefault: "..defaults.profile.oUF.Player.Texts.DruidMana.Font,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Player.Texts.DruidMana.Font end,
															set = function(self, Font)
																	db.oUF.Player.Texts.DruidMana.Font = Font
																	oUF_LUI_player.DruidMana:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.DruidMana.Font), db.oUF.Player.Texts.DruidMana.Size, db.oUF.Player.Texts.DruidMana.Outline)
																end,
															order = 7,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the DruidMana Font Flag.\nDefault: "..defaults.profile.oUF.Player.Texts.DruidMana.Outline,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Player.Texts.DruidMana.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Player.Texts.DruidMana.Outline = fontflags[FontFlag]
																	oUF_LUI_player.DruidMana:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.DruidMana.Font), db.oUF.Player.Texts.DruidMana.Size, db.oUF.Player.Texts.DruidMana.Outline)
																end,
															order = 8,
														},
														FontSize = {
															name = "Size",
															desc = "Choose your DruidMana Fontsize!\n Default: "..defaults.profile.oUF.Player.Texts.DruidMana.Size,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Player.Texts.DruidMana.Size end,
															set = function(_, FontSize)
																	db.oUF.Player.Texts.DruidMana.Size = FontSize
																	oUF_LUI_player.DruidMana:SetFont(LSM:Fetch("font", db.oUF.Player.Texts.DruidMana.Font), db.oUF.Player.Texts.DruidMana.Size, db.oUF.Player.Texts.DruidMana.Outline)
																end,
															order = 9,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual DruidMana Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															hasAlpha = false,
															get = function() return db.oUF.Player.Texts.DruidMana.Color.r, db.oUF.Player.Texts.DruidMana.Color.g, db.oUF.Player.Texts.DruidMana.Color.b end,
															set = function(_,r,g,b)
																	db.oUF.Player.Texts.DruidMana.Color.r = r
																	db.oUF.Player.Texts.DruidMana.Color.g = g
																	db.oUF.Player.Texts.DruidMana.Color.b = b
																	
																	oUF_LUI_player.DruidMana:SetTextColor(r,g,b)
																end,
															order = 10,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Player.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Player.Portrait.Enable = not db.oUF.Player.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Player.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Player.Portrait.Enable end,
											get = function() return db.oUF.Player.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Player.Portrait.Width = PortraitWidth
														oUF_LUI_player.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Player.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Player.Portrait.Enable end,
											get = function() return db.oUF.Player.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Player.Portrait.Height = PortraitHeight
														oUF_LUI_player.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Player.Portrait.Enable end,
											get = function() return db.oUF.Player.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Player.Portrait.X = PortraitX
														oUF_LUI_player.Portrait:SetPoint("TOPLEFT", oUF_LUI_player.Health, "TOPLEFT", PortraitX, db.oUF.Player.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Player.Portrait.Enable end,
											get = function() return db.oUF.Player.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Player.Portrait.Y = PortraitY
														oUF_LUI_player.Portrait:SetPoint("TOPLEFT", oUF_LUI_player.Health, "TOPLEFT", db.oUF.Player.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.Player.Icons.Lootmaster.Enable = not db.oUF.Player.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Player.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.Player.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_player.MasterLooter:ClearAllPoints()
																oUF_LUI_player.MasterLooter:SetPoint(db.oUF.Player.Icons.Lootmaster.Point, oUF_LUI_player, db.oUF.Player.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.Player.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Player.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.Player.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_player.MasterLooter:ClearAllPoints()
																oUF_LUI_player.MasterLooter:SetPoint(db.oUF.Player.Icons.Lootmaster.Point, oUF_LUI_player, db.oUF.Player.Icons.Lootmaster, tonumber(db.oUF.Player.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.Player.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_player.MasterLooter:ClearAllPoints()
															oUF_LUI_player.MasterLooter:SetPoint(db.oUF.Player.Icons.Lootmaster.Point, oUF_LUI_player, db.oUF.Player.Icons.Lootmaster.Point, tonumber(db.oUF.Player.Icons.Lootmaster.X), tonumber(db.oUF.Player.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Player.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.Player.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_player.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_player.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.MasterLooter:IsShown() then oUF_LUI_player.MasterLooter:Hide() else oUF_LUI_player.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.Player.Icons.Leader.Enable = not db.oUF.Player.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Leader.Enable end,
													get = function() return db.oUF.Player.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.Player.Icons.Leader.X = LeaderX
																oUF_LUI_player.Leader:ClearAllPoints()
																oUF_LUI_player.Leader:SetPoint(db.oUF.Player.Icons.Leader.Point, oUF_LUI_player, db.oUF.Player.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.Player.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Leader.Enable end,
													get = function() return db.oUF.Player.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.Player.Icons.Leader.Y = LeaderY
																oUF_LUI_player.Leader:ClearAllPoints()
																oUF_LUI_player.Leader:SetPoint(db.oUF.Player.Icons.Leader.Point, oUF_LUI_player, db.oUF.Player.Icons.Leader.Point, tonumber(db.oUF.Player.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.Player.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_player.Leader:ClearAllPoints()
															oUF_LUI_player.Leader:SetPoint(db.oUF.Player.Icons.Leader.Point, oUF_LUI_player, db.oUF.Player.Icons.Leader.Point, tonumber(db.oUF.Player.Icons.Leader.X), tonumber(db.oUF.Player.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.Leader.Enable end,
													get = function() return db.oUF.Player.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.Player.Icons.Leader.Size = LeaderSize
															oUF_LUI_player.Leader:SetHeight(LeaderSize)
															oUF_LUI_player.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.Leader:IsShown() then oUF_LUI_player.Leader:Hide() else oUF_LUI_player.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.Player.Icons.Role.Enable = not db.oUF.Player.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Role.Enable end,
													get = function() return db.oUF.Player.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.Player.Icons.Role.X = RoleX
																oUF_LUI_player.LFDRole:ClearAllPoints()
																oUF_LUI_player.LFDRole:SetPoint(db.oUF.Player.Icons.Role.Point, oUF_LUI_player, db.oUF.Player.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.Player.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Role.Enable end,
													get = function() return db.oUF.Player.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.Player.Icons.Role.Y = RoleY
																oUF_LUI_player.LFDRole:ClearAllPoints()
																oUF_LUI_player.LFDRole:SetPoint(db.oUF.Player.Icons.Role.Point, oUF_LUI_player, db.oUF.Player.Icons.Role.Point, tonumber(db.oUF.Player.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.Player.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_player.LFDRole:ClearAllPoints()
															oUF_LUI_player.LFDRole:SetPoint(db.oUF.Player.Icons.Role.Point, oUF_LUI_player, db.oUF.Player.Icons.Role.Point, tonumber(db.oUF.Player.Icons.Role.X), tonumber(db.oUF.Player.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.Role.Enable end,
													get = function() return db.oUF.Player.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.Player.Icons.Role.Size = RoleSize
															oUF_LUI_player.LFDRole:SetHeight(RoleSize)
															oUF_LUI_player.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.LFDRole:IsShown() then oUF_LUI_player.LFDRole:Hide() else oUF_LUI_player.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Player.Icons.Raid.Enable = not db.oUF.Player.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Raid.Enable end,
													get = function() return db.oUF.Player.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.Player.Icons.Raid.X = RaidX
																oUF_LUI_player.RaidIcon:ClearAllPoints()
																oUF_LUI_player.RaidIcon:SetPoint(db.oUF.Player.Icons.Raid.Point, oUF_LUI_player, db.oUF.Player.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Player.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Raid.Enable end,
													get = function() return db.oUF.Player.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Player.Icons.Raid.Y = RaidY
																oUF_LUI_player.RaidIcon:ClearAllPoints()
																oUF_LUI_player.RaidIcon:SetPoint(db.oUF.Player.Icons.Raid.Point, oUF_LUI_player, db.oUF.Player.Icons.Raid.Point, tonumber(db.oUF.Player.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Player.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_player.RaidIcon:ClearAllPoints()
															oUF_LUI_player.RaidIcon:SetPoint(db.oUF.Player.Icons.Raid.Point, oUF_LUI_player, db.oUF.Player.Icons.Raid.Point, tonumber(db.oUF.Player.Icons.Raid.X), tonumber(db.oUF.Player.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Player.Icons.Raid.Enable end,
													get = function() return db.oUF.Player.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Player.Icons.Raid.Size = RaidSize
															oUF_LUI_player.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_player.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_player.RaidIcon:IsShown() then oUF_LUI_player.RaidIcon:Hide() else oUF_LUI_player.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.Player.Icons.Resting.Enable = not db.oUF.Player.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Resting.Enable end,
													get = function() return db.oUF.Player.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.Player.Icons.Resting.X = RestingX
																oUF_LUI_player.Resting:ClearAllPoints()
																oUF_LUI_player.Resting:SetPoint(db.oUF.Player.Icons.Resting.Point, oUF_LUI_player, db.oUF.Player.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.Player.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Resting.Enable end,
													get = function() return db.oUF.Player.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.Player.Icons.Resting.Y = RestingY
																oUF_LUI_player.Resting:ClearAllPoints()
																oUF_LUI_player.Resting:SetPoint(db.oUF.Player.Icons.Resting.Point, oUF_LUI_player, db.oUF.Player.Icons.Resting.Point, tonumber(db.oUF.Player.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.Player.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_player.Resting:ClearAllPoints()
															oUF_LUI_player.Resting:SetPoint(db.oUF.Player.Icons.Resting.Point, oUF_LUI_player, db.oUF.Player.Icons.Resting.Point, tonumber(db.oUF.Player.Icons.Resting.X), tonumber(db.oUF.Player.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.Resting.Enable end,
													get = function() return db.oUF.Player.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.Player.Icons.Resting.Size = RestingSize
															oUF_LUI_player.Resting:SetHeight(RestingSize)
															oUF_LUI_player.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.Resting:IsShown() then oUF_LUI_player.Resting:Hide() else oUF_LUI_player.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.Player.Icons.Combat.Enable = not db.oUF.Player.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Combat.Enable end,
													get = function() return db.oUF.Player.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.Player.Icons.Combat.X = CombatX
																oUF_LUI_player.Combat:ClearAllPoints()
																oUF_LUI_player.Combat:SetPoint(db.oUF.Player.Icons.Combat.Point, oUF_LUI_player, db.oUF.Player.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.Player.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.Combat.Enable end,
													get = function() return db.oUF.Player.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.Player.Icons.Combat.Y = CombatY
																oUF_LUI_player.Combat:ClearAllPoints()
																oUF_LUI_player.Combat:SetPoint(db.oUF.Player.Icons.Combat.Point, oUF_LUI_player, db.oUF.Player.Icons.Combat.Point, tonumber(db.oUF.Player.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.Player.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_player.Combat:ClearAllPoints()
															oUF_LUI_player.Combat:SetPoint(db.oUF.Player.Icons.Combat.Point, oUF_LUI_player, db.oUF.Player.Icons.Combat.Point, tonumber(db.oUF.Player.Icons.Combat.X), tonumber(db.oUF.Player.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.Combat.Enable end,
													get = function() return db.oUF.Player.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.Player.Icons.Combat.Size = CombatSize
															oUF_LUI_player.Combat:SetHeight(CombatSize)
															oUF_LUI_player.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.Player.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.Combat:IsShown() then oUF_LUI_player.Combat:Hide() else oUF_LUI_player.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Player.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.Player.Icons.PvP.Enable = not db.oUF.Player.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Player.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.PvP.Enable end,
													get = function() return db.oUF.Player.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.Player.Icons.PvP.X = PvPX
																oUF_LUI_player.PvP:ClearAllPoints()
																oUF_LUI_player.PvP:SetPoint(db.oUF.Player.Icons.PvP.Point, oUF_LUI_player, db.oUF.Player.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.Player.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Player.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.Player.Icons.PvP.Enable end,
													get = function() return db.oUF.Player.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.Player.Icons.PvP.Y = PvPY
																oUF_LUI_player.PvP:ClearAllPoints()
																oUF_LUI_player.PvP:SetPoint(db.oUF.Player.Icons.PvP.Point, oUF_LUI_player, db.oUF.Player.Icons.PvP.Point, tonumber(db.oUF.Player.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.Player.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Player.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.Player.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_player.PvP:ClearAllPoints()
															oUF_LUI_player.PvP:SetPoint(db.oUF.Player.Icons.PvP.Point, oUF_LUI_player, db.oUF.Player.Icons.PvP.Point, tonumber(db.oUF.Player.Icons.PvP.X), tonumber(db.oUF.Player.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.Player.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Player.Icons.PvP.Enable end,
													get = function() return db.oUF.Player.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.Player.Icons.PvP.Size = PvPSize
															oUF_LUI_player.PvP:SetHeight(PvPSize)
															oUF_LUI_player.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Player.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_player.PvP:IsShown() then oUF_LUI_player.PvP:Hide() else oUF_LUI_player.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						Target = {
							name = "Target",
							type = "group",
							order = 5,
							disabled = function() return not db.oUF.Settings.Enable end,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Target",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										Positioning = {
											name = "Positioning",
											type = "group",
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												TargetX = {
													name = "X Value",
													desc = "X Value for your Target Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.X,
													type = "input",
													get = function() return db.oUF.Target.X end,
													set = function(self,TargetX)
																if TargetX == nil or TargetX == "" then
																	TargetX = "0"
																end
																db.oUF.Target.X = TargetX
																oUF_LUI_target:SetPoint("CENTER", UIParent, "CENTER", tonumber(TargetX), tonumber(db.oUF.Target.Y))
															end,
													order = 2,
												},
												TargetY = {
													name = "Y Value",
													desc = "Y Value for your Target Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Y,
													type = "input",
													get = function() return db.oUF.Target.Y end,
													set = function(self,TargetY)
																if TargetY == nil or TargetY == "" then
																	TargetY = "0"
																end
																db.oUF.Target.Y = TargetY
																oUF_LUI_target:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.Target.X), tonumber(TargetY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												TargetHeight = {
													name = "Height",
													desc = "Decide the Height of your Target Frame.\n\nDefault: "..defaults.profile.oUF.Target.Height,
													type = "input",
													get = function() return db.oUF.Target.Height end,
													set = function(self,TargetHeight)
																if TargetHeight == nil or TargetHeight == "" then
																	TargetHeight = "0"
																end
																db.oUF.Target.Height = TargetHeight
																oUF_LUI_target:SetHeight(tonumber(TargetHeight))
															end,
													order = 2,
												},
												TargetWidth = {
													name = "Width",
													desc = "Decide the Width of your Target Frame.\n\nDefault: "..defaults.profile.oUF.Target.Width,
													type = "input",
													get = function() return db.oUF.Target.Width end,
													set = function(self,TargetWidth)
																if TargetWidth == nil or TargetWidth == "" then
																	TargetWidth = "0"
																end
																db.oUF.Target.Width = TargetWidth
																oUF_LUI_target:SetWidth(tonumber(TargetWidth))
																
																if db.oUF.auras.target.buffs_enable == true then
																	oUF_LUI_target.Buffs:SetWidth(tonumber(TargetWidth))
																end
																
																if db.oUF.auras.target.debuffs_enable == true then
																	oUF_LUI_target.Debuffs:SetWidth(tonumber(TargetWidth))
																end
																
																db.oUF.Target.ComboPoints.Width = TargetWidth
																
																oUF_LUI_target.ComboPoints[1]:SetWidth((tonumber(TargetWidth) -4) / 5)
																oUF_LUI_target.ComboPoints[2]:SetWidth((tonumber(TargetWidth) -4) / 5)
																oUF_LUI_target.ComboPoints[3]:SetWidth((tonumber(TargetWidth) -4) / 5)
																oUF_LUI_target.ComboPoints[4]:SetWidth((tonumber(TargetWidth) -4) / 5)
																oUF_LUI_target.ComboPoints[5]:SetWidth((tonumber(TargetWidth) -4) / 5)
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Target.Backdrop.Color.r, db.oUF.Target.Backdrop.Color.g, db.oUF.Target.Backdrop.Color.b, db.oUF.Target.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Target.Backdrop.Color.r = r
															db.oUF.Target.Backdrop.Color.g = g
															db.oUF.Target.Backdrop.Color.b = b
															db.oUF.Target.Backdrop.Color.a = a

															oUF_LUI_target.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Target.Border.Color.r, db.oUF.Target.Border.Color.g, db.oUF.Target.Border.Color.b, db.oUF.Target.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Target.Border.Color.r = r
															db.oUF.Target.Border.Color.g = g
															db.oUF.Target.Border.Color.b = b
															db.oUF.Target.Border.Color.a = a
															
															oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Target.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Target.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Target.Backdrop.Texture = BackdropTexture
															oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Target.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Target.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Target.Border.EdgeFile = BorderTexture
															oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Target.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Target.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Target.Border.EdgeSize = BorderSize
															oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Target.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Target.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_target.FrameBackdrop:ClearAllPoints()
														oUF_LUI_target.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_target, "TOPLEFT", tonumber(db.oUF.Target.Backdrop.Padding.Left), tonumber(db.oUF.Target.Backdrop.Padding.Top))
														oUF_LUI_target.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_target, "BOTTOMRIGHT", tonumber(db.oUF.Target.Backdrop.Padding.Right), tonumber(db.oUF.Target.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Target.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Target.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_target.FrameBackdrop:ClearAllPoints()
														oUF_LUI_target.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_target, "TOPLEFT", tonumber(db.oUF.Target.Backdrop.Padding.Left), tonumber(db.oUF.Target.Backdrop.Padding.Top))
														oUF_LUI_target.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_target, "BOTTOMRIGHT", tonumber(db.oUF.Target.Backdrop.Padding.Right), tonumber(db.oUF.Target.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Target.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Target.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_target.FrameBackdrop:ClearAllPoints()
														oUF_LUI_target.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_target, "TOPLEFT", tonumber(db.oUF.Target.Backdrop.Padding.Left), tonumber(db.oUF.Target.Backdrop.Padding.Top))
														oUF_LUI_target.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_target, "BOTTOMRIGHT", tonumber(db.oUF.Target.Backdrop.Padding.Right), tonumber(db.oUF.Target.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Target.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Target.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_target.FrameBackdrop:ClearAllPoints()
														oUF_LUI_target.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_target, "TOPLEFT", tonumber(db.oUF.Target.Backdrop.Padding.Left), tonumber(db.oUF.Target.Backdrop.Padding.Top))
														oUF_LUI_target.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_target, "BOTTOMRIGHT", tonumber(db.oUF.Target.Backdrop.Padding.Right), tonumber(db.oUF.Target.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Target.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Target.Border.Insets.Left = InsetLeft
														oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Target.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Target.Border.Insets.Right = InsetRight
														oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Target.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Target.Border.Insets.Top = InsetTop
														oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Target.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Target.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Target.Border.Insets.Bottom = InsetBottom
														oUF_LUI_target.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Target.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Target.Border.EdgeFile), edgeSize = tonumber(db.oUF.Target.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Target.Border.Insets.Left), right = tonumber(db.oUF.Target.Border.Insets.Right), top = tonumber(db.oUF.Target.Border.Insets.Top), bottom = tonumber(db.oUF.Target.Border.Insets.Bottom)}
															})
															
															oUF_LUI_target.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Target.Backdrop.Color.r), tonumber(db.oUF.Target.Backdrop.Color.g), tonumber(db.oUF.Target.Backdrop.Color.b), tonumber(db.oUF.Target.Backdrop.Color.a))
															oUF_LUI_target.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Target.Border.Color.r), tonumber(db.oUF.Target.Border.Color.g), tonumber(db.oUF.Target.Border.Color.b), tonumber(db.oUF.Target.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Target Health.\n\nDefault: "..defaults.profile.oUF.Target.Health.Height,
															type = "input",
															get = function() return db.oUF.Target.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Target.Health.Height = Height
																		oUF_LUI_target.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Health.Padding,
															type = "input",
															get = function() return db.oUF.Target.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Target.Health.Padding = Padding
																		oUF_LUI_target.Health:ClearAllPoints()
																		oUF_LUI_target.Health:SetPoint("TOPLEFT", oUF_LUI_target, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_target.Health:SetPoint("TOPRIGHT", oUF_LUI_target, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Target.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Target.Health.Smooth = not db.oUF.Target.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Target.Health.ColorClass = not db.oUF.Target.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Target.Health.ColorGradient = false
																			db.oUF.Target.Health.IndividualColor.Enable = false
																			
																			print("Target Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Target.Health.ColorGradient = not db.oUF.Target.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Target.Health.ColorClass = false
																			db.oUF.Target.Health.IndividualColor.Enable = false
																			
																			print("Target Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Target.Health.IndividualColor.Enable = not db.oUF.Target.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Target.Health.ColorClass = false
																			db.oUF.Target.Health.ColorGradient = false
																			
																			oUF_LUI_target.Health:SetStatusBarColor(db.oUF.Target.Health.IndividualColor.r, db.oUF.Target.Health.IndividualColor.g, db.oUF.Target.Health.IndividualColor.b)
																			oUF_LUI_target.Health.bg:SetVertexColor(db.oUF.Target.Health.IndividualColor.r*tonumber(db.oUF.Target.Health.BGMultiplier), db.oUF.Target.Health.IndividualColor.g*tonumber(db.oUF.Target.Health.BGMultiplier), db.oUF.Target.Health.IndividualColor.b*tonumber(db.oUF.Target.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Health.IndividualColor.r, db.oUF.Target.Health.IndividualColor.g, db.oUF.Target.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Health.IndividualColor.r = r
																	db.oUF.Target.Health.IndividualColor.g = g
																	db.oUF.Target.Health.IndividualColor.b = b
																	
																	oUF_LUI_target.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_target.Health.bg:SetVertexColor(r*tonumber(db.oUF.Target.Health.BGMultiplier), g*tonumber(db.oUF.Target.Health.BGMultiplier), b*tonumber(db.oUF.Target.Health.BGMultiplier))
																end,
															order = 4,
														},
														Tapping = {
															name = "Enable Tapping",
															desc = "Wether you want to show Tapped Healthbars or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Health.Tapping end,
															set = function(self,Tapping)
																	db.oUF.Target.Health.Tapping = db.oUF.Target.Health.Tapping
																	StaticPopup_Show("RELOAD_UI")
																end,
															order = 5,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Target.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Target.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Target.Health.Texture = HealthTex
																	oUF_LUI_target.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Target.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Target.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Target.Health.TextureBG = HealthTexBG
																	oUF_LUI_target.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Target.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Target.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Target.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_target.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Target.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Target.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Target.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_target.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Target.Power.Enable = not db.oUF.Target.Power.Enable
																if EnablePower == true then
																	oUF_LUI_target.Power:Show()
																else
																	oUF_LUI_target.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Target Power.\n\nDefault: "..defaults.profile.oUF.Target.Power.Height,
															type = "input",
															get = function() return db.oUF.Target.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Target.Power.Height = Height
																		oUF_LUI_target.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Power.Padding,
															type = "input",
															get = function() return db.oUF.Target.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Target.Power.Padding = Padding
																		oUF_LUI_target.Power:ClearAllPoints()
																		oUF_LUI_target.Power:SetPoint("TOPLEFT", oUF_LUI_target.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_target.Power:SetPoint("TOPRIGHT", oUF_LUI_target.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Target.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Target.Power.Smooth = not db.oUF.Target.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Target.Power.ColorClass = not db.oUF.Target.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Target.Power.ColorType = false
																			db.oUF.Target.Power.IndividualColor.Enable = false
																			
																			print("Target Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Target.Power.ColorType = not db.oUF.Target.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Target.Power.ColorClass = false
																			db.oUF.Target.Power.IndividualColor.Enable = false
																			
																			print("Target Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Target.Power.IndividualColor.Enable = not db.oUF.Target.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Target.Power.ColorType = false
																			db.oUF.Target.Power.ColorClass = false
																			
																			oUF_LUI_target.Power:SetStatusBarColor(db.oUF.Target.Power.IndividualColor.r, db.oUF.Target.Power.IndividualColor.g, db.oUF.Target.Power.IndividualColor.b)
																			oUF_LUI_target.Power.bg:SetVertexColor(db.oUF.Target.Power.IndividualColor.r*tonumber(db.oUF.Target.Power.BGMultiplier), db.oUF.Target.Power.IndividualColor.g*tonumber(db.oUF.Target.Power.BGMultiplier), db.oUF.Target.Power.IndividualColor.b*tonumber(db.oUF.Target.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Power.IndividualColor.r, db.oUF.Target.Power.IndividualColor.g, db.oUF.Target.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Power.IndividualColor.r = r
																	db.oUF.Target.Power.IndividualColor.g = g
																	db.oUF.Target.Power.IndividualColor.b = b
																	
																	oUF_LUI_target.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_target.Power.bg:SetVertexColor(r*tonumber(db.oUF.Target.Power.BGMultiplier), g*tonumber(db.oUF.Target.Power.BGMultiplier), b*tonumber(db.oUF.Target.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Target.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Target.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Target.Power.Texture = PowerTex
																	oUF_LUI_target.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Target.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Target.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.Target.Power.TextureBG = PowerTexBG
																	oUF_LUI_target.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Target.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Target.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Target.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_target.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Target.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Target.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Target.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_target.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Target.Full.Enable = not db.oUF.Target.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_target.Full:Show()
																else
																	oUF_LUI_target.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Target.Full.Height,
															type = "input",
															get = function() return db.oUF.Target.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Target.Full.Height = Height
																		oUF_LUI_target.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Full.Padding,
															type = "input",
															get = function() return db.oUF.Target.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Target.Full.Padding = Padding
																	oUF_LUI_target.Full:ClearAllPoints()
																	oUF_LUI_target.Full:SetPoint("TOPLEFT", oUF_LUI_target.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_target.Full:SetPoint("TOPRIGHT", oUF_LUI_target.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Target.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Target.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Target.Full.Texture = FullTex
																	oUF_LUI_target.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Target.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Target.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Target.Full.Alpha = FullAlpha
																	oUF_LUI_target.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Target.Full.Color.r, db.oUF.Target.Full.Color.g, db.oUF.Target.Full.Color.b, db.oUF.Target.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Target.Full.Color.r = r
																	db.oUF.Target.Full.Color.g = g
																	db.oUF.Target.Full.Color.b = b
																	db.oUF.Target.Full.Color.a = a
																	
																	oUF_LUI_target.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
										ComboPoints = {
											name = "Combo Points",
											type = "group",
											order = 6,
											args = {
												ComboPoints = {
													name = "Enable",
													desc = "Whether you want to show your ComboPoint Bar or not.\n",
													type = "toggle",
													get = function() return db.oUF.Target.ComboPoints.Enable end,
													set = function()
															db.oUF.Target.ComboPoints.Enable = not db.oUF.Target.ComboPoints.Enable
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 1,
												},
												ShowAlways = {
													name = "Show Always",
													desc = "Whether you want to always show your ComboPoint Bar or not.\n",
													type = "toggle",
													disabled = function() return not db.oUF.Target.ComboPoints.Enable end,
													get = function() return db.oUF.Target.ComboPoints.ShowAlways end,
													set = function()
															db.oUF.Target.ComboPoints.ShowAlways = not db.oUF.Target.ComboPoints.ShowAlways
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 2,
												},
												empty = {
													name = " ",
													width = "full",
													type = "description",
													order = 3,
												},
												desc = {
													name = "|cff3399ffImportant:|r\nTo Change the Color for each ComboPoint\nplease go to UnitFrames->Colors->Other",
													width = "full",
													type = "description",
													order = 4,
												},
												empty2 = {
													name = " ",
													width = "full",
													type = "description",
													order = 5,
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.ComboPoints.Enable end,
													guiInline = true,
													order = 6,
													args = {
														XValue = {
															name = "X Value",
															desc = "Choose the X Value for your ComboPoints.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.ComboPoints.X,
															type = "input",
															get = function() return db.oUF.Target.ComboPoints.X end,
															set = function(self,XValue)
																	if XValue == nil or XValue == "" then
																		XValue = "0"
																	end
																	db.oUF.Target.ComboPoints.X = XValue
																	oUF_LUI_target.ComboPoints[1]:SetPoint("BOTTOMLEFT", oUF_LUI_target, "TOPLEFT", db.oUF.Target.ComboPoints.X, db.oUF.Target.ComboPoints.Y)
																end,
															order = 2,
														},
														YValue = {
															name = "Y Value",
															desc = "Choose the Y Value for your ComboPoints.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.ComboPoints.Y,
															type = "input",
															get = function() return db.oUF.Target.ComboPoints.Y end,
															set = function(self,YValue)
																	if YValue == nil or YValue == "" then
																		YValue = "0"
																	end
																	db.oUF.Target.ComboPoints.Y = YValue
																	oUF_LUI_target.ComboPoints[1]:SetPoint("BOTTOMLEFT", oUF_LUI_target, "TOPLEFT", db.oUF.Target.ComboPoints.X, db.oUF.Target.ComboPoints.Y)
																end,
															order = 3,
														},
														Width = {
															name = "Width",
															desc = "Choose your ComboPoints Width.\n\nDefault: "..defaults.profile.oUF.Target.ComboPoints.Width,
															type = "input",
															get = function() return db.oUF.Target.ComboPoints.Width end,
															set = function(self,Width)
																	if Width == nil or Width == "" then
																		Width = "0"
																	end
																	db.oUF.Target.ComboPoints.Width = Width
																	
																	oUF_LUI_target.ComboPoints[1]:SetWidth((tonumber(Width) -4) / 5)
																	oUF_LUI_target.ComboPoints[2]:SetWidth((tonumber(Width) -4) / 5)
																	oUF_LUI_target.ComboPoints[3]:SetWidth((tonumber(Width) -4) / 5)
																	oUF_LUI_target.ComboPoints[4]:SetWidth((tonumber(Width) -4) / 5)
																	oUF_LUI_target.ComboPoints[5]:SetWidth((tonumber(Width) -4) / 5)
																end,
															order = 4,
														},
														Height = {
															name = "Height",
															desc = "Choose your ComboPoints Height.\n\nDefault: "..defaults.profile.oUF.Target.ComboPoints.Height,
															type = "input",
															get = function() return db.oUF.Target.ComboPoints.Height end,
															set = function(self,Height)
																	if Height == nil or Height == "" then
																		Height = "0"
																	end
																	db.oUF.Target.ComboPoints.Height = Height
																	
																	oUF_LUI_target.ComboPoints[1]:SetHeight(Height)
																	oUF_LUI_target.ComboPoints[2]:SetHeight(Height)
																	oUF_LUI_target.ComboPoints[3]:SetHeight(Height)
																	oUF_LUI_target.ComboPoints[4]:SetHeight(Height)
																	oUF_LUI_target.ComboPoints[5]:SetHeight(Height)
																end,
															order = 5,
														},
														Texture = {
															name = "Texture",
															desc = "Choose your ComboPoints Texture!\nDefault: "..defaults.profile.oUF.Target.ComboPoints.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function() return db.oUF.Target.ComboPoints.Texture end,
															set = function(self, Texture)
																	db.oUF.Target.ComboPoints.Texture = Texture
																	
																	oUF_LUI_target.ComboPoints[1]:SetStatusBarTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[2]:SetStatusBarTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[3]:SetStatusBarTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[4]:SetStatusBarTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[5]:SetStatusBarTexture(LSM:Fetch("statusbar", Texture))
																	
																	oUF_LUI_target.ComboPoints[1].bg:SetTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[2].bg:SetTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[3].bg:SetTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[4].bg:SetTexture(LSM:Fetch("statusbar", Texture))
																	oUF_LUI_target.ComboPoints[5].bg:SetTexture(LSM:Fetch("statusbar", Texture))
																end,
															order = 6,
														},
														Multiplier = {
															name = "Multiplier",
															desc = "Choose your ComboPoints Background Multiplier!\n Default: "..defaults.profile.oUF.Target.ComboPoints.Multiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															disabled = function() return db.oUF.Target.ComboPoints.BackgroundColor.Enable end,
															get = function() return db.oUF.Target.ComboPoints.Multiplier end,
															set = function(_, Multiplier)
																	db.oUF.Target.ComboPoints.Multiplier = Multiplier
																	
																	r1 = db.oUF.Colors.ComboPoints.Combo1.r * Multiplier
																	g1 = db.oUF.Colors.ComboPoints.Combo1.g * Multiplier
																	b1 = db.oUF.Colors.ComboPoints.Combo1.b * Multiplier
																	
																	r2 = db.oUF.Colors.ComboPoints.Combo2.r * Multiplier
																	g2 = db.oUF.Colors.ComboPoints.Combo2.g * Multiplier
																	b2 = db.oUF.Colors.ComboPoints.Combo2.b * Multiplier
																	
																	r3 = db.oUF.Colors.ComboPoints.Combo3.r * Multiplier
																	g3 = db.oUF.Colors.ComboPoints.Combo3.g * Multiplier
																	b3 = db.oUF.Colors.ComboPoints.Combo3.b * Multiplier
																	
																	r4 = db.oUF.Colors.ComboPoints.Combo4.r * Multiplier
																	g4 = db.oUF.Colors.ComboPoints.Combo4.g * Multiplier
																	b4 = db.oUF.Colors.ComboPoints.Combo4.b * Multiplier
																	
																	r5 = db.oUF.Colors.ComboPoints.Combo5.r * Multiplier
																	g5 = db.oUF.Colors.ComboPoints.Combo5.g * Multiplier
																	b5 = db.oUF.Colors.ComboPoints.Combo5.b * Multiplier
																	
																	oUF_LUI_target.ComboPoints[1].bg:SetVertexColor(r1, g1, b1)
																	oUF_LUI_target.ComboPoints[2].bg:SetVertexColor(r2, g2, b2) 
																	oUF_LUI_target.ComboPoints[3].bg:SetVertexColor(r3, g3, b3) 
																	oUF_LUI_target.ComboPoints[4].bg:SetVertexColor(r4, g4, b4) 
																	oUF_LUI_target.ComboPoints[5].bg:SetVertexColor(r5, g5, b5)
																end,
															order = 7,
														},
														IndividualBackgroundColor = {
															name = "Individual Background Color",
															desc = "Wether you want to use an individual Background Color or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Target.ComboPoints.BackgroundColor.Enable end,
															set = function(self,IndividualBackgroundColor)
																		db.oUF.Target.ComboPoints.BackgroundColor.Enable = not db.oUF.Target.ComboPoints.BackgroundColor.Enable
																		if IndividualBackgroundColor == true then
																			r = db.oUF.Target.ComboPoints.BackgroundColor.r
																			g = db.oUF.Target.ComboPoints.BackgroundColor.g
																			b = db.oUF.Target.ComboPoints.BackgroundColor.b
																		
																			oUF_LUI_target.ComboPoints[1].bg:SetVertexColor(r, g, b)
																			oUF_LUI_target.ComboPoints[2].bg:SetVertexColor(r, g, b) 
																			oUF_LUI_target.ComboPoints[3].bg:SetVertexColor(r, g, b) 
																			oUF_LUI_target.ComboPoints[4].bg:SetVertexColor(r, g, b) 
																			oUF_LUI_target.ComboPoints[5].bg:SetVertexColor(r, g, b)
																		else
																			r1 = db.oUF.Colors.ComboPoints.Combo1.r * db.oUF.Player.ComboPoints.Multiplier
																			g1 = db.oUF.Colors.ComboPoints.Combo1.g * db.oUF.Player.ComboPoints.Multiplier
																			b1 = db.oUF.Colors.ComboPoints.Combo1.b * db.oUF.Player.ComboPoints.Multiplier
																			
																			r2 = db.oUF.Colors.ComboPoints.Combo2.r * db.oUF.Player.ComboPoints.Multiplier
																			g2 = db.oUF.Colors.ComboPoints.Combo2.g * db.oUF.Player.ComboPoints.Multiplier
																			b2 = db.oUF.Colors.ComboPoints.Combo2.b * db.oUF.Player.ComboPoints.Multiplier
																			
																			r3 = db.oUF.Colors.ComboPoints.Combo3.r * db.oUF.Player.ComboPoints.Multiplier
																			g3 = db.oUF.Colors.ComboPoints.Combo3.g * db.oUF.Player.ComboPoints.Multiplier
																			b3 = db.oUF.Colors.ComboPoints.Combo3.b * db.oUF.Player.ComboPoints.Multiplier
																			
																			r4 = db.oUF.Colors.ComboPoints.Combo4.r * db.oUF.Player.ComboPoints.Multiplier
																			g4 = db.oUF.Colors.ComboPoints.Combo4.g * db.oUF.Player.ComboPoints.Multiplier
																			b4 = db.oUF.Colors.ComboPoints.Combo4.b * db.oUF.Player.ComboPoints.Multiplier
																			
																			r5 = db.oUF.Colors.ComboPoints.Combo5.r * db.oUF.Player.ComboPoints.Multiplier
																			g5 = db.oUF.Colors.ComboPoints.Combo5.g * db.oUF.Player.ComboPoints.Multiplier
																			b5 = db.oUF.Colors.ComboPoints.Combo5.b * db.oUF.Player.ComboPoints.Multiplier
																			
																			oUF_LUI_target.ComboPoints[1].bg:SetVertexColor(r1, g1, b1)
																			oUF_LUI_target.ComboPoints[2].bg:SetVertexColor(r2, g2, b2) 
																			oUF_LUI_target.ComboPoints[3].bg:SetVertexColor(r3, g3, b3) 
																			oUF_LUI_target.ComboPoints[4].bg:SetVertexColor(r4, g4, b4) 
																			oUF_LUI_target.ComboPoints[5].bg:SetVertexColor(r5, g5, b5)
																		end
																	end,
															order = 8,
														},
														BackgroundColor = {
															name = "Individual Color",
															desc = "Choose an individual Background Color Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.ComboPoints.BackgroundColor.r, db.oUF.Target.ComboPoints.BackgroundColor.g, db.oUF.Target.ComboPoints.BackgroundColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.ComboPoints.BackgroundColor.r = r
																	db.oUF.Target.ComboPoints.BackgroundColor.g = g
																	db.oUF.Target.ComboPoints.BackgroundColor.b = b
																	
																	oUF_LUI_target.ComboPoints[1].bg:SetVertexColor(r, g, b)
																	oUF_LUI_target.ComboPoints[2].bg:SetVertexColor(r, g, b) 
																	oUF_LUI_target.ComboPoints[3].bg:SetVertexColor(r, g, b) 
																	oUF_LUI_target.ComboPoints[4].bg:SetVertexColor(r, g, b) 
																	oUF_LUI_target.ComboPoints[5].bg:SetVertexColor(r, g, b) 
																end,
															order = 9,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Target.Texts.Name.Enable = not db.oUF.Target.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_target.Info:Show()
																else
																	oUF_LUI_target.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target Name Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.Name.Size,
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.Name.Size = FontSize
																	oUF_LUI_target.Info:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Name.Font),db.oUF.Target.Texts.Name.Size,db.oUF.Target.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target Name!\n\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Font,
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.Name.Font = Font
																	oUF_LUI_target.Info:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Name.Font),db.oUF.Target.Texts.Name.Size,db.oUF.Target.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target Name.\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Outline,
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Info:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Name.Font),db.oUF.Target.Texts.Name.Size,db.oUF.Target.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Target Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Target.Texts.Name.X = NameX
																		oUF_LUI_target.Info:ClearAllPoints()
																		oUF_LUI_target.Info:SetPoint(db.oUF.Target.Texts.Name.Point, oUF_LUI_target, db.oUF.Target.Texts.Name.RelativePoint, tonumber(db.oUF.Target.Texts.Name.X), tonumber(db.oUF.Target.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Target Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Target.Texts.Name.Y = NameY
																		oUF_LUI_target.Info:ClearAllPoints()
																		oUF_LUI_target.Info:SetPoint(db.oUF.Target.Texts.Name.Point, oUF_LUI_target, db.oUF.Target.Texts.Name.RelativePoint, tonumber(db.oUF.Target.Texts.Name.X), tonumber(db.oUF.Target.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target Name.\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.Name.Point = positions[Point]
																	oUF_LUI_target.Info:ClearAllPoints()
																	oUF_LUI_target.Info:SetPoint(db.oUF.Target.Texts.Name.Point, oUF_LUI_target, db.oUF.Target.Texts.Name.RelativePoint, tonumber(db.oUF.Target.Texts.Name.X), tonumber(db.oUF.Target.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target Name.\nDefault: "..defaults.profile.oUF.Target.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Info:ClearAllPoints()
																	oUF_LUI_target.Info:SetPoint(db.oUF.Target.Texts.Name.Point, oUF_LUI_target, db.oUF.Target.Texts.Name.RelativePoint, tonumber(db.oUF.Target.Texts.Name.X), tonumber(db.oUF.Target.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Target Name.\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Format,
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Target.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Target.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Target Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Target.Texts.Name.Length,
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Target.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Target.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Target Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Target.Texts.Name.ColorNameByClass = not db.oUF.Target.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Target Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Target.Texts.Name.ColorClassByClass = not db.oUF.Target.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Target.Texts.Name.ColorLevelByDifficulty = not db.oUF.Target.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Target.Texts.Name.Enable end,
															get = function() return db.oUF.Target.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Target.Texts.Name.ShowClassification = not db.oUF.Target.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Target.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Target.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Target.Texts.Name.ShortClassification = not db.oUF.Target.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.Health.Enable = not db.oUF.Target.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_target.Health.value:Show()
															else
																oUF_LUI_target.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target Health Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.Health.Size,
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.Health.Size = FontSize
																	oUF_LUI_target.Health.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Health.Font),db.oUF.Target.Texts.Health.Size,db.oUF.Target.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Target Health.\nDefault: "..defaults.profile.oUF.Target.Texts.Health.Format,
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Target.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Target.Texts.Health.Format = valueFormat[Format]
																	print("Target Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target Health!\n\nDefault: "..defaults.profile.oUF.Target.Texts.Health.Font,
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.Health.Font = Font
																	oUF_LUI_target.Health.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Health.Font),db.oUF.Target.Texts.Health.Size,db.oUF.Target.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target Health.\nDefault: "..defaults.profile.oUF.Target.Texts.Health.Outline,
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Health.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Health.Font),db.oUF.Target.Texts.Health.Size,db.oUF.Target.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Target Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															get = function() return db.oUF.Target.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Target.Texts.Health.X = HealthX
																		oUF_LUI_target.Health.value:ClearAllPoints()
																		oUF_LUI_target.Health.value:SetPoint(db.oUF.Target.Texts.Health.Point, oUF_LUI_target, db.oUF.Target.Texts.Health.RelativePoint, tonumber(db.oUF.Target.Texts.Health.X), tonumber(db.oUF.Target.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Target Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															get = function() return db.oUF.Target.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Target.Texts.Health.Y = HealthY
																		oUF_LUI_target.Health.value:ClearAllPoints()
																		oUF_LUI_target.Health.value:SetPoint(db.oUF.Target.Texts.Health.Point, oUF_LUI_target, db.oUF.Target.Texts.Health.RelativePoint, tonumber(db.oUF.Target.Texts.Health.X), tonumber(db.oUF.Target.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target Health.\nDefault: "..defaults.profile.oUF.Target.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.Health.Point = positions[Point]
																	oUF_LUI_target.Health.value:ClearAllPoints()
																	oUF_LUI_target.Health.value:SetPoint(db.oUF.Target.Texts.Health.Point, oUF_LUI_target, db.oUF.Target.Texts.Health.RelativePoint, tonumber(db.oUF.Target.Texts.Health.X), tonumber(db.oUF.Target.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target Health.\nDefault: "..defaults.profile.oUF.Target.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Health.value:ClearAllPoints()
																	oUF_LUI_target.Health.value:SetPoint(db.oUF.Target.Texts.Health.Point, oUF_LUI_target, db.oUF.Target.Texts.Health.RelativePoint, tonumber(db.oUF.Target.Texts.Health.X), tonumber(db.oUF.Target.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.Health.ColorClass = not db.oUF.Target.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.Health.ColorGradient = false
																			db.oUF.Target.Texts.Health.IndividualColor.Enable = false
																			
																			print("Target Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Target.Texts.Health.ColorGradient = not db.oUF.Target.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Target.Texts.Health.ColorClass = false
																			db.oUF.Target.Texts.Health.IndividualColor.Enable = false
																			
																			print("Target Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.Health.IndividualColor.Enable = not db.oUF.Target.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.Health.ColorClass = false
																			db.oUF.Target.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_target.Health.value:SetTextColor(tonumber(db.oUF.Target.Texts.Health.IndividualColor.r),tonumber(db.oUF.Target.Texts.Health.IndividualColor.g),tonumber(db.oUF.Target.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.Health.IndividualColor.r, db.oUF.Target.Texts.Health.IndividualColor.g, db.oUF.Target.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.Health.IndividualColor.r = r
																	db.oUF.Target.Texts.Health.IndividualColor.g = g
																	db.oUF.Target.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_target.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Target.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Target.Texts.Health.ShowDead = not db.oUF.Target.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.Power.Enable = not db.oUF.Target.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_target.Power.value:Show()
															else
																oUF_LUI_target.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target Power Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.Power.Size,
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.Power.Size = FontSize
																	oUF_LUI_target.Power.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Power.Font),db.oUF.Target.Texts.Power.Size,db.oUF.Target.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Target Power.\nDefault: "..defaults.profile.oUF.Target.Texts.Power.Format,
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Target.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Target.Texts.Power.Format = valueFormat[Format]
																	print("Target Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target Power!\n\nDefault: "..defaults.profile.oUF.Target.Texts.Power.Font,
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.Power.Font = Font
																	oUF_LUI_target.Power.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Power.Font),db.oUF.Target.Texts.Power.Size,db.oUF.Target.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target Power.\nDefault: "..defaults.profile.oUF.Target.Texts.Power.Outline,
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Power.value:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.Power.Font),db.oUF.Target.Texts.Power.Size,db.oUF.Target.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Target Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															get = function() return db.oUF.Target.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Target.Texts.Power.X = PowerX
																		oUF_LUI_target.Power.value:ClearAllPoints()
																		oUF_LUI_target.Power.value:SetPoint(db.oUF.Target.Texts.Power.Point, oUF_LUI_target, db.oUF.Target.Texts.Power.RelativePoint, tonumber(db.oUF.Target.Texts.Power.X), tonumber(db.oUF.Target.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Target Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															get = function() return db.oUF.Target.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Target.Texts.Power.Y = PowerY
																		oUF_LUI_target.Power.value:ClearAllPoints()
																		oUF_LUI_target.Power.value:SetPoint(db.oUF.Target.Texts.Power.Point, oUF_LUI_target, db.oUF.Target.Texts.Power.RelativePoint, tonumber(db.oUF.Target.Texts.Power.X), tonumber(db.oUF.Target.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target Power.\nDefault: "..defaults.profile.oUF.Target.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.Power.Point = positions[Point]
																	oUF_LUI_target.Power.value:ClearAllPoints()
																	oUF_LUI_target.Power.value:SetPoint(db.oUF.Target.Texts.Power.Point, oUF_LUI_target, db.oUF.Target.Texts.Power.RelativePoint, tonumber(db.oUF.Target.Texts.Power.X), tonumber(db.oUF.Target.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target Power.\nDefault: "..defaults.profile.oUF.Target.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Power.value:ClearAllPoints()
																	oUF_LUI_target.Power.value:SetPoint(db.oUF.Target.Texts.Power.Point, oUF_LUI_target, db.oUF.Target.Texts.Power.RelativePoint, tonumber(db.oUF.Target.Texts.Power.X), tonumber(db.oUF.Target.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.Power.ColorClass = not db.oUF.Target.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.Power.ColorType = false
																			db.oUF.Target.Texts.Power.IndividualColor.Enable = false
																			
																			print("Target Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Target.Texts.Power.ColorType = not db.oUF.Target.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Target.Texts.Power.ColorClass = false
																			db.oUF.Target.Texts.Power.IndividualColor.Enable = false
																			
																			print("Target Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.Power.IndividualColor.Enable = not db.oUF.Target.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.Power.ColorClass = false
																			db.oUF.Target.Texts.Power.ColorType = false
																			
																			oUF_LUI_target.Power.value:SetTextColor(tonumber(db.oUF.Target.Texts.Power.IndividualColor.r),tonumber(db.oUF.Target.Texts.Power.IndividualColor.g),tonumber(db.oUF.Target.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.Power.IndividualColor.r, db.oUF.Target.Texts.Power.IndividualColor.g, db.oUF.Target.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.Power.IndividualColor.r = r
																	db.oUF.Target.Texts.Power.IndividualColor.g = g
																	db.oUF.Target.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_target.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.HealthPercent.Enable = not db.oUF.Target.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_target.Health.valuePercent:Show()
															else
																oUF_LUI_target.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_target.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthPercent.Font),db.oUF.Target.Texts.HealthPercent.Size,db.oUF.Target.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Target HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Target.Texts.HealthPercent.ShowAlways = not db.oUF.Target.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target HealthPercent!\n\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.HealthPercent.Font = Font
																	oUF_LUI_target.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthPercent.Font),db.oUF.Target.Texts.HealthPercent.Size,db.oUF.Target.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target HealthPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthPercent.Font),db.oUF.Target.Texts.HealthPercent.Size,db.oUF.Target.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Target HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Target.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Target.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_target.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_target.Health.valuePercent:SetPoint(db.oUF.Target.Texts.HealthPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Target.Texts.HealthPercent.X), tonumber(db.oUF.Target.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Target HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Target.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Target.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_target.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_target.Health.valuePercent:SetPoint(db.oUF.Target.Texts.HealthPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Target.Texts.HealthPercent.X), tonumber(db.oUF.Target.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target HealthPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_target.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_target.Health.valuePercent:SetPoint(db.oUF.Target.Texts.HealthPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Target.Texts.HealthPercent.X), tonumber(db.oUF.Target.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target HealthPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_target.Health.valuePercent:SetPoint(db.oUF.Target.Texts.HealthPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Target.Texts.HealthPercent.X), tonumber(db.oUF.Target.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.HealthPercent.ColorClass = not db.oUF.Target.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Target HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Target.Texts.HealthPercent.ColorGradient = not db.oUF.Target.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Target.Texts.HealthPercent.ColorClass = false
																			db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Target HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.HealthPercent.ColorClass = false
																			db.oUF.Target.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_target.Health.valuePercent:SetTextColor(tonumber(db.oUF.Target.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Target.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Target.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.HealthPercent.IndividualColor.r, db.oUF.Target.Texts.HealthPercent.IndividualColor.g, db.oUF.Target.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Target.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Target.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_target.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Target.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Target.Texts.HealthPercent.ShowDead = not db.oUF.Target.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.PowerPercent.Enable = not db.oUF.Target.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_target.Power.valuePercent:Show()
															else
																oUF_LUI_target.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_target.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerPercent.Font),db.oUF.Target.Texts.PowerPercent.Size,db.oUF.Target.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Target PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Target.Texts.PowerPercent.ShowAlways = not db.oUF.Target.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target PowerPercent!\n\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.PowerPercent.Font = Font
																	oUF_LUI_target.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerPercent.Font),db.oUF.Target.Texts.PowerPercent.Size,db.oUF.Target.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target PowerPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerPercent.Font),db.oUF.Target.Texts.PowerPercent.Size,db.oUF.Target.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Target PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Target.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Target.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_target.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_target.Power.valuePercent:SetPoint(db.oUF.Target.Texts.PowerPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Target.Texts.PowerPercent.X), tonumber(db.oUF.Target.Texts.PowerPercent.Y))
																	end,
															order = 5,
														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Target PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Target.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Target.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_target.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_target.Power.valuePercent:SetPoint(db.oUF.Target.Texts.PowerPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Target.Texts.PowerPercent.X), tonumber(db.oUF.Target.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target PowerPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_target.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_target.Power.valuePercent:SetPoint(db.oUF.Target.Texts.PowerPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Target.Texts.PowerPercent.X), tonumber(db.oUF.Target.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target PowerPercent.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_target.Power.valuePercent:SetPoint(db.oUF.Target.Texts.PowerPercent.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Target.Texts.PowerPercent.X), tonumber(db.oUF.Target.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.PowerPercent.ColorClass = not db.oUF.Target.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.PowerPercent.ColorType = false
																			db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Target PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Target.Texts.PowerPercent.ColorType = not db.oUF.Target.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Target.Texts.PowerPercent.ColorClass = false
																			db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Target PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.PowerPercent.ColorClass = false
																			db.oUF.Target.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_target.Power.valuePercent:SetTextColor(tonumber(db.oUF.Target.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Target.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Target.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.PowerPercent.IndividualColor.r, db.oUF.Target.Texts.PowerPercent.IndividualColor.g, db.oUF.Target.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Target.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Target.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_target.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target HealthMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.HealthMissing.Enable = not db.oUF.Target.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_target.Health.valueMissing:Show()
															else
																oUF_LUI_target.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_target.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthMissing.Font),db.oUF.Target.Texts.HealthMissing.Size,db.oUF.Target.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Target HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Target.Texts.HealthMissing.ShowAlways = not db.oUF.Target.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Target.Texts.HealthMissing.ShortValue = not db.oUF.Target.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target HealthMissing!\n\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.HealthMissing.Font = Font
																	oUF_LUI_target.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthMissing.Font),db.oUF.Target.Texts.HealthMissing.Size,db.oUF.Target.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target HealthMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.HealthMissing.Font),db.oUF.Target.Texts.HealthMissing.Size,db.oUF.Target.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Target HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Target.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Target.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_target.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_target.Health.valueMissing:SetPoint(db.oUF.Target.Texts.HealthMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Target.Texts.HealthMissing.X), tonumber(db.oUF.Target.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Target HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Target.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Target.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_target.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_target.Health.valueMissing:SetPoint(db.oUF.Target.Texts.HealthMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Target.Texts.HealthMissing.X), tonumber(db.oUF.Target.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target HealthMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_target.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_target.Health.valueMissing:SetPoint(db.oUF.Target.Texts.HealthMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Target.Texts.HealthMissing.X), tonumber(db.oUF.Target.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target HealthMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_target.Health.valueMissing:SetPoint(db.oUF.Target.Texts.HealthMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Target.Texts.HealthMissing.X), tonumber(db.oUF.Target.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.HealthMissing.ColorClass = not db.oUF.Target.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Target HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Target.Texts.HealthMissing.ColorGradient = not db.oUF.Target.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Target.Texts.HealthMissing.ColorClass = false
																			db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Target HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.HealthMissing.ColorClass = false
																			db.oUF.Target.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_target.Health.valueMissing:SetTextColor(tonumber(db.oUF.Target.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Target.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Target.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.HealthMissing.IndividualColor.r, db.oUF.Target.Texts.HealthMissing.IndividualColor.g, db.oUF.Target.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Target.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Target.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_target.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Target PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Target.Texts.PowerMissing.Enable = not db.oUF.Target.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_target.Power.valueMissing:Show()
															else
																oUF_LUI_target.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Target PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Target.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Target.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Target.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_target.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerMissing.Font),db.oUF.Target.Texts.PowerMissing.Size,db.oUF.Target.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Target PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Target.Texts.PowerMissing.ShowAlways = not db.oUF.Target.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Target.Texts.PowerMissing.ShortValue = not db.oUF.Target.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Target PowerMissing!\n\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Target.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Target.Texts.PowerMissing.Font = Font
																	oUF_LUI_target.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerMissing.Font),db.oUF.Target.Texts.PowerMissing.Size,db.oUF.Target.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Target PowerMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Target.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Target.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_target.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Target.Texts.PowerMissing.Font),db.oUF.Target.Texts.PowerMissing.Size,db.oUF.Target.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Target PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Target.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Target.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_target.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_target.Power.valueMissing:SetPoint(db.oUF.Target.Texts.PowerMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Target.Texts.PowerMissing.X), tonumber(db.oUF.Target.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Target PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Target.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Target.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_target.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_target.Power.valueMissing:SetPoint(db.oUF.Target.Texts.PowerMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Target.Texts.PowerMissing.X), tonumber(db.oUF.Target.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Target PowerMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Target.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_target.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_target.Power.valueMissing:SetPoint(db.oUF.Target.Texts.PowerMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Target.Texts.PowerMissing.X), tonumber(db.oUF.Target.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Target PowerMissing.\nDefault: "..defaults.profile.oUF.Target.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Target.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Target.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_target.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_target.Power.valueMissing:SetPoint(db.oUF.Target.Texts.PowerMissing.Point, oUF_LUI_target, db.oUF.Target.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Target.Texts.PowerMissing.X), tonumber(db.oUF.Target.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Target.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Target.Texts.PowerMissing.ColorClass = not db.oUF.Target.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Target.Texts.PowerMissing.ColorType = false
																			db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Target PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Target.Texts.PowerMissing.ColorType = not db.oUF.Target.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Target.Texts.PowerMissing.ColorClass = false
																			db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Target PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Target PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Target.Texts.PowerMissing.ColorClass = false
																			db.oUF.Target.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_target.Power.valueMissing:SetTextColor(tonumber(db.oUF.Target.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Target.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Target.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Target PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Target.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Target.Texts.PowerMissing.IndividualColor.r, db.oUF.Target.Texts.PowerMissing.IndividualColor.g, db.oUF.Target.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Target.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Target.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Target.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_target.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Target.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Target.Portrait.Enable = not db.oUF.Target.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Target.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Target.Portrait.Enable end,
											get = function() return db.oUF.Target.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Target.Portrait.Width = PortraitWidth
														oUF_LUI_target.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Target.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Target.Portrait.Enable end,
											get = function() return db.oUF.Target.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Target.Portrait.Height = PortraitHeight
														oUF_LUI_target.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Target.Portrait.Enable end,
											get = function() return db.oUF.Target.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Target.Portrait.X = PortraitX
														oUF_LUI_target.Portrait:SetPoint("TOPLEFT", oUF_LUI_target.Health, "TOPLEFT", PortraitX, db.oUF.Target.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Target.Portrait.Enable end,
											get = function() return db.oUF.Target.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Target.Portrait.Y = PortraitY
														oUF_LUI_target.Portrait:SetPoint("TOPLEFT", oUF_LUI_target.Health, "TOPLEFT", db.oUF.Target.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.Target.Icons.Lootmaster.Enable = not db.oUF.Target.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Target.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.Target.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_target.MasterLooter:ClearAllPoints()
																oUF_LUI_target.MasterLooter:SetPoint(db.oUF.Target.Icons.Lootmaster.Point, oUF_LUI_target, db.oUF.Target.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.Target.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Target.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.Target.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_target.MasterLooter:ClearAllPoints()
																oUF_LUI_target.MasterLooter:SetPoint(db.oUF.Target.Icons.Lootmaster.Point, oUF_LUI_target, db.oUF.Target.Icons.Lootmaster, tonumber(db.oUF.Target.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.Target.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_target.MasterLooter:ClearAllPoints()
															oUF_LUI_target.MasterLooter:SetPoint(db.oUF.Target.Icons.Lootmaster.Point, oUF_LUI_target, db.oUF.Target.Icons.Lootmaster.Point, tonumber(db.oUF.Target.Icons.Lootmaster.X), tonumber(db.oUF.Target.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Target.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.Target.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_target.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_target.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.MasterLooter:IsShown() then oUF_LUI_target.MasterLooter:Hide() else oUF_LUI_target.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.Target.Icons.Leader.Enable = not db.oUF.Target.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Leader.Enable end,
													get = function() return db.oUF.Target.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.Target.Icons.Leader.X = LeaderX
																oUF_LUI_target.Leader:ClearAllPoints()
																oUF_LUI_target.Leader:SetPoint(db.oUF.Target.Icons.Leader.Point, oUF_LUI_target, db.oUF.Target.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.Target.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Leader.Enable end,
													get = function() return db.oUF.Target.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.Target.Icons.Leader.Y = LeaderY
																oUF_LUI_target.Leader:ClearAllPoints()
																oUF_LUI_target.Leader:SetPoint(db.oUF.Target.Icons.Leader.Point, oUF_LUI_target, db.oUF.Target.Icons.Leader.Point, tonumber(db.oUF.Target.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.Target.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_target.Leader:ClearAllPoints()
															oUF_LUI_target.Leader:SetPoint(db.oUF.Target.Icons.Leader.Point, oUF_LUI_target, db.oUF.Target.Icons.Leader.Point, tonumber(db.oUF.Target.Icons.Leader.X), tonumber(db.oUF.Target.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.Leader.Enable end,
													get = function() return db.oUF.Target.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.Target.Icons.Leader.Size = LeaderSize
															oUF_LUI_target.Leader:SetHeight(LeaderSize)
															oUF_LUI_target.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.Leader:IsShown() then oUF_LUI_target.Leader:Hide() else oUF_LUI_target.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.Target.Icons.Role.Enable = not db.oUF.Target.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Role.Enable end,
													get = function() return db.oUF.Target.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.Target.Icons.Role.X = RoleX
																oUF_LUI_target.LFDRole:ClearAllPoints()
																oUF_LUI_target.LFDRole:SetPoint(db.oUF.Target.Icons.Role.Point, oUF_LUI_target, db.oUF.Target.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.Target.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Role.Enable end,
													get = function() return db.oUF.Target.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.Target.Icons.Role.Y = RoleY
																oUF_LUI_target.LFDRole:ClearAllPoints()
																oUF_LUI_target.LFDRole:SetPoint(db.oUF.Target.Icons.Role.Point, oUF_LUI_target, db.oUF.Target.Icons.Role.Point, tonumber(db.oUF.Target.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.Target.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_target.LFDRole:ClearAllPoints()
															oUF_LUI_target.LFDRole:SetPoint(db.oUF.Target.Icons.Role.Point, oUF_LUI_target, db.oUF.Target.Icons.Role.Point, tonumber(db.oUF.Target.Icons.Role.X), tonumber(db.oUF.Target.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.Role.Enable end,
													get = function() return db.oUF.Target.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.Target.Icons.Role.Size = RoleSize
															oUF_LUI_target.LFDRole:SetHeight(RoleSize)
															oUF_LUI_target.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.LFDRole:IsShown() then oUF_LUI_target.LFDRole:Hide() else oUF_LUI_target.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Target.Icons.Raid.Enable = not db.oUF.Target.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Raid.Enable end,
													get = function() return db.oUF.Target.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.Target.Icons.Raid.X = RaidX
																oUF_LUI_target.RaidIcon:ClearAllPoints()
																oUF_LUI_target.RaidIcon:SetPoint(db.oUF.Target.Icons.Raid.Point, oUF_LUI_target, db.oUF.Target.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Target.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Raid.Enable end,
													get = function() return db.oUF.Target.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Target.Icons.Raid.Y = RaidY
																oUF_LUI_target.RaidIcon:ClearAllPoints()
																oUF_LUI_target.RaidIcon:SetPoint(db.oUF.Target.Icons.Raid.Point, oUF_LUI_target, db.oUF.Target.Icons.Raid.Point, tonumber(db.oUF.Target.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Target.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_target.RaidIcon:ClearAllPoints()
															oUF_LUI_target.RaidIcon:SetPoint(db.oUF.Target.Icons.Raid.Point, oUF_LUI_target, db.oUF.Target.Icons.Raid.Point, tonumber(db.oUF.Target.Icons.Raid.X), tonumber(db.oUF.Target.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Target.Icons.Raid.Enable end,
													get = function() return db.oUF.Target.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Target.Icons.Raid.Size = RaidSize
															oUF_LUI_target.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_target.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_target.RaidIcon:IsShown() then oUF_LUI_target.RaidIcon:Hide() else oUF_LUI_target.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.Target.Icons.Resting.Enable = not db.oUF.Target.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Resting.Enable end,
													get = function() return db.oUF.Target.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.Target.Icons.Resting.X = RestingX
																oUF_LUI_target.Resting:ClearAllPoints()
																oUF_LUI_target.Resting:SetPoint(db.oUF.Target.Icons.Resting.Point, oUF_LUI_target, db.oUF.Target.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.Target.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Resting.Enable end,
													get = function() return db.oUF.Target.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.Target.Icons.Resting.Y = RestingY
																oUF_LUI_target.Resting:ClearAllPoints()
																oUF_LUI_target.Resting:SetPoint(db.oUF.Target.Icons.Resting.Point, oUF_LUI_target, db.oUF.Target.Icons.Resting.Point, tonumber(db.oUF.Target.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.Target.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_target.Resting:ClearAllPoints()
															oUF_LUI_target.Resting:SetPoint(db.oUF.Target.Icons.Resting.Point, oUF_LUI_target, db.oUF.Target.Icons.Resting.Point, tonumber(db.oUF.Target.Icons.Resting.X), tonumber(db.oUF.Target.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.Resting.Enable end,
													get = function() return db.oUF.Target.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.Target.Icons.Resting.Size = RestingSize
															oUF_LUI_target.Resting:SetHeight(RestingSize)
															oUF_LUI_target.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.Resting:IsShown() then oUF_LUI_target.Resting:Hide() else oUF_LUI_target.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.Target.Icons.Combat.Enable = not db.oUF.Target.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Combat.Enable end,
													get = function() return db.oUF.Target.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.Target.Icons.Combat.X = CombatX
																oUF_LUI_target.Combat:ClearAllPoints()
																oUF_LUI_target.Combat:SetPoint(db.oUF.Target.Icons.Combat.Point, oUF_LUI_target, db.oUF.Target.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.Target.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.Combat.Enable end,
													get = function() return db.oUF.Target.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.Target.Icons.Combat.Y = CombatY
																oUF_LUI_target.Combat:ClearAllPoints()
																oUF_LUI_target.Combat:SetPoint(db.oUF.Target.Icons.Combat.Point, oUF_LUI_target, db.oUF.Target.Icons.Combat.Point, tonumber(db.oUF.Target.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.Target.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_target.Combat:ClearAllPoints()
															oUF_LUI_target.Combat:SetPoint(db.oUF.Target.Icons.Combat.Point, oUF_LUI_target, db.oUF.Target.Icons.Combat.Point, tonumber(db.oUF.Target.Icons.Combat.X), tonumber(db.oUF.Target.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.Combat.Enable end,
													get = function() return db.oUF.Target.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.Target.Icons.Combat.Size = CombatSize
															oUF_LUI_target.Combat:SetHeight(CombatSize)
															oUF_LUI_target.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.Target.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.Combat:IsShown() then oUF_LUI_target.Combat:Hide() else oUF_LUI_target.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Target.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.Target.Icons.PvP.Enable = not db.oUF.Target.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Target.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.PvP.Enable end,
													get = function() return db.oUF.Target.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.Target.Icons.PvP.X = PvPX
																oUF_LUI_target.PvP:ClearAllPoints()
																oUF_LUI_target.PvP:SetPoint(db.oUF.Target.Icons.PvP.Point, oUF_LUI_target, db.oUF.Target.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.Target.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Target.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.Target.Icons.PvP.Enable end,
													get = function() return db.oUF.Target.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.Target.Icons.PvP.Y = PvPY
																oUF_LUI_target.PvP:ClearAllPoints()
																oUF_LUI_target.PvP:SetPoint(db.oUF.Target.Icons.PvP.Point, oUF_LUI_target, db.oUF.Target.Icons.PvP.Point, tonumber(db.oUF.Target.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.Target.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Target.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.Target.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_target.PvP:ClearAllPoints()
															oUF_LUI_target.PvP:SetPoint(db.oUF.Target.Icons.PvP.Point, oUF_LUI_target, db.oUF.Target.Icons.PvP.Point, tonumber(db.oUF.Target.Icons.PvP.X), tonumber(db.oUF.Target.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.Target.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Target.Icons.PvP.Enable end,
													get = function() return db.oUF.Target.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.Target.Icons.PvP.Size = PvPSize
															oUF_LUI_target.PvP:SetHeight(PvPSize)
															oUF_LUI_target.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Target.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_target.PvP:IsShown() then oUF_LUI_target.PvP:Hide() else oUF_LUI_target.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						ToT = {
							name = "ToT",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 6,
							childGroups = "tab",
							args = {
								header1 = {
									name = "ToT",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a ToT Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Enable end,
													set = function(self,Enable)
																db.oUF.ToT.Enable = not db.oUF.ToT.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.ToT.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												ToTX = {
													name = "X Value",
													desc = "X Value for your ToT Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.X,
													type = "input",
													get = function() return db.oUF.ToT.X end,
													set = function(self,ToTX)
																if ToTX == nil or ToTX == "" then
																	ToTX = "0"
																end
																db.oUF.ToT.X = ToTX
																oUF_LUI_targettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(ToTX), tonumber(db.oUF.ToT.Y))
															end,
													order = 2,
												},
												ToTY = {
													name = "Y Value",
													desc = "Y Value for your ToT Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Y,
													type = "input",
													get = function() return db.oUF.ToT.Y end,
													set = function(self,ToTY)
																if ToTY == nil or ToTY == "" then
																	ToTY = "0"
																end
																db.oUF.ToT.Y = ToTY
																oUF_LUI_targettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.ToT.X), tonumber(ToTY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											disabled = function() return not db.oUF.ToT.Enable end,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												ToTHeight = {
													name = "Height",
													desc = "Decide the Height of your ToT Frame.\n\nDefault: "..defaults.profile.oUF.ToT.Height,
													type = "input",
													get = function() return db.oUF.ToT.Height end,
													set = function(self,ToTHeight)
																if ToTHeight == nil or ToTHeight == "" then
																	ToTHeight = "0"
																end
																db.oUF.ToT.Height = ToTHeight
																oUF_LUI_targettarget:SetHeight(tonumber(ToTHeight))
															end,
													order = 2,
												},
												ToTWidth = {
													name = "Width",
													desc = "Decide the Width of your ToT Frame.\n\nDefault: "..defaults.profile.oUF.ToT.Width,
													type = "input",
													get = function() return db.oUF.ToT.Width end,
													set = function(self,ToTWidth)
																if ToTWidth == nil or ToTWidth == "" then
																	ToTWidth = "0"
																end
																db.oUF.ToT.Width = ToTWidth
																oUF_LUI_targettarget:SetWidth(tonumber(ToTWidth))
																
																if db.oUF.auras.tot.buffs_enable == true then
																	oUF_LUI_targettarget.Buffs:SetWidth(tonumber(ToTWidth))
																end
																
																if db.oUF.auras.tot.debuffs_enable == true then
																	oUF_LUI_targettarget.Debuffs:SetWidth(tonumber(ToTWidth))
																end
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.ToT.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.ToT.Backdrop.Color.r, db.oUF.ToT.Backdrop.Color.g, db.oUF.ToT.Backdrop.Color.b, db.oUF.ToT.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.ToT.Backdrop.Color.r = r
															db.oUF.ToT.Backdrop.Color.g = g
															db.oUF.ToT.Backdrop.Color.b = b
															db.oUF.ToT.Backdrop.Color.a = a

															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.ToT.Border.Color.r, db.oUF.ToT.Border.Color.g, db.oUF.ToT.Border.Color.b, db.oUF.ToT.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.ToT.Border.Color.r = r
															db.oUF.ToT.Border.Color.g = g
															db.oUF.ToT.Border.Color.b = b
															db.oUF.ToT.Border.Color.a = a
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.ToT.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.ToT.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.ToT.Backdrop.Texture = BackdropTexture
															oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.ToT.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.ToT.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.ToT.Border.EdgeFile = BorderTexture
															oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.ToT.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.ToT.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.ToT.Border.EdgeSize = BorderSize
															oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.ToT.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.ToT.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_targettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettarget, "TOPLEFT", tonumber(db.oUF.ToT.Backdrop.Padding.Left), tonumber(db.oUF.ToT.Backdrop.Padding.Top))
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToT.Backdrop.Padding.Right), tonumber(db.oUF.ToT.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.ToT.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.ToT.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_targettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettarget, "TOPLEFT", tonumber(db.oUF.ToT.Backdrop.Padding.Left), tonumber(db.oUF.ToT.Backdrop.Padding.Top))
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToT.Backdrop.Padding.Right), tonumber(db.oUF.ToT.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.ToT.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.ToT.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_targettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettarget, "TOPLEFT", tonumber(db.oUF.ToT.Backdrop.Padding.Left), tonumber(db.oUF.ToT.Backdrop.Padding.Top))
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToT.Backdrop.Padding.Right), tonumber(db.oUF.ToT.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.ToT.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.ToT.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_targettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettarget, "TOPLEFT", tonumber(db.oUF.ToT.Backdrop.Padding.Left), tonumber(db.oUF.ToT.Backdrop.Padding.Top))
														oUF_LUI_targettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToT.Backdrop.Padding.Right), tonumber(db.oUF.ToT.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.ToT.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.ToT.Border.Insets.Left = InsetLeft
														oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.ToT.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.ToT.Border.Insets.Right = InsetRight
														oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.ToT.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.ToT.Border.Insets.Top = InsetTop
														oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.ToT.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToT.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.ToT.Border.Insets.Bottom = InsetBottom
														oUF_LUI_targettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToT.Border.Insets.Left), right = tonumber(db.oUF.ToT.Border.Insets.Right), top = tonumber(db.oUF.ToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToT.Backdrop.Color.r), tonumber(db.oUF.ToT.Backdrop.Color.g), tonumber(db.oUF.ToT.Backdrop.Color.b), tonumber(db.oUF.ToT.Backdrop.Color.a))
															oUF_LUI_targettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToT.Border.Color.r), tonumber(db.oUF.ToT.Border.Color.g), tonumber(db.oUF.ToT.Border.Color.b), tonumber(db.oUF.ToT.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											order = 4,
											disabled = function() return not db.oUF.ToT.Enable end,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.ToT.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your ToT Health.\n\nDefault: "..defaults.profile.oUF.ToT.Health.Height,
															type = "input",
															get = function() return db.oUF.ToT.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToT.Health.Height = Height
																		oUF_LUI_targettarget.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Health.Padding,
															type = "input",
															get = function() return db.oUF.ToT.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.ToT.Health.Padding = Padding
																		oUF_LUI_targettarget.Health:ClearAllPoints()
																		oUF_LUI_targettarget.Health:SetPoint("TOPLEFT", oUF_LUI_targettarget, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_targettarget.Health:SetPoint("TOPRIGHT", oUF_LUI_targettarget, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToT.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.ToT.Health.Smooth = not db.oUF.ToT.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.ToT.Health.ColorClass = not db.oUF.ToT.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.ToT.Health.ColorGradient = false
																			db.oUF.ToT.Health.IndividualColor.Enable = false
																			
																			print("ToT Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.ToT.Health.ColorGradient = not db.oUF.ToT.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.ToT.Health.ColorClass = false
																			db.oUF.ToT.Health.IndividualColor.Enable = false
																			
																			print("ToT Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.ToT.Health.IndividualColor.Enable = not db.oUF.ToT.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.ToT.Health.ColorClass = false
																			db.oUF.ToT.Health.ColorGradient = false
																			
																			oUF_LUI_targettarget.Health:SetStatusBarColor(db.oUF.ToT.Health.IndividualColor.r, db.oUF.ToT.Health.IndividualColor.g, db.oUF.ToT.Health.IndividualColor.b)
																			oUF_LUI_targettarget.Health.bg:SetVertexColor(db.oUF.ToT.Health.IndividualColor.r*tonumber(db.oUF.ToT.Health.BGMultiplier), db.oUF.ToT.Health.IndividualColor.g*tonumber(db.oUF.ToT.Health.BGMultiplier), db.oUF.ToT.Health.IndividualColor.b*tonumber(db.oUF.ToT.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Health.IndividualColor.r, db.oUF.ToT.Health.IndividualColor.g, db.oUF.ToT.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Health.IndividualColor.r = r
																	db.oUF.ToT.Health.IndividualColor.g = g
																	db.oUF.ToT.Health.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_targettarget.Health.bg:SetVertexColor(r*tonumber(db.oUF.ToT.Health.BGMultiplier), g*tonumber(db.oUF.ToT.Health.BGMultiplier), b*tonumber(db.oUF.ToT.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.ToT.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToT.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.ToT.Health.Texture = HealthTex
																	oUF_LUI_targettarget.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.ToT.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToT.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.ToT.Health.TextureBG = HealthTexBG
																	oUF_LUI_targettarget.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.ToT.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToT.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.ToT.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_targettarget.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.ToT.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToT.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.ToT.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_targettarget.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.ToT.Power.Enable = not db.oUF.ToT.Power.Enable
																if EnablePower == true then
																	oUF_LUI_targettarget.Power:Show()
																else
																	oUF_LUI_targettarget.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your ToT Power.\n\nDefault: "..defaults.profile.oUF.ToT.Power.Height,
															type = "input",
															get = function() return db.oUF.ToT.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToT.Power.Height = Height
																		oUF_LUI_targettarget.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Power.Padding,
															type = "input",
															get = function() return db.oUF.ToT.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.ToT.Power.Padding = Padding
																		oUF_LUI_targettarget.Power:ClearAllPoints()
																		oUF_LUI_targettarget.Power:SetPoint("TOPLEFT", oUF_LUI_targettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_targettarget.Power:SetPoint("TOPRIGHT", oUF_LUI_targettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToT.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.ToT.Power.Smooth = not db.oUF.ToT.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.ToT.Power.ColorClass = not db.oUF.ToT.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.ToT.Power.ColorType = false
																			db.oUF.ToT.Power.IndividualColor.Enable = false
																			
																			print("ToT Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.ToT.Power.ColorType = not db.oUF.ToT.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.ToT.Power.ColorClass = false
																			db.oUF.ToT.Power.IndividualColor.Enable = false
																			
																			print("ToT Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.ToT.Power.IndividualColor.Enable = not db.oUF.ToT.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.ToT.Power.ColorType = false
																			db.oUF.ToT.Power.ColorClass = false
																			
																			oUF_LUI_targettarget.Power:SetStatusBarColor(db.oUF.ToT.Power.IndividualColor.r, db.oUF.ToT.Power.IndividualColor.g, db.oUF.ToT.Power.IndividualColor.b)
																			oUF_LUI_targettarget.Power.bg:SetVertexColor(db.oUF.ToT.Power.IndividualColor.r*tonumber(db.oUF.ToT.Power.BGMultiplier), db.oUF.ToT.Power.IndividualColor.g*tonumber(db.oUF.ToT.Power.BGMultiplier), db.oUF.ToT.Power.IndividualColor.b*tonumber(db.oUF.ToT.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Power.IndividualColor.r, db.oUF.ToT.Power.IndividualColor.g, db.oUF.ToT.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Power.IndividualColor.r = r
																	db.oUF.ToT.Power.IndividualColor.g = g
																	db.oUF.ToT.Power.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_targettarget.Power.bg:SetVertexColor(r*tonumber(db.oUF.ToT.Power.BGMultiplier), g*tonumber(db.oUF.ToT.Power.BGMultiplier), b*tonumber(db.oUF.ToT.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.ToT.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToT.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.ToT.Power.Texture = PowerTex
																	oUF_LUI_targettarget.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.ToT.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToT.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.ToT.Power.TextureBG = PowerTexBG
																	oUF_LUI_targettarget.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.ToT.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToT.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.ToT.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_targettarget.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.ToT.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToT.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.ToT.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_targettarget.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.ToT.Full.Enable = not db.oUF.ToT.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_targettarget.Full:Show()
																else
																	oUF_LUI_targettarget.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.ToT.Full.Height,
															type = "input",
															get = function() return db.oUF.ToT.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToT.Full.Height = Height
																		oUF_LUI_targettarget.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Full.Padding,
															type = "input",
															get = function() return db.oUF.ToT.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.ToT.Full.Padding = Padding
																	oUF_LUI_targettarget.Full:ClearAllPoints()
																	oUF_LUI_targettarget.Full:SetPoint("TOPLEFT", oUF_LUI_targettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_targettarget.Full:SetPoint("TOPRIGHT", oUF_LUI_targettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.ToT.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToT.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.ToT.Full.Texture = FullTex
																	oUF_LUI_targettarget.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.ToT.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToT.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.ToT.Full.Alpha = FullAlpha
																	oUF_LUI_targettarget.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.ToT.Full.Color.r, db.oUF.ToT.Full.Color.g, db.oUF.ToT.Full.Color.b, db.oUF.ToT.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.ToT.Full.Color.r = r
																	db.oUF.ToT.Full.Color.g = g
																	db.oUF.ToT.Full.Color.b = b
																	db.oUF.ToT.Full.Color.a = a
																	
																	oUF_LUI_targettarget.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									order = 6,
									disabled = function() return not db.oUF.ToT.Enable end,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.ToT.Texts.Name.Enable = not db.oUF.ToT.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_targettarget.Info:Show()
																else
																	oUF_LUI_targettarget.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT Name Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.Name.Size,
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.Name.Size = FontSize
																	oUF_LUI_targettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Name.Font),db.oUF.ToT.Texts.Name.Size,db.oUF.ToT.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT Name!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Font,
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.Name.Font = Font
																	oUF_LUI_targettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Name.Font),db.oUF.ToT.Texts.Name.Size,db.oUF.ToT.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT Name.\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Outline,
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Name.Font),db.oUF.ToT.Texts.Name.Size,db.oUF.ToT.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your ToT Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.ToT.Texts.Name.X = NameX
																		oUF_LUI_targettarget.Info:ClearAllPoints()
																		oUF_LUI_targettarget.Info:SetPoint(db.oUF.ToT.Texts.Name.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToT.Texts.Name.X), tonumber(db.oUF.ToT.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your ToT Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.ToT.Texts.Name.Y = NameY
																		oUF_LUI_targettarget.Info:ClearAllPoints()
																		oUF_LUI_targettarget.Info:SetPoint(db.oUF.ToT.Texts.Name.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToT.Texts.Name.X), tonumber(db.oUF.ToT.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT Name.\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.Name.Point = positions[Point]
																	oUF_LUI_targettarget.Info:ClearAllPoints()
																	oUF_LUI_targettarget.Info:SetPoint(db.oUF.ToT.Texts.Name.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToT.Texts.Name.X), tonumber(db.oUF.ToT.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT Name.\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Info:ClearAllPoints()
																	oUF_LUI_targettarget.Info:SetPoint(db.oUF.ToT.Texts.Name.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToT.Texts.Name.X), tonumber(db.oUF.ToT.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToT Name.\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Format,
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.ToT.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToT.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your ToT Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.ToT.Texts.Name.Length,
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.ToT.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.ToT.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the ToT Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.ToT.Texts.Name.ColorNameByClass = not db.oUF.ToT.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the ToT Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.ToT.Texts.Name.ColorClassByClass = not db.oUF.ToT.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.ToT.Texts.Name.ColorLevelByDifficulty = not db.oUF.ToT.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToT.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.ToT.Texts.Name.ShowClassification = not db.oUF.ToT.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.ToT.Texts.Name.ShowClassification end,
															get = function() return db.oUF.ToT.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.ToT.Texts.Name.ShortClassification = not db.oUF.ToT.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.Health.Enable = not db.oUF.ToT.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_targettarget.Health.value:Show()
															else
																oUF_LUI_targettarget.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT Health Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.Health.Size,
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.Health.Size = FontSize
																	oUF_LUI_targettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Health.Font),db.oUF.ToT.Texts.Health.Size,db.oUF.ToT.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToT Health.\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.Format,
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.ToT.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToT.Texts.Health.Format = valueFormat[Format]
																	print("ToT Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT Health!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.Font,
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.Health.Font = Font
																	oUF_LUI_targettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Health.Font),db.oUF.ToT.Texts.Health.Size,db.oUF.ToT.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT Health.\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.Outline,
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Health.Font),db.oUF.ToT.Texts.Health.Size,db.oUF.ToT.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your ToT Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															get = function() return db.oUF.ToT.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.ToT.Texts.Health.X = HealthX
																		oUF_LUI_targettarget.Health.value:ClearAllPoints()
																		oUF_LUI_targettarget.Health.value:SetPoint(db.oUF.ToT.Texts.Health.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToT.Texts.Health.X), tonumber(db.oUF.ToT.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your ToT Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															get = function() return db.oUF.ToT.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.ToT.Texts.Health.Y = HealthY
																		oUF_LUI_targettarget.Health.value:ClearAllPoints()
																		oUF_LUI_targettarget.Health.value:SetPoint(db.oUF.ToT.Texts.Health.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToT.Texts.Health.X), tonumber(db.oUF.ToT.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT Health.\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.Health.Point = positions[Point]
																	oUF_LUI_targettarget.Health.value:ClearAllPoints()
																	oUF_LUI_targettarget.Health.value:SetPoint(db.oUF.ToT.Texts.Health.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToT.Texts.Health.X), tonumber(db.oUF.ToT.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT Health.\nDefault: "..defaults.profile.oUF.ToT.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Health.value:ClearAllPoints()
																	oUF_LUI_targettarget.Health.value:SetPoint(db.oUF.ToT.Texts.Health.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToT.Texts.Health.X), tonumber(db.oUF.ToT.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.Health.ColorClass = not db.oUF.ToT.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.Health.ColorGradient = false
																			db.oUF.ToT.Texts.Health.IndividualColor.Enable = false
																			
																			print("ToT Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToT.Texts.Health.ColorGradient = not db.oUF.ToT.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToT.Texts.Health.ColorClass = false
																			db.oUF.ToT.Texts.Health.IndividualColor.Enable = false
																			
																			print("ToT Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.Health.IndividualColor.Enable = not db.oUF.ToT.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.Health.ColorClass = false
																			db.oUF.ToT.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_targettarget.Health.value:SetTextColor(tonumber(db.oUF.ToT.Texts.Health.IndividualColor.r),tonumber(db.oUF.ToT.Texts.Health.IndividualColor.g),tonumber(db.oUF.ToT.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.Health.IndividualColor.r, db.oUF.ToT.Texts.Health.IndividualColor.g, db.oUF.ToT.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.Health.IndividualColor.r = r
																	db.oUF.ToT.Texts.Health.IndividualColor.g = g
																	db.oUF.ToT.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToT.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.ToT.Texts.Health.ShowDead = not db.oUF.ToT.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.Power.Enable = not db.oUF.ToT.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_targettarget.Power.value:Show()
															else
																oUF_LUI_targettarget.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT Power Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.Power.Size,
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.Power.Size = FontSize
																	oUF_LUI_targettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Power.Font),db.oUF.ToT.Texts.Power.Size,db.oUF.ToT.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToT Power.\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.Format,
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.ToT.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToT.Texts.Power.Format = valueFormat[Format]
																	print("ToT Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT Power!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.Font,
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.Power.Font = Font
																	oUF_LUI_targettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Power.Font),db.oUF.ToT.Texts.Power.Size,db.oUF.ToT.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT Power.\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.Outline,
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.Power.Font),db.oUF.ToT.Texts.Power.Size,db.oUF.ToT.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your ToT Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															get = function() return db.oUF.ToT.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.ToT.Texts.Power.X = PowerX
																		oUF_LUI_targettarget.Power.value:ClearAllPoints()
																		oUF_LUI_targettarget.Power.value:SetPoint(db.oUF.ToT.Texts.Power.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToT.Texts.Power.X), tonumber(db.oUF.ToT.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your ToT Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															get = function() return db.oUF.ToT.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.ToT.Texts.Power.Y = PowerY
																		oUF_LUI_targettarget.Power.value:ClearAllPoints()
																		oUF_LUI_targettarget.Power.value:SetPoint(db.oUF.ToT.Texts.Power.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToT.Texts.Power.X), tonumber(db.oUF.ToT.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT Power.\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.Power.Point = positions[Point]
																	oUF_LUI_targettarget.Power.value:ClearAllPoints()
																	oUF_LUI_targettarget.Power.value:SetPoint(db.oUF.ToT.Texts.Power.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToT.Texts.Power.X), tonumber(db.oUF.ToT.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT Power.\nDefault: "..defaults.profile.oUF.ToT.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Power.value:ClearAllPoints()
																	oUF_LUI_targettarget.Power.value:SetPoint(db.oUF.ToT.Texts.Power.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToT.Texts.Power.X), tonumber(db.oUF.ToT.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.Power.ColorClass = not db.oUF.ToT.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.Power.ColorType = false
																			db.oUF.ToT.Texts.Power.IndividualColor.Enable = false
																			
																			print("ToT Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToT.Texts.Power.ColorType = not db.oUF.ToT.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.ToT.Texts.Power.ColorClass = false
																			db.oUF.ToT.Texts.Power.IndividualColor.Enable = false
																			
																			print("ToT Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.Power.IndividualColor.Enable = not db.oUF.ToT.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.Power.ColorClass = false
																			db.oUF.ToT.Texts.Power.ColorType = false
																			
																			oUF_LUI_targettarget.Power.value:SetTextColor(tonumber(db.oUF.ToT.Texts.Power.IndividualColor.r),tonumber(db.oUF.ToT.Texts.Power.IndividualColor.g),tonumber(db.oUF.ToT.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.Power.IndividualColor.r, db.oUF.ToT.Texts.Power.IndividualColor.g, db.oUF.ToT.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.Power.IndividualColor.r = r
																	db.oUF.ToT.Texts.Power.IndividualColor.g = g
																	db.oUF.ToT.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.HealthPercent.Enable = not db.oUF.ToT.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_targettarget.Health.valuePercent:Show()
															else
																oUF_LUI_targettarget.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_targettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthPercent.Font),db.oUF.ToT.Texts.HealthPercent.Size,db.oUF.ToT.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToT HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToT.Texts.HealthPercent.ShowAlways = not db.oUF.ToT.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT HealthPercent!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.HealthPercent.Font = Font
																	oUF_LUI_targettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthPercent.Font),db.oUF.ToT.Texts.HealthPercent.Size,db.oUF.ToT.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthPercent.Font),db.oUF.ToT.Texts.HealthPercent.Size,db.oUF.ToT.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your ToT HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.ToT.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.ToT.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_targettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_targettarget.Health.valuePercent:SetPoint(db.oUF.ToT.Texts.HealthPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthPercent.X), tonumber(db.oUF.ToT.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your ToT HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.ToT.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.ToT.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_targettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_targettarget.Health.valuePercent:SetPoint(db.oUF.ToT.Texts.HealthPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthPercent.X), tonumber(db.oUF.ToT.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_targettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_targettarget.Health.valuePercent:SetPoint(db.oUF.ToT.Texts.HealthPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthPercent.X), tonumber(db.oUF.ToT.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_targettarget.Health.valuePercent:SetPoint(db.oUF.ToT.Texts.HealthPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthPercent.X), tonumber(db.oUF.ToT.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.HealthPercent.ColorClass = not db.oUF.ToT.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.HealthPercent.ColorGradient = false
																			db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("ToT HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToT.Texts.HealthPercent.ColorGradient = not db.oUF.ToT.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToT.Texts.HealthPercent.ColorClass = false
																			db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("ToT HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.HealthPercent.ColorClass = false
																			db.oUF.ToT.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_targettarget.Health.valuePercent:SetTextColor(tonumber(db.oUF.ToT.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.ToT.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.ToT.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.HealthPercent.IndividualColor.r, db.oUF.ToT.Texts.HealthPercent.IndividualColor.g, db.oUF.ToT.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.ToT.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.ToT.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToT.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.ToT.Texts.HealthPercent.ShowDead = not db.oUF.ToT.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.PowerPercent.Enable = not db.oUF.ToT.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_targettarget.Power.valuePercent:Show()
															else
																oUF_LUI_targettarget.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_targettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerPercent.Font),db.oUF.ToT.Texts.PowerPercent.Size,db.oUF.ToT.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToT PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToT.Texts.PowerPercent.ShowAlways = not db.oUF.ToT.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT PowerPercent!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.PowerPercent.Font = Font
																	oUF_LUI_targettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerPercent.Font),db.oUF.ToT.Texts.PowerPercent.Size,db.oUF.ToT.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerPercent.Font),db.oUF.ToT.Texts.PowerPercent.Size,db.oUF.ToT.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your ToT PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.ToT.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.ToT.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_targettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_targettarget.Power.valuePercent:SetPoint(db.oUF.ToT.Texts.PowerPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerPercent.X), tonumber(db.oUF.ToT.Texts.PowerPercent.Y))
																	end,
															order = 5,
														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your ToT PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.ToT.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.ToT.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_targettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_targettarget.Power.valuePercent:SetPoint(db.oUF.ToT.Texts.PowerPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerPercent.X), tonumber(db.oUF.ToT.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_targettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_targettarget.Power.valuePercent:SetPoint(db.oUF.ToT.Texts.PowerPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerPercent.X), tonumber(db.oUF.ToT.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_targettarget.Power.valuePercent:SetPoint(db.oUF.ToT.Texts.PowerPercent.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerPercent.X), tonumber(db.oUF.ToT.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.PowerPercent.ColorClass = not db.oUF.ToT.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.PowerPercent.ColorType = false
																			db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("ToT PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToT.Texts.PowerPercent.ColorType = not db.oUF.ToT.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.ToT.Texts.PowerPercent.ColorClass = false
																			db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("ToT PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.PowerPercent.ColorClass = false
																			db.oUF.ToT.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_targettarget.Power.valuePercent:SetTextColor(tonumber(db.oUF.ToT.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.ToT.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.ToT.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.PowerPercent.IndividualColor.r, db.oUF.ToT.Texts.PowerPercent.IndividualColor.g, db.oUF.ToT.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.ToT.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.ToT.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT HealthMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.HealthMissing.Enable = not db.oUF.ToT.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_targettarget.Health.valueMissing:Show()
															else
																oUF_LUI_targettarget.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_targettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthMissing.Font),db.oUF.ToT.Texts.HealthMissing.Size,db.oUF.ToT.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToT HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToT.Texts.HealthMissing.ShowAlways = not db.oUF.ToT.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.ToT.Texts.HealthMissing.ShortValue = not db.oUF.ToT.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT HealthMissing!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.HealthMissing.Font = Font
																	oUF_LUI_targettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthMissing.Font),db.oUF.ToT.Texts.HealthMissing.Size,db.oUF.ToT.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.HealthMissing.Font),db.oUF.ToT.Texts.HealthMissing.Size,db.oUF.ToT.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your ToT HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.ToT.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.ToT.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_targettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_targettarget.Health.valueMissing:SetPoint(db.oUF.ToT.Texts.HealthMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthMissing.X), tonumber(db.oUF.ToT.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your ToT HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.ToT.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.ToT.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_targettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_targettarget.Health.valueMissing:SetPoint(db.oUF.ToT.Texts.HealthMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthMissing.X), tonumber(db.oUF.ToT.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_targettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_targettarget.Health.valueMissing:SetPoint(db.oUF.ToT.Texts.HealthMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthMissing.X), tonumber(db.oUF.ToT.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_targettarget.Health.valueMissing:SetPoint(db.oUF.ToT.Texts.HealthMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.HealthMissing.X), tonumber(db.oUF.ToT.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.HealthMissing.ColorClass = not db.oUF.ToT.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.HealthMissing.ColorGradient = false
																			db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("ToT HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToT.Texts.HealthMissing.ColorGradient = not db.oUF.ToT.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToT.Texts.HealthMissing.ColorClass = false
																			db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("ToT HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.HealthMissing.ColorClass = false
																			db.oUF.ToT.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_targettarget.Health.valueMissing:SetTextColor(tonumber(db.oUF.ToT.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.ToT.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.ToT.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.HealthMissing.IndividualColor.r, db.oUF.ToT.Texts.HealthMissing.IndividualColor.g, db.oUF.ToT.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.ToT.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.ToT.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToT PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.ToT.Texts.PowerMissing.Enable = not db.oUF.ToT.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_targettarget.Power.valueMissing:Show()
															else
																oUF_LUI_targettarget.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToT PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.ToT.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToT.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.ToT.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_targettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerMissing.Font),db.oUF.ToT.Texts.PowerMissing.Size,db.oUF.ToT.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToT PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToT.Texts.PowerMissing.ShowAlways = not db.oUF.ToT.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.ToT.Texts.PowerMissing.ShortValue = not db.oUF.ToT.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToT PowerMissing!\n\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToT.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.ToT.Texts.PowerMissing.Font = Font
																	oUF_LUI_targettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerMissing.Font),db.oUF.ToT.Texts.PowerMissing.Size,db.oUF.ToT.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToT.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToT.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_targettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToT.Texts.PowerMissing.Font),db.oUF.ToT.Texts.PowerMissing.Size,db.oUF.ToT.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your ToT PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.ToT.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.ToT.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_targettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_targettarget.Power.valueMissing:SetPoint(db.oUF.ToT.Texts.PowerMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerMissing.X), tonumber(db.oUF.ToT.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your ToT PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.ToT.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.ToT.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_targettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_targettarget.Power.valueMissing:SetPoint(db.oUF.ToT.Texts.PowerMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerMissing.X), tonumber(db.oUF.ToT.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToT.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_targettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_targettarget.Power.valueMissing:SetPoint(db.oUF.ToT.Texts.PowerMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerMissing.X), tonumber(db.oUF.ToT.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToT.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToT.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToT.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_targettarget.Power.valueMissing:SetPoint(db.oUF.ToT.Texts.PowerMissing.Point, oUF_LUI_targettarget, db.oUF.ToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToT.Texts.PowerMissing.X), tonumber(db.oUF.ToT.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToT.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToT.Texts.PowerMissing.ColorClass = not db.oUF.ToT.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.ToT.Texts.PowerMissing.ColorType = false
																			db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("ToT PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToT.Texts.PowerMissing.ColorType = not db.oUF.ToT.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.ToT.Texts.PowerMissing.ColorClass = false
																			db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("ToT PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToT PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToT.Texts.PowerMissing.ColorClass = false
																			db.oUF.ToT.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_targettarget.Power.valueMissing:SetTextColor(tonumber(db.oUF.ToT.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.ToT.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.ToT.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToT PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToT.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToT.Texts.PowerMissing.IndividualColor.r, db.oUF.ToT.Texts.PowerMissing.IndividualColor.g, db.oUF.ToT.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToT.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.ToT.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.ToT.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_targettarget.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									disabled = function() return not db.oUF.ToT.Enable end,
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.ToT.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.ToT.Portrait.Enable = not db.oUF.ToT.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.ToT.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.ToT.Portrait.Enable end,
											get = function() return db.oUF.ToT.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.ToT.Portrait.Width = PortraitWidth
														oUF_LUI_targettarget.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.ToT.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.ToT.Portrait.Enable end,
											get = function() return db.oUF.ToT.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.ToT.Portrait.Height = PortraitHeight
														oUF_LUI_targettarget.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.ToT.Portrait.Enable end,
											get = function() return db.oUF.ToT.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.ToT.Portrait.X = PortraitX
														oUF_LUI_targettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_targettarget.Health, "TOPLEFT", PortraitX, db.oUF.ToT.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.ToT.Portrait.Enable end,
											get = function() return db.oUF.ToT.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.ToT.Portrait.Y = PortraitY
														oUF_LUI_targettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_targettarget.Health, "TOPLEFT", db.oUF.ToT.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									order = 8,
									disabled = function() return not db.oUF.ToT.Enable end,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.ToT.Icons.Lootmaster.Enable = not db.oUF.ToT.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToT.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.ToT.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_targettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_targettarget.MasterLooter:SetPoint(db.oUF.ToT.Icons.Lootmaster.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.ToT.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToT.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.ToT.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_targettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_targettarget.MasterLooter:SetPoint(db.oUF.ToT.Icons.Lootmaster.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Lootmaster, tonumber(db.oUF.ToT.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.ToT.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_targettarget.MasterLooter:ClearAllPoints()
															oUF_LUI_targettarget.MasterLooter:SetPoint(db.oUF.ToT.Icons.Lootmaster.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Lootmaster.Point, tonumber(db.oUF.ToT.Icons.Lootmaster.X), tonumber(db.oUF.ToT.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToT.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.ToT.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_targettarget.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_targettarget.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.MasterLooter:IsShown() then oUF_LUI_targettarget.MasterLooter:Hide() else oUF_LUI_targettarget.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.ToT.Icons.Leader.Enable = not db.oUF.ToT.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToT.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.ToT.Icons.Leader.X = LeaderX
																oUF_LUI_targettarget.Leader:ClearAllPoints()
																oUF_LUI_targettarget.Leader:SetPoint(db.oUF.ToT.Icons.Leader.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.ToT.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToT.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.ToT.Icons.Leader.Y = LeaderY
																oUF_LUI_targettarget.Leader:ClearAllPoints()
																oUF_LUI_targettarget.Leader:SetPoint(db.oUF.ToT.Icons.Leader.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Leader.Point, tonumber(db.oUF.ToT.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.ToT.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_targettarget.Leader:ClearAllPoints()
															oUF_LUI_targettarget.Leader:SetPoint(db.oUF.ToT.Icons.Leader.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Leader.Point, tonumber(db.oUF.ToT.Icons.Leader.X), tonumber(db.oUF.ToT.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToT.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.ToT.Icons.Leader.Size = LeaderSize
															oUF_LUI_targettarget.Leader:SetHeight(LeaderSize)
															oUF_LUI_targettarget.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.Leader:IsShown() then oUF_LUI_targettarget.Leader:Hide() else oUF_LUI_targettarget.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.ToT.Icons.Role.Enable = not db.oUF.ToT.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToT.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.ToT.Icons.Role.X = RoleX
																oUF_LUI_targettarget.LFDRole:ClearAllPoints()
																oUF_LUI_targettarget.LFDRole:SetPoint(db.oUF.ToT.Icons.Role.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.ToT.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToT.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.ToT.Icons.Role.Y = RoleY
																oUF_LUI_targettarget.LFDRole:ClearAllPoints()
																oUF_LUI_targettarget.LFDRole:SetPoint(db.oUF.ToT.Icons.Role.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Role.Point, tonumber(db.oUF.ToT.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.ToT.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_targettarget.LFDRole:ClearAllPoints()
															oUF_LUI_targettarget.LFDRole:SetPoint(db.oUF.ToT.Icons.Role.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Role.Point, tonumber(db.oUF.ToT.Icons.Role.X), tonumber(db.oUF.ToT.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToT.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.ToT.Icons.Role.Size = RoleSize
															oUF_LUI_targettarget.LFDRole:SetHeight(RoleSize)
															oUF_LUI_targettarget.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.LFDRole:IsShown() then oUF_LUI_targettarget.LFDRole:Hide() else oUF_LUI_targettarget.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.ToT.Icons.Raid.Enable = not db.oUF.ToT.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToT.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.ToT.Icons.Raid.X = RaidX
																oUF_LUI_targettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_targettarget.RaidIcon:SetPoint(db.oUF.ToT.Icons.Raid.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.ToT.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToT.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.ToT.Icons.Raid.Y = RaidY
																oUF_LUI_targettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_targettarget.RaidIcon:SetPoint(db.oUF.ToT.Icons.Raid.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Raid.Point, tonumber(db.oUF.ToT.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.ToT.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_targettarget.RaidIcon:ClearAllPoints()
															oUF_LUI_targettarget.RaidIcon:SetPoint(db.oUF.ToT.Icons.Raid.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Raid.Point, tonumber(db.oUF.ToT.Icons.Raid.X), tonumber(db.oUF.ToT.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.ToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToT.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.ToT.Icons.Raid.Size = RaidSize
															oUF_LUI_targettarget.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_targettarget.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.RaidIcon:IsShown() then oUF_LUI_targettarget.RaidIcon:Hide() else oUF_LUI_targettarget.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.ToT.Icons.Resting.Enable = not db.oUF.ToT.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToT.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.ToT.Icons.Resting.X = RestingX
																oUF_LUI_targettarget.Resting:ClearAllPoints()
																oUF_LUI_targettarget.Resting:SetPoint(db.oUF.ToT.Icons.Resting.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.ToT.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToT.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.ToT.Icons.Resting.Y = RestingY
																oUF_LUI_targettarget.Resting:ClearAllPoints()
																oUF_LUI_targettarget.Resting:SetPoint(db.oUF.ToT.Icons.Resting.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Resting.Point, tonumber(db.oUF.ToT.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.ToT.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_targettarget.Resting:ClearAllPoints()
															oUF_LUI_targettarget.Resting:SetPoint(db.oUF.ToT.Icons.Resting.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Resting.Point, tonumber(db.oUF.ToT.Icons.Resting.X), tonumber(db.oUF.ToT.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToT.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.ToT.Icons.Resting.Size = RestingSize
															oUF_LUI_targettarget.Resting:SetHeight(RestingSize)
															oUF_LUI_targettarget.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.Resting:IsShown() then oUF_LUI_targettarget.Resting:Hide() else oUF_LUI_targettarget.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.ToT.Icons.Combat.Enable = not db.oUF.ToT.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToT.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.ToT.Icons.Combat.X = CombatX
																oUF_LUI_targettarget.Combat:ClearAllPoints()
																oUF_LUI_targettarget.Combat:SetPoint(db.oUF.ToT.Icons.Combat.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.ToT.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToT.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.ToT.Icons.Combat.Y = CombatY
																oUF_LUI_targettarget.Combat:ClearAllPoints()
																oUF_LUI_targettarget.Combat:SetPoint(db.oUF.ToT.Icons.Combat.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Combat.Point, tonumber(db.oUF.ToT.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.ToT.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_targettarget.Combat:ClearAllPoints()
															oUF_LUI_targettarget.Combat:SetPoint(db.oUF.ToT.Icons.Combat.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.Combat.Point, tonumber(db.oUF.ToT.Icons.Combat.X), tonumber(db.oUF.ToT.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToT.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.ToT.Icons.Combat.Size = CombatSize
															oUF_LUI_targettarget.Combat:SetHeight(CombatSize)
															oUF_LUI_targettarget.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.ToT.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.Combat:IsShown() then oUF_LUI_targettarget.Combat:Hide() else oUF_LUI_targettarget.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToT.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.ToT.Icons.PvP.Enable = not db.oUF.ToT.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToT.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToT.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.ToT.Icons.PvP.X = PvPX
																oUF_LUI_targettarget.PvP:ClearAllPoints()
																oUF_LUI_targettarget.PvP:SetPoint(db.oUF.ToT.Icons.PvP.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.ToT.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToT.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.ToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToT.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.ToT.Icons.PvP.Y = PvPY
																oUF_LUI_targettarget.PvP:ClearAllPoints()
																oUF_LUI_targettarget.PvP:SetPoint(db.oUF.ToT.Icons.PvP.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.PvP.Point, tonumber(db.oUF.ToT.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.ToT.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToT.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.ToT.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_targettarget.PvP:ClearAllPoints()
															oUF_LUI_targettarget.PvP:SetPoint(db.oUF.ToT.Icons.PvP.Point, oUF_LUI_targettarget, db.oUF.ToT.Icons.PvP.Point, tonumber(db.oUF.ToT.Icons.PvP.X), tonumber(db.oUF.ToT.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.ToT.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToT.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.ToT.Icons.PvP.Size = PvPSize
															oUF_LUI_targettarget.PvP:SetHeight(PvPSize)
															oUF_LUI_targettarget.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToT.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettarget.PvP:IsShown() then oUF_LUI_targettarget.PvP:Hide() else oUF_LUI_targettarget.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						ToToT = {
							name = "ToToT",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 7,
							childGroups = "tab",
							args = {
								header1 = {
									name = "ToToT",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a ToToT Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Enable end,
													set = function(self,Enable)
																db.oUF.ToToT.Enable = not db.oUF.ToToT.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											order = 1,
											disabled = function() return not db.oUF.ToToT.Enable end,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												ToToTX = {
													name = "X Value",
													desc = "X Value for your ToToT Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.X,
													type = "input",
													get = function() return db.oUF.ToToT.X end,
													set = function(self,ToToTX)
																if ToToTX == nil or ToToTX == "" then
																	ToToTX = "0"
																end
																db.oUF.ToToT.X = ToToTX
																oUF_LUI_targettargettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(ToToTX), tonumber(db.oUF.ToToT.Y))
															end,
													order = 2,
												},
												ToToTY = {
													name = "Y Value",
													desc = "Y Value for your ToToT Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Y,
													type = "input",
													get = function() return db.oUF.ToToT.Y end,
													set = function(self,ToToTY)
																if ToToTY == nil or ToToTY == "" then
																	ToToTY = "0"
																end
																db.oUF.ToToT.Y = ToToTY
																oUF_LUI_targettargettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.ToToT.X), tonumber(ToToTY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											disabled = function() return not db.oUF.ToToT.Enable end,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												ToToTHeight = {
													name = "Height",
													desc = "Decide the Height of your ToToT Frame.\n\nDefault: "..defaults.profile.oUF.ToToT.Height,
													type = "input",
													get = function() return db.oUF.ToToT.Height end,
													set = function(self,ToToTHeight)
																if ToToTHeight == nil or ToToTHeight == "" then
																	ToToTHeight = "0"
																end
																db.oUF.ToToT.Height = ToToTHeight
																oUF_LUI_targettargettarget:SetHeight(tonumber(ToToTHeight))
															end,
													order = 2,
												},
												ToToTWidth = {
													name = "Width",
													desc = "Decide the Width of your ToToT Frame.\n\nDefault: "..defaults.profile.oUF.ToToT.Width,
													type = "input",
													get = function() return db.oUF.ToToT.Width end,
													set = function(self,ToToTWidth)
																if ToToTWidth == nil or ToToTWidth == "" then
																	ToToTWidth = "0"
																end
																db.oUF.ToToT.Width = ToToTWidth
																oUF_LUI_targettargettarget:SetWidth(tonumber(ToToTWidth))
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											order = 3,
											disabled = function() return not db.oUF.ToToT.Enable end,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.ToToT.Backdrop.Color.r, db.oUF.ToToT.Backdrop.Color.g, db.oUF.ToToT.Backdrop.Color.b, db.oUF.ToToT.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.ToToT.Backdrop.Color.r = r
															db.oUF.ToToT.Backdrop.Color.g = g
															db.oUF.ToToT.Backdrop.Color.b = b
															db.oUF.ToToT.Backdrop.Color.a = a

															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.ToToT.Border.Color.r, db.oUF.ToToT.Border.Color.g, db.oUF.ToToT.Border.Color.b, db.oUF.ToToT.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.ToToT.Border.Color.r = r
															db.oUF.ToToT.Border.Color.g = g
															db.oUF.ToToT.Border.Color.b = b
															db.oUF.ToToT.Border.Color.a = a
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.ToToT.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.ToToT.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.ToToT.Backdrop.Texture = BackdropTexture
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.ToToT.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.ToToT.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.ToToT.Border.EdgeFile = BorderTexture
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.ToToT.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.ToToT.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.ToToT.Border.EdgeSize = BorderSize
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.ToToT.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.ToToT.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_targettargettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettargettarget, "TOPLEFT", tonumber(db.oUF.ToToT.Backdrop.Padding.Left), tonumber(db.oUF.ToToT.Backdrop.Padding.Top))
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettargettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToToT.Backdrop.Padding.Right), tonumber(db.oUF.ToToT.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.ToToT.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.ToToT.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_targettargettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettargettarget, "TOPLEFT", tonumber(db.oUF.ToToT.Backdrop.Padding.Left), tonumber(db.oUF.ToToT.Backdrop.Padding.Top))
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettargettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToToT.Backdrop.Padding.Right), tonumber(db.oUF.ToToT.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.ToToT.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.ToToT.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_targettargettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettargettarget, "TOPLEFT", tonumber(db.oUF.ToToT.Backdrop.Padding.Left), tonumber(db.oUF.ToToT.Backdrop.Padding.Top))
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettargettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToToT.Backdrop.Padding.Right), tonumber(db.oUF.ToToT.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.ToToT.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.ToToT.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_targettargettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_targettargettarget, "TOPLEFT", tonumber(db.oUF.ToToT.Backdrop.Padding.Left), tonumber(db.oUF.ToToT.Backdrop.Padding.Top))
														oUF_LUI_targettargettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_targettargettarget, "BOTTOMRIGHT", tonumber(db.oUF.ToToT.Backdrop.Padding.Right), tonumber(db.oUF.ToToT.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.ToToT.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.ToToT.Border.Insets.Left = InsetLeft
														oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.ToToT.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.ToToT.Border.Insets.Right = InsetRight
														oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.ToToT.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.ToToT.Border.Insets.Top = InsetTop
														oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.ToToT.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.ToToT.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.ToToT.Border.Insets.Bottom = InsetBottom
														oUF_LUI_targettargettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.ToToT.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.ToToT.Border.EdgeFile), edgeSize = tonumber(db.oUF.ToToT.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.ToToT.Border.Insets.Left), right = tonumber(db.oUF.ToToT.Border.Insets.Right), top = tonumber(db.oUF.ToToT.Border.Insets.Top), bottom = tonumber(db.oUF.ToToT.Border.Insets.Bottom)}
															})
															
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.ToToT.Backdrop.Color.r), tonumber(db.oUF.ToToT.Backdrop.Color.g), tonumber(db.oUF.ToToT.Backdrop.Color.b), tonumber(db.oUF.ToToT.Backdrop.Color.a))
															oUF_LUI_targettargettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.ToToT.Border.Color.r), tonumber(db.oUF.ToToT.Border.Color.g), tonumber(db.oUF.ToToT.Border.Color.b), tonumber(db.oUF.ToToT.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											order = 4,
											disabled = function() return not db.oUF.ToToT.Enable end,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									order = 3,
									disabled = function() return not db.oUF.ToToT.Enable end,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your ToToT Health.\n\nDefault: "..defaults.profile.oUF.ToToT.Health.Height,
															type = "input",
															get = function() return db.oUF.ToToT.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToToT.Health.Height = Height
																		oUF_LUI_targettargettarget.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Health.Padding,
															type = "input",
															get = function() return db.oUF.ToToT.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.ToToT.Health.Padding = Padding
																		oUF_LUI_targettargettarget.Health:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health:SetPoint("TOPLEFT", oUF_LUI_targettargettarget, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_targettargettarget.Health:SetPoint("TOPRIGHT", oUF_LUI_targettargettarget, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToToT.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.ToToT.Health.Smooth = not db.oUF.ToToT.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.ToToT.Health.ColorClass = not db.oUF.ToToT.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.ToToT.Health.ColorGradient = false
																			db.oUF.ToToT.Health.IndividualColor.Enable = false
																			
																			print("ToToT Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.ToToT.Health.ColorGradient = not db.oUF.ToToT.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.ToToT.Health.ColorClass = false
																			db.oUF.ToToT.Health.IndividualColor.Enable = false
																			
																			print("ToToT Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.ToToT.Health.IndividualColor.Enable = not db.oUF.ToToT.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.ToToT.Health.ColorClass = false
																			db.oUF.ToToT.Health.ColorGradient = false
																			
																			oUF_LUI_targettargettarget.Health:SetStatusBarColor(db.oUF.ToToT.Health.IndividualColor.r, db.oUF.ToToT.Health.IndividualColor.g, db.oUF.ToToT.Health.IndividualColor.b)
																			oUF_LUI_targettargettarget.Health.bg:SetVertexColor(db.oUF.ToToT.Health.IndividualColor.r*tonumber(db.oUF.ToToT.Health.BGMultiplier), db.oUF.ToToT.Health.IndividualColor.g*tonumber(db.oUF.ToToT.Health.BGMultiplier), db.oUF.ToToT.Health.IndividualColor.b*tonumber(db.oUF.ToToT.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Health.IndividualColor.r, db.oUF.ToToT.Health.IndividualColor.g, db.oUF.ToToT.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Health.IndividualColor.r = r
																	db.oUF.ToToT.Health.IndividualColor.g = g
																	db.oUF.ToToT.Health.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_targettargettarget.Health.bg:SetVertexColor(r*tonumber(db.oUF.ToToT.Health.BGMultiplier), g*tonumber(db.oUF.ToToT.Health.BGMultiplier), b*tonumber(db.oUF.ToToT.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.ToToT.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToToT.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.ToToT.Health.Texture = HealthTex
																	oUF_LUI_targettargettarget.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.ToToT.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToToT.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.ToToT.Health.TextureBG = HealthTexBG
																	oUF_LUI_targettargettarget.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.ToToT.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToToT.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.ToToT.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_targettargettarget.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.ToToT.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToToT.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.ToToT.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_targettargettarget.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.ToToT.Power.Enable = not db.oUF.ToToT.Power.Enable
																if EnablePower == true then
																	oUF_LUI_targettargettarget.Power:Show()
																else
																	oUF_LUI_targettargettarget.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your ToToT Power.\n\nDefault: "..defaults.profile.oUF.ToToT.Power.Height,
															type = "input",
															get = function() return db.oUF.ToToT.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToToT.Power.Height = Height
																		oUF_LUI_targettargettarget.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Power.Padding,
															type = "input",
															get = function() return db.oUF.ToToT.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.ToToT.Power.Padding = Padding
																		oUF_LUI_targettargettarget.Power:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power:SetPoint("TOPLEFT", oUF_LUI_targettargettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_targettargettarget.Power:SetPoint("TOPRIGHT", oUF_LUI_targettargettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToToT.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.ToToT.Power.Smooth = not db.oUF.ToToT.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.ToToT.Power.ColorClass = not db.oUF.ToToT.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.ToToT.Power.ColorType = false
																			db.oUF.ToToT.Power.IndividualColor.Enable = false
																			
																			print("ToToT Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.ToToT.Power.ColorType = not db.oUF.ToToT.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.ToToT.Power.ColorClass = false
																			db.oUF.ToToT.Power.IndividualColor.Enable = false
																			
																			print("ToToT Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.ToToT.Power.IndividualColor.Enable = not db.oUF.ToToT.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.ToToT.Power.ColorType = false
																			db.oUF.ToToT.Power.ColorClass = false
																			
																			oUF_LUI_targettargettarget.Power:SetStatusBarColor(db.oUF.ToToT.Power.IndividualColor.r, db.oUF.ToToT.Power.IndividualColor.g, db.oUF.ToToT.Power.IndividualColor.b)
																			oUF_LUI_targettargettarget.Power.bg:SetVertexColor(db.oUF.ToToT.Power.IndividualColor.r*tonumber(db.oUF.ToToT.Power.BGMultiplier), db.oUF.ToToT.Power.IndividualColor.g*tonumber(db.oUF.ToToT.Power.BGMultiplier), db.oUF.ToToT.Power.IndividualColor.b*tonumber(db.oUF.ToToT.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Power.IndividualColor.r, db.oUF.ToToT.Power.IndividualColor.g, db.oUF.ToToT.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Power.IndividualColor.r = r
																	db.oUF.ToToT.Power.IndividualColor.g = g
																	db.oUF.ToToT.Power.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_targettargettarget.Power.bg:SetVertexColor(r*tonumber(db.oUF.ToToT.Power.BGMultiplier), g*tonumber(db.oUF.ToToT.Power.BGMultiplier), b*tonumber(db.oUF.ToToT.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.ToToT.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToToT.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.ToToT.Power.Texture = PowerTex
																	oUF_LUI_targettargettarget.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.ToToT.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToToT.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.ToToT.Power.TextureBG = PowerTexBG
																	oUF_LUI_targettargettarget.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.ToToT.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToToT.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.ToToT.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_targettargettarget.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.ToToT.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToToT.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.ToToT.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_targettargettarget.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.ToToT.Full.Enable = not db.oUF.ToToT.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_targettargettarget.Full:Show()
																else
																	oUF_LUI_targettargettarget.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.ToToT.Full.Height,
															type = "input",
															get = function() return db.oUF.ToToT.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.ToToT.Full.Height = Height
																		oUF_LUI_targettargettarget.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Full.Padding,
															type = "input",
															get = function() return db.oUF.ToToT.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.ToToT.Full.Padding = Padding
																	oUF_LUI_targettargettarget.Full:ClearAllPoints()
																	oUF_LUI_targettargettarget.Full:SetPoint("TOPLEFT", oUF_LUI_targettargettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_targettargettarget.Full:SetPoint("TOPRIGHT", oUF_LUI_targettargettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.ToToT.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.ToToT.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.ToToT.Full.Texture = FullTex
																	oUF_LUI_targettargettarget.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.ToToT.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.ToToT.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.ToToT.Full.Alpha = FullAlpha
																	oUF_LUI_targettargettarget.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.ToToT.Full.Color.r, db.oUF.ToToT.Full.Color.g, db.oUF.ToToT.Full.Color.b, db.oUF.ToToT.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.ToToT.Full.Color.r = r
																	db.oUF.ToToT.Full.Color.g = g
																	db.oUF.ToToT.Full.Color.b = b
																	db.oUF.ToToT.Full.Color.a = a
																	
																	oUF_LUI_targettargettarget.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.ToToT.Enable end,
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.ToToT.Texts.Name.Enable = not db.oUF.ToToT.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_targettargettarget.Info:Show()
																else
																	oUF_LUI_targettargettarget.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT Name Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.Name.Size,
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.Name.Size = FontSize
																	oUF_LUI_targettargettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Name.Font),db.oUF.ToToT.Texts.Name.Size,db.oUF.ToToT.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT Name!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Font,
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.Name.Font = Font
																	oUF_LUI_targettargettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Name.Font),db.oUF.ToToT.Texts.Name.Size,db.oUF.ToToT.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT Name.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Info:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Name.Font),db.oUF.ToToT.Texts.Name.Size,db.oUF.ToToT.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your ToToT Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.ToToT.Texts.Name.X = NameX
																		oUF_LUI_targettargettarget.Info:ClearAllPoints()
																		oUF_LUI_targettargettarget.Info:SetPoint(db.oUF.ToToT.Texts.Name.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToToT.Texts.Name.X), tonumber(db.oUF.ToToT.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your ToToT Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.ToToT.Texts.Name.Y = NameY
																		oUF_LUI_targettargettarget.Info:ClearAllPoints()
																		oUF_LUI_targettargettarget.Info:SetPoint(db.oUF.ToToT.Texts.Name.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToToT.Texts.Name.X), tonumber(db.oUF.ToToT.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT Name.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.Name.Point = positions[Point]
																	oUF_LUI_targettargettarget.Info:ClearAllPoints()
																	oUF_LUI_targettargettarget.Info:SetPoint(db.oUF.ToToT.Texts.Name.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToToT.Texts.Name.X), tonumber(db.oUF.ToToT.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT Name.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Info:ClearAllPoints()
																	oUF_LUI_targettargettarget.Info:SetPoint(db.oUF.ToToT.Texts.Name.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Name.RelativePoint, tonumber(db.oUF.ToToT.Texts.Name.X), tonumber(db.oUF.ToToT.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToToT Name.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Format,
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.ToToT.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToToT.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your ToToT Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.Name.Length,
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.ToToT.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.ToToT.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the ToToT Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.ToToT.Texts.Name.ColorNameByClass = not db.oUF.ToToT.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the ToToT Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.ToToT.Texts.Name.ColorClassByClass = not db.oUF.ToToT.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.ToToT.Texts.Name.ColorLevelByDifficulty = not db.oUF.ToToT.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.ToToT.Texts.Name.Enable end,
															get = function() return db.oUF.ToToT.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.ToToT.Texts.Name.ShowClassification = not db.oUF.ToToT.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.ToToT.Texts.Name.ShowClassification end,
															get = function() return db.oUF.ToToT.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.ToToT.Texts.Name.ShortClassification = not db.oUF.ToToT.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.Health.Enable = not db.oUF.ToToT.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Health.value:Show()
															else
																oUF_LUI_targettargettarget.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT Health Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.Health.Size,
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.Health.Size = FontSize
																	oUF_LUI_targettargettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Health.Font),db.oUF.ToToT.Texts.Health.Size,db.oUF.ToToT.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToToT Health.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.Format,
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.ToToT.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToToT.Texts.Health.Format = valueFormat[Format]
																	print("ToToT Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT Health!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.Font,
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.Health.Font = Font
																	oUF_LUI_targettargettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Health.Font),db.oUF.ToToT.Texts.Health.Size,db.oUF.ToToT.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT Health.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Health.Font),db.oUF.ToToT.Texts.Health.Size,db.oUF.ToToT.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your ToToT Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															get = function() return db.oUF.ToToT.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.ToToT.Texts.Health.X = HealthX
																		oUF_LUI_targettargettarget.Health.value:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.value:SetPoint(db.oUF.ToToT.Texts.Health.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToToT.Texts.Health.X), tonumber(db.oUF.ToToT.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your ToToT Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															get = function() return db.oUF.ToToT.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.ToToT.Texts.Health.Y = HealthY
																		oUF_LUI_targettargettarget.Health.value:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.value:SetPoint(db.oUF.ToToT.Texts.Health.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToToT.Texts.Health.X), tonumber(db.oUF.ToToT.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT Health.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.Health.Point = positions[Point]
																	oUF_LUI_targettargettarget.Health.value:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.value:SetPoint(db.oUF.ToToT.Texts.Health.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToToT.Texts.Health.X), tonumber(db.oUF.ToToT.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT Health.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Health.value:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.value:SetPoint(db.oUF.ToToT.Texts.Health.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Health.RelativePoint, tonumber(db.oUF.ToToT.Texts.Health.X), tonumber(db.oUF.ToToT.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.Health.ColorClass = not db.oUF.ToToT.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.Health.ColorGradient = false
																			db.oUF.ToToT.Texts.Health.IndividualColor.Enable = false
																			
																			print("ToToT Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToToT.Texts.Health.ColorGradient = not db.oUF.ToToT.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToToT.Texts.Health.ColorClass = false
																			db.oUF.ToToT.Texts.Health.IndividualColor.Enable = false
																			
																			print("ToToT Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.Health.IndividualColor.Enable = not db.oUF.ToToT.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.Health.ColorClass = false
																			db.oUF.ToToT.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_targettargettarget.Health.value:SetTextColor(tonumber(db.oUF.ToToT.Texts.Health.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.Health.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.Health.IndividualColor.r, db.oUF.ToToT.Texts.Health.IndividualColor.g, db.oUF.ToToT.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.Health.IndividualColor.r = r
																	db.oUF.ToToT.Texts.Health.IndividualColor.g = g
																	db.oUF.ToToT.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToToT.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.ToToT.Texts.Health.ShowDead = not db.oUF.ToToT.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.Power.Enable = not db.oUF.ToToT.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Power.value:Show()
															else
																oUF_LUI_targettargettarget.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT Power Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.Power.Size,
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.Power.Size = FontSize
																	oUF_LUI_targettargettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Power.Font),db.oUF.ToToT.Texts.Power.Size,db.oUF.ToToT.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your ToToT Power.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.Format,
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.ToToT.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.ToToT.Texts.Power.Format = valueFormat[Format]
																	print("ToToT Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT Power!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.Font,
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.Power.Font = Font
																	oUF_LUI_targettargettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Power.Font),db.oUF.ToToT.Texts.Power.Size,db.oUF.ToToT.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT Power.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.Power.Font),db.oUF.ToToT.Texts.Power.Size,db.oUF.ToToT.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your ToToT Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															get = function() return db.oUF.ToToT.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.ToToT.Texts.Power.X = PowerX
																		oUF_LUI_targettargettarget.Power.value:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.value:SetPoint(db.oUF.ToToT.Texts.Power.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToToT.Texts.Power.X), tonumber(db.oUF.ToToT.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your ToToT Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															get = function() return db.oUF.ToToT.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.ToToT.Texts.Power.Y = PowerY
																		oUF_LUI_targettargettarget.Power.value:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.value:SetPoint(db.oUF.ToToT.Texts.Power.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToToT.Texts.Power.X), tonumber(db.oUF.ToToT.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT Power.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.Power.Point = positions[Point]
																	oUF_LUI_targettargettarget.Power.value:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.value:SetPoint(db.oUF.ToToT.Texts.Power.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToToT.Texts.Power.X), tonumber(db.oUF.ToToT.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT Power.\nDefault: "..defaults.profile.oUF.ToToT.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Power.value:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.value:SetPoint(db.oUF.ToToT.Texts.Power.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.Power.RelativePoint, tonumber(db.oUF.ToToT.Texts.Power.X), tonumber(db.oUF.ToToT.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.Power.ColorClass = not db.oUF.ToToT.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.Power.ColorType = false
																			db.oUF.ToToT.Texts.Power.IndividualColor.Enable = false
																			
																			print("ToToT Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToToT.Texts.Power.ColorType = not db.oUF.ToToT.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.ToToT.Texts.Power.ColorClass = false
																			db.oUF.ToToT.Texts.Power.IndividualColor.Enable = false
																			
																			print("ToToT Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.Power.IndividualColor.Enable = not db.oUF.ToToT.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.Power.ColorClass = false
																			db.oUF.ToToT.Texts.Power.ColorType = false
																			
																			oUF_LUI_targettargettarget.Power.value:SetTextColor(tonumber(db.oUF.ToToT.Texts.Power.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.Power.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.Power.IndividualColor.r, db.oUF.ToToT.Texts.Power.IndividualColor.g, db.oUF.ToToT.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.Power.IndividualColor.r = r
																	db.oUF.ToToT.Texts.Power.IndividualColor.g = g
																	db.oUF.ToToT.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.HealthPercent.Enable = not db.oUF.ToToT.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Health.valuePercent:Show()
															else
																oUF_LUI_targettargettarget.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_targettargettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthPercent.Font),db.oUF.ToToT.Texts.HealthPercent.Size,db.oUF.ToToT.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToToT HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToToT.Texts.HealthPercent.ShowAlways = not db.oUF.ToToT.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT HealthPercent!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.HealthPercent.Font = Font
																	oUF_LUI_targettargettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthPercent.Font),db.oUF.ToToT.Texts.HealthPercent.Size,db.oUF.ToToT.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthPercent.Font),db.oUF.ToToT.Texts.HealthPercent.Size,db.oUF.ToToT.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your ToToT HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.ToToT.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.ToToT.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_targettargettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.valuePercent:SetPoint(db.oUF.ToToT.Texts.HealthPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthPercent.X), tonumber(db.oUF.ToToT.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your ToToT HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.ToToT.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.ToToT.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_targettargettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.valuePercent:SetPoint(db.oUF.ToToT.Texts.HealthPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthPercent.X), tonumber(db.oUF.ToToT.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_targettargettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.valuePercent:SetPoint(db.oUF.ToToT.Texts.HealthPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthPercent.X), tonumber(db.oUF.ToToT.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT HealthPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.valuePercent:SetPoint(db.oUF.ToToT.Texts.HealthPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthPercent.X), tonumber(db.oUF.ToToT.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.HealthPercent.ColorClass = not db.oUF.ToToT.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.HealthPercent.ColorGradient = false
																			db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("ToToT HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToToT.Texts.HealthPercent.ColorGradient = not db.oUF.ToToT.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToToT.Texts.HealthPercent.ColorClass = false
																			db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("ToToT HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.HealthPercent.ColorClass = false
																			db.oUF.ToToT.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_targettargettarget.Health.valuePercent:SetTextColor(tonumber(db.oUF.ToToT.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.HealthPercent.IndividualColor.r, db.oUF.ToToT.Texts.HealthPercent.IndividualColor.g, db.oUF.ToToT.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.ToToT.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.ToToT.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.ToToT.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.ToToT.Texts.HealthPercent.ShowDead = not db.oUF.ToToT.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.PowerPercent.Enable = not db.oUF.ToToT.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Power.valuePercent:Show()
															else
																oUF_LUI_targettargettarget.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_targettargettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerPercent.Font),db.oUF.ToToT.Texts.PowerPercent.Size,db.oUF.ToToT.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToToT PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToToT.Texts.PowerPercent.ShowAlways = not db.oUF.ToToT.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT PowerPercent!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.PowerPercent.Font = Font
																	oUF_LUI_targettargettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerPercent.Font),db.oUF.ToToT.Texts.PowerPercent.Size,db.oUF.ToToT.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerPercent.Font),db.oUF.ToToT.Texts.PowerPercent.Size,db.oUF.ToToT.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your ToToT PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.ToToT.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.ToToT.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_targettargettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.valuePercent:SetPoint(db.oUF.ToToT.Texts.PowerPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerPercent.X), tonumber(db.oUF.ToToT.Texts.PowerPercent.Y))
																	end,
															order = 5,
														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your ToToT PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.ToToT.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.ToToT.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_targettargettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.valuePercent:SetPoint(db.oUF.ToToT.Texts.PowerPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerPercent.X), tonumber(db.oUF.ToToT.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_targettargettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.valuePercent:SetPoint(db.oUF.ToToT.Texts.PowerPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerPercent.X), tonumber(db.oUF.ToToT.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT PowerPercent.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.valuePercent:SetPoint(db.oUF.ToToT.Texts.PowerPercent.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerPercent.X), tonumber(db.oUF.ToToT.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.PowerPercent.ColorClass = not db.oUF.ToToT.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.PowerPercent.ColorType = false
																			db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("ToToT PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToToT.Texts.PowerPercent.ColorType = not db.oUF.ToToT.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.ToToT.Texts.PowerPercent.ColorClass = false
																			db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("ToToT PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.PowerPercent.ColorClass = false
																			db.oUF.ToToT.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_targettargettarget.Power.valuePercent:SetTextColor(tonumber(db.oUF.ToToT.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.PowerPercent.IndividualColor.r, db.oUF.ToToT.Texts.PowerPercent.IndividualColor.g, db.oUF.ToToT.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.ToToT.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.ToToT.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT HealthMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.HealthMissing.Enable = not db.oUF.ToToT.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Health.valueMissing:Show()
															else
																oUF_LUI_targettargettarget.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_targettargettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthMissing.Font),db.oUF.ToToT.Texts.HealthMissing.Size,db.oUF.ToToT.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToToT HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToToT.Texts.HealthMissing.ShowAlways = not db.oUF.ToToT.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.ToToT.Texts.HealthMissing.ShortValue = not db.oUF.ToToT.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT HealthMissing!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.HealthMissing.Font = Font
																	oUF_LUI_targettargettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthMissing.Font),db.oUF.ToToT.Texts.HealthMissing.Size,db.oUF.ToToT.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.HealthMissing.Font),db.oUF.ToToT.Texts.HealthMissing.Size,db.oUF.ToToT.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your ToToT HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.ToToT.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.ToToT.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_targettargettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.valueMissing:SetPoint(db.oUF.ToToT.Texts.HealthMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthMissing.X), tonumber(db.oUF.ToToT.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your ToToT HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.ToToT.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.ToToT.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_targettargettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_targettargettarget.Health.valueMissing:SetPoint(db.oUF.ToToT.Texts.HealthMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthMissing.X), tonumber(db.oUF.ToToT.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_targettargettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.valueMissing:SetPoint(db.oUF.ToToT.Texts.HealthMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthMissing.X), tonumber(db.oUF.ToToT.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT HealthMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_targettargettarget.Health.valueMissing:SetPoint(db.oUF.ToToT.Texts.HealthMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.HealthMissing.X), tonumber(db.oUF.ToToT.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.HealthMissing.ColorClass = not db.oUF.ToToT.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.HealthMissing.ColorGradient = false
																			db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("ToToT HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.ToToT.Texts.HealthMissing.ColorGradient = not db.oUF.ToToT.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.ToToT.Texts.HealthMissing.ColorClass = false
																			db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("ToToT HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.HealthMissing.ColorClass = false
																			db.oUF.ToToT.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_targettargettarget.Health.valueMissing:SetTextColor(tonumber(db.oUF.ToToT.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.HealthMissing.IndividualColor.r, db.oUF.ToToT.Texts.HealthMissing.IndividualColor.g, db.oUF.ToToT.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.ToToT.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.ToToT.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the ToToT PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.ToToT.Texts.PowerMissing.Enable = not db.oUF.ToToT.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_targettargettarget.Power.valueMissing:Show()
															else
																oUF_LUI_targettargettarget.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your ToToT PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.ToToT.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.ToToT.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_targettargettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerMissing.Font),db.oUF.ToToT.Texts.PowerMissing.Size,db.oUF.ToToT.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show ToToT PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.ToToT.Texts.PowerMissing.ShowAlways = not db.oUF.ToToT.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.ToToT.Texts.PowerMissing.ShortValue = not db.oUF.ToToT.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for ToToT PowerMissing!\n\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.ToToT.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.ToToT.Texts.PowerMissing.Font = Font
																	oUF_LUI_targettargettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerMissing.Font),db.oUF.ToToT.Texts.PowerMissing.Size,db.oUF.ToToT.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your ToToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.ToToT.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.ToToT.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_targettargettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.ToToT.Texts.PowerMissing.Font),db.oUF.ToToT.Texts.PowerMissing.Size,db.oUF.ToToT.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your ToToT PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.ToToT.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.ToToT.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_targettargettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.valueMissing:SetPoint(db.oUF.ToToT.Texts.PowerMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerMissing.X), tonumber(db.oUF.ToToT.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your ToToT PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.ToToT.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.ToToT.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_targettargettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_targettargettarget.Power.valueMissing:SetPoint(db.oUF.ToToT.Texts.PowerMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerMissing.X), tonumber(db.oUF.ToToT.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your ToToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.ToToT.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_targettargettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.valueMissing:SetPoint(db.oUF.ToToT.Texts.PowerMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerMissing.X), tonumber(db.oUF.ToToT.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your ToToT PowerMissing.\nDefault: "..defaults.profile.oUF.ToToT.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.ToToT.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.ToToT.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_targettargettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_targettargettarget.Power.valueMissing:SetPoint(db.oUF.ToToT.Texts.PowerMissing.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.ToToT.Texts.PowerMissing.X), tonumber(db.oUF.ToToT.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.ToToT.Texts.PowerMissing.ColorClass = not db.oUF.ToToT.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.ToToT.Texts.PowerMissing.ColorType = false
																			db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("ToToT PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.ToToT.Texts.PowerMissing.ColorType = not db.oUF.ToToT.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.ToToT.Texts.PowerMissing.ColorClass = false
																			db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("ToToT PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual ToToT PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.ToToT.Texts.PowerMissing.ColorClass = false
																			db.oUF.ToToT.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_targettargettarget.Power.valueMissing:SetTextColor(tonumber(db.oUF.ToToT.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.ToToT.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.ToToT.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual ToToT PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.ToToT.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.ToToT.Texts.PowerMissing.IndividualColor.r, db.oUF.ToToT.Texts.PowerMissing.IndividualColor.g, db.oUF.ToToT.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.ToToT.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.ToToT.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.ToToT.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_targettargettarget.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									disabled = function() return not db.oUF.ToToT.Enable end,
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.ToToT.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.ToToT.Portrait.Enable = not db.oUF.ToToT.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.ToToT.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.ToToT.Portrait.Enable end,
											get = function() return db.oUF.ToToT.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.ToToT.Portrait.Width = PortraitWidth
														oUF_LUI_targettargettarget.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.ToToT.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.ToToT.Portrait.Enable end,
											get = function() return db.oUF.ToToT.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.ToToT.Portrait.Height = PortraitHeight
														oUF_LUI_targettargettarget.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.ToToT.Portrait.Enable end,
											get = function() return db.oUF.ToToT.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.ToToT.Portrait.X = PortraitX
														oUF_LUI_targettargettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_targettargettarget.Health, "TOPLEFT", PortraitX, db.oUF.ToToT.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.ToToT.Portrait.Enable end,
											get = function() return db.oUF.ToToT.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.ToToT.Portrait.Y = PortraitY
														oUF_LUI_targettargettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_targettargettarget.Health, "TOPLEFT", db.oUF.ToToT.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									order = 8,
									disabled = function() return not db.oUF.ToToT.Enable end,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.ToToT.Icons.Lootmaster.Enable = not db.oUF.ToToT.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToToT.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.ToToT.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_targettargettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_targettargettarget.MasterLooter:SetPoint(db.oUF.ToToT.Icons.Lootmaster.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.ToToT.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToToT.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.ToToT.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_targettargettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_targettargettarget.MasterLooter:SetPoint(db.oUF.ToToT.Icons.Lootmaster.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Lootmaster, tonumber(db.oUF.ToToT.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.ToToT.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_targettargettarget.MasterLooter:ClearAllPoints()
															oUF_LUI_targettargettarget.MasterLooter:SetPoint(db.oUF.ToToT.Icons.Lootmaster.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Lootmaster.Point, tonumber(db.oUF.ToToT.Icons.Lootmaster.X), tonumber(db.oUF.ToToT.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.ToToT.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.ToToT.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_targettargettarget.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_targettargettarget.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.MasterLooter:IsShown() then oUF_LUI_targettargettarget.MasterLooter:Hide() else oUF_LUI_targettargettarget.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.ToToT.Icons.Leader.Enable = not db.oUF.ToToT.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToToT.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.ToToT.Icons.Leader.X = LeaderX
																oUF_LUI_targettargettarget.Leader:ClearAllPoints()
																oUF_LUI_targettargettarget.Leader:SetPoint(db.oUF.ToToT.Icons.Leader.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.ToToT.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToToT.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.ToToT.Icons.Leader.Y = LeaderY
																oUF_LUI_targettargettarget.Leader:ClearAllPoints()
																oUF_LUI_targettargettarget.Leader:SetPoint(db.oUF.ToToT.Icons.Leader.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Leader.Point, tonumber(db.oUF.ToToT.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.ToToT.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_targettargettarget.Leader:ClearAllPoints()
															oUF_LUI_targettargettarget.Leader:SetPoint(db.oUF.ToToT.Icons.Leader.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Leader.Point, tonumber(db.oUF.ToToT.Icons.Leader.X), tonumber(db.oUF.ToToT.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.Leader.Enable end,
													get = function() return db.oUF.ToToT.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.ToToT.Icons.Leader.Size = LeaderSize
															oUF_LUI_targettargettarget.Leader:SetHeight(LeaderSize)
															oUF_LUI_targettargettarget.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.Leader:IsShown() then oUF_LUI_targettargettarget.Leader:Hide() else oUF_LUI_targettargettarget.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.ToToT.Icons.Role.Enable = not db.oUF.ToToT.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToToT.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.ToToT.Icons.Role.X = RoleX
																oUF_LUI_targettargettarget.LFDRole:ClearAllPoints()
																oUF_LUI_targettargettarget.LFDRole:SetPoint(db.oUF.ToToT.Icons.Role.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.ToToT.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToToT.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.ToToT.Icons.Role.Y = RoleY
																oUF_LUI_targettargettarget.LFDRole:ClearAllPoints()
																oUF_LUI_targettargettarget.LFDRole:SetPoint(db.oUF.ToToT.Icons.Role.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Role.Point, tonumber(db.oUF.ToToT.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.ToToT.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_targettargettarget.LFDRole:ClearAllPoints()
															oUF_LUI_targettargettarget.LFDRole:SetPoint(db.oUF.ToToT.Icons.Role.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Role.Point, tonumber(db.oUF.ToToT.Icons.Role.X), tonumber(db.oUF.ToToT.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.Role.Enable end,
													get = function() return db.oUF.ToToT.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.ToToT.Icons.Role.Size = RoleSize
															oUF_LUI_targettargettarget.LFDRole:SetHeight(RoleSize)
															oUF_LUI_targettargettarget.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.LFDRole:IsShown() then oUF_LUI_targettargettarget.LFDRole:Hide() else oUF_LUI_targettargettarget.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.ToToT.Icons.Raid.Enable = not db.oUF.ToToT.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToToT.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.ToToT.Icons.Raid.X = RaidX
																oUF_LUI_targettargettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_targettargettarget.RaidIcon:SetPoint(db.oUF.ToToT.Icons.Raid.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.ToToT.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToToT.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.ToToT.Icons.Raid.Y = RaidY
																oUF_LUI_targettargettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_targettargettarget.RaidIcon:SetPoint(db.oUF.ToToT.Icons.Raid.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Raid.Point, tonumber(db.oUF.ToToT.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.ToToT.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_targettargettarget.RaidIcon:ClearAllPoints()
															oUF_LUI_targettargettarget.RaidIcon:SetPoint(db.oUF.ToToT.Icons.Raid.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Raid.Point, tonumber(db.oUF.ToToT.Icons.Raid.X), tonumber(db.oUF.ToToT.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.ToToT.Icons.Raid.Enable end,
													get = function() return db.oUF.ToToT.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.ToToT.Icons.Raid.Size = RaidSize
															oUF_LUI_targettargettarget.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_targettargettarget.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.RaidIcon:IsShown() then oUF_LUI_targettargettarget.RaidIcon:Hide() else oUF_LUI_targettargettarget.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.ToToT.Icons.Resting.Enable = not db.oUF.ToToT.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToToT.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.ToToT.Icons.Resting.X = RestingX
																oUF_LUI_targettargettarget.Resting:ClearAllPoints()
																oUF_LUI_targettargettarget.Resting:SetPoint(db.oUF.ToToT.Icons.Resting.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.ToToT.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToToT.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.ToToT.Icons.Resting.Y = RestingY
																oUF_LUI_targettargettarget.Resting:ClearAllPoints()
																oUF_LUI_targettargettarget.Resting:SetPoint(db.oUF.ToToT.Icons.Resting.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Resting.Point, tonumber(db.oUF.ToToT.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.ToToT.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_targettargettarget.Resting:ClearAllPoints()
															oUF_LUI_targettargettarget.Resting:SetPoint(db.oUF.ToToT.Icons.Resting.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Resting.Point, tonumber(db.oUF.ToToT.Icons.Resting.X), tonumber(db.oUF.ToToT.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.Resting.Enable end,
													get = function() return db.oUF.ToToT.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.ToToT.Icons.Resting.Size = RestingSize
															oUF_LUI_targettargettarget.Resting:SetHeight(RestingSize)
															oUF_LUI_targettargettarget.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.Resting:IsShown() then oUF_LUI_targettargettarget.Resting:Hide() else oUF_LUI_targettargettarget.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.ToToT.Icons.Combat.Enable = not db.oUF.ToToT.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToToT.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.ToToT.Icons.Combat.X = CombatX
																oUF_LUI_targettargettarget.Combat:ClearAllPoints()
																oUF_LUI_targettargettarget.Combat:SetPoint(db.oUF.ToToT.Icons.Combat.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.ToToT.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToToT.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.ToToT.Icons.Combat.Y = CombatY
																oUF_LUI_targettargettarget.Combat:ClearAllPoints()
																oUF_LUI_targettargettarget.Combat:SetPoint(db.oUF.ToToT.Icons.Combat.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Combat.Point, tonumber(db.oUF.ToToT.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.ToToT.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_targettargettarget.Combat:ClearAllPoints()
															oUF_LUI_targettargettarget.Combat:SetPoint(db.oUF.ToToT.Icons.Combat.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.Combat.Point, tonumber(db.oUF.ToToT.Icons.Combat.X), tonumber(db.oUF.ToToT.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.Combat.Enable end,
													get = function() return db.oUF.ToToT.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.ToToT.Icons.Combat.Size = CombatSize
															oUF_LUI_targettargettarget.Combat:SetHeight(CombatSize)
															oUF_LUI_targettargettarget.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.ToToT.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.Combat:IsShown() then oUF_LUI_targettargettarget.Combat:Hide() else oUF_LUI_targettargettarget.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.ToToT.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.ToToT.Icons.PvP.Enable = not db.oUF.ToToT.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.ToToT.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToToT.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.ToToT.Icons.PvP.X = PvPX
																oUF_LUI_targettargettarget.PvP:ClearAllPoints()
																oUF_LUI_targettargettarget.PvP:SetPoint(db.oUF.ToToT.Icons.PvP.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.ToToT.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.ToToT.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.ToToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToToT.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.ToToT.Icons.PvP.Y = PvPY
																oUF_LUI_targettargettarget.PvP:ClearAllPoints()
																oUF_LUI_targettargettarget.PvP:SetPoint(db.oUF.ToToT.Icons.PvP.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.PvP.Point, tonumber(db.oUF.ToToT.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.ToToT.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.ToToT.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.ToToT.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_targettargettarget.PvP:ClearAllPoints()
															oUF_LUI_targettargettarget.PvP:SetPoint(db.oUF.ToToT.Icons.PvP.Point, oUF_LUI_targettargettarget, db.oUF.ToToT.Icons.PvP.Point, tonumber(db.oUF.ToToT.Icons.PvP.X), tonumber(db.oUF.ToToT.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.ToToT.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.ToToT.Icons.PvP.Enable end,
													get = function() return db.oUF.ToToT.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.ToToT.Icons.PvP.Size = PvPSize
															oUF_LUI_targettargettarget.PvP:SetHeight(PvPSize)
															oUF_LUI_targettargettarget.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.ToToT.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_targettargettarget.PvP:IsShown() then oUF_LUI_targettargettarget.PvP:Hide() else oUF_LUI_targettargettarget.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						Focus = {
							name = "Focus",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 8,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Focus",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a Focus Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Enable end,
													set = function(self,Enable)
																db.oUF.Focus.Enable = not db.oUF.Focus.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											order = 1,
											disabled = function() return not db.oUF.Focus.Enable end,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												FocusX = {
													name = "X Value",
													desc = "X Value for your Focus Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.X,
													type = "input",
													get = function() return db.oUF.Focus.X end,
													set = function(self,FocusX)
																if FocusX == nil or FocusX == "" then
																	FocusX = "0"
																end
																db.oUF.Focus.X = FocusX
																oUF_LUI_focus:SetPoint("CENTER", UIParent, "CENTER", tonumber(FocusX), tonumber(db.oUF.Focus.Y))
															end,
													order = 2,
												},
												FocusY = {
													name = "Y Value",
													desc = "Y Value for your Focus Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Y,
													type = "input",
													get = function() return db.oUF.Focus.Y end,
													set = function(self,FocusY)
																if FocusY == nil or FocusY == "" then
																	FocusY = "0"
																end
																db.oUF.Focus.Y = FocusY
																oUF_LUI_focus:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.Focus.X), tonumber(FocusY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											disabled = function() return not db.oUF.Focus.Enable end,
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												FocusHeight = {
													name = "Height",
													desc = "Decide the Height of your Focus Frame.\n\nDefault: "..defaults.profile.oUF.Focus.Height,
													type = "input",
													get = function() return db.oUF.Focus.Height end,
													set = function(self,FocusHeight)
																if FocusHeight == nil or FocusHeight == "" then
																	FocusHeight = "0"
																end
																db.oUF.Focus.Height = FocusHeight
																oUF_LUI_focus:SetHeight(tonumber(FocusHeight))
															end,
													order = 2,
												},
												FocusWidth = {
													name = "Width",
													desc = "Decide the Width of your Focus Frame.\n\nDefault: "..defaults.profile.oUF.Focus.Width,
													type = "input",
													get = function() return db.oUF.Focus.Width end,
													set = function(self,FocusWidth)
																if FocusWidth == nil or FocusWidth == "" then
																	FocusWidth = "0"
																end
																db.oUF.Focus.Width = FocusWidth
																oUF_LUI_focus:SetWidth(tonumber(FocusWidth))
																
																if db.oUF.auras.focus.buffs_enable == true then
																	oUF_LUI_focus.Buffs:SetWidth(tonumber(FocusWidth))
																end
																
																if db.oUF.auras.focus.debuffs_enable == true then
																	oUF_LUI_focus.Debuffs:SetWidth(tonumber(FocusWidth))
																end
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											order = 3,
											disabled = function() return not db.oUF.Focus.Enable end,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Focus.Backdrop.Color.r, db.oUF.Focus.Backdrop.Color.g, db.oUF.Focus.Backdrop.Color.b, db.oUF.Focus.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Focus.Backdrop.Color.r = r
															db.oUF.Focus.Backdrop.Color.g = g
															db.oUF.Focus.Backdrop.Color.b = b
															db.oUF.Focus.Backdrop.Color.a = a

															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Focus.Border.Color.r, db.oUF.Focus.Border.Color.g, db.oUF.Focus.Border.Color.b, db.oUF.Focus.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Focus.Border.Color.r = r
															db.oUF.Focus.Border.Color.g = g
															db.oUF.Focus.Border.Color.b = b
															db.oUF.Focus.Border.Color.a = a
															
															oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Focus.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Focus.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Focus.Backdrop.Texture = BackdropTexture
															oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Focus.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Focus.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Focus.Border.EdgeFile = BorderTexture
															oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Focus.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Focus.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Focus.Border.EdgeSize = BorderSize
															oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Focus.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Focus.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_focus.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focus.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focus, "TOPLEFT", tonumber(db.oUF.Focus.Backdrop.Padding.Left), tonumber(db.oUF.Focus.Backdrop.Padding.Top))
														oUF_LUI_focus.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focus, "BOTTOMRIGHT", tonumber(db.oUF.Focus.Backdrop.Padding.Right), tonumber(db.oUF.Focus.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Focus.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Focus.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_focus.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focus.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focus, "TOPLEFT", tonumber(db.oUF.Focus.Backdrop.Padding.Left), tonumber(db.oUF.Focus.Backdrop.Padding.Top))
														oUF_LUI_focus.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focus, "BOTTOMRIGHT", tonumber(db.oUF.Focus.Backdrop.Padding.Right), tonumber(db.oUF.Focus.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Focus.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Focus.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_focus.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focus.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focus, "TOPLEFT", tonumber(db.oUF.Focus.Backdrop.Padding.Left), tonumber(db.oUF.Focus.Backdrop.Padding.Top))
														oUF_LUI_focus.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focus, "BOTTOMRIGHT", tonumber(db.oUF.Focus.Backdrop.Padding.Right), tonumber(db.oUF.Focus.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Focus.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Focus.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_focus.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focus.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focus, "TOPLEFT", tonumber(db.oUF.Focus.Backdrop.Padding.Left), tonumber(db.oUF.Focus.Backdrop.Padding.Top))
														oUF_LUI_focus.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focus, "BOTTOMRIGHT", tonumber(db.oUF.Focus.Backdrop.Padding.Right), tonumber(db.oUF.Focus.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Focus.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Focus.Border.Insets.Left = InsetLeft
														oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Focus.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Focus.Border.Insets.Right = InsetRight
														oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Focus.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Focus.Border.Insets.Top = InsetTop
														oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Focus.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Focus.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Focus.Border.Insets.Bottom = InsetBottom
														oUF_LUI_focus.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Focus.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Focus.Border.EdgeFile), edgeSize = tonumber(db.oUF.Focus.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Focus.Border.Insets.Left), right = tonumber(db.oUF.Focus.Border.Insets.Right), top = tonumber(db.oUF.Focus.Border.Insets.Top), bottom = tonumber(db.oUF.Focus.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focus.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Focus.Backdrop.Color.r), tonumber(db.oUF.Focus.Backdrop.Color.g), tonumber(db.oUF.Focus.Backdrop.Color.b), tonumber(db.oUF.Focus.Backdrop.Color.a))
															oUF_LUI_focus.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Focus.Border.Color.r), tonumber(db.oUF.Focus.Border.Color.g), tonumber(db.oUF.Focus.Border.Color.b), tonumber(db.oUF.Focus.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.Focus.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Focus.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Focus Health.\n\nDefault: "..defaults.profile.oUF.Focus.Health.Height,
															type = "input",
															get = function() return db.oUF.Focus.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Focus.Health.Height = Height
																		oUF_LUI_focus.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Health.Padding,
															type = "input",
															get = function() return db.oUF.Focus.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Focus.Health.Padding = Padding
																		oUF_LUI_focus.Health:ClearAllPoints()
																		oUF_LUI_focus.Health:SetPoint("TOPLEFT", oUF_LUI_focus, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_focus.Health:SetPoint("TOPRIGHT", oUF_LUI_focus, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Focus.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Focus.Health.Smooth = not db.oUF.Focus.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Focus.Health.ColorClass = not db.oUF.Focus.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Focus.Health.ColorGradient = false
																			db.oUF.Focus.Health.IndividualColor.Enable = false
																			
																			print("Focus Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Focus.Health.ColorGradient = not db.oUF.Focus.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Focus.Health.ColorClass = false
																			db.oUF.Focus.Health.IndividualColor.Enable = false
																			
																			print("Focus Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Focus.Health.IndividualColor.Enable = not db.oUF.Focus.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Focus.Health.ColorClass = false
																			db.oUF.Focus.Health.ColorGradient = false
																			
																			oUF_LUI_focus.Health:SetStatusBarColor(db.oUF.Focus.Health.IndividualColor.r, db.oUF.Focus.Health.IndividualColor.g, db.oUF.Focus.Health.IndividualColor.b)
																			oUF_LUI_focus.Health.bg:SetVertexColor(db.oUF.Focus.Health.IndividualColor.r*tonumber(db.oUF.Focus.Health.BGMultiplier), db.oUF.Focus.Health.IndividualColor.g*tonumber(db.oUF.Focus.Health.BGMultiplier), db.oUF.Focus.Health.IndividualColor.b*tonumber(db.oUF.Focus.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Health.IndividualColor.r, db.oUF.Focus.Health.IndividualColor.g, db.oUF.Focus.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Health.IndividualColor.r = r
																	db.oUF.Focus.Health.IndividualColor.g = g
																	db.oUF.Focus.Health.IndividualColor.b = b
																	
																	oUF_LUI_focus.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_focus.Health.bg:SetVertexColor(r*tonumber(db.oUF.Focus.Health.BGMultiplier), g*tonumber(db.oUF.Focus.Health.BGMultiplier), b*tonumber(db.oUF.Focus.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Focus.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Focus.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Focus.Health.Texture = HealthTex
																	oUF_LUI_focus.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Focus.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Focus.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Focus.Health.TextureBG = HealthTexBG
																	oUF_LUI_focus.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Focus.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Focus.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Focus.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_focus.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Focus.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Focus.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Focus.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_focus.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Focus.Power.Enable = not db.oUF.Focus.Power.Enable
																if EnablePower == true then
																	oUF_LUI_focus.Power:Show()
																else
																	oUF_LUI_focus.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Focus Power.\n\nDefault: "..defaults.profile.oUF.Focus.Power.Height,
															type = "input",
															get = function() return db.oUF.Focus.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Focus.Power.Height = Height
																		oUF_LUI_focus.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Power.Padding,
															type = "input",
															get = function() return db.oUF.Focus.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Focus.Power.Padding = Padding
																		oUF_LUI_focus.Power:ClearAllPoints()
																		oUF_LUI_focus.Power:SetPoint("TOPLEFT", oUF_LUI_focus.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_focus.Power:SetPoint("TOPRIGHT", oUF_LUI_focus.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Focus.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Focus.Power.Smooth = not db.oUF.Focus.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Focus.Power.ColorClass = not db.oUF.Focus.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Focus.Power.ColorType = false
																			db.oUF.Focus.Power.IndividualColor.Enable = false
																			
																			print("Focus Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Focus.Power.ColorType = not db.oUF.Focus.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Focus.Power.ColorClass = false
																			db.oUF.Focus.Power.IndividualColor.Enable = false
																			
																			print("Focus Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Focus.Power.IndividualColor.Enable = not db.oUF.Focus.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Focus.Power.ColorType = false
																			db.oUF.Focus.Power.ColorClass = false
																			
																			oUF_LUI_focus.Power:SetStatusBarColor(db.oUF.Focus.Power.IndividualColor.r, db.oUF.Focus.Power.IndividualColor.g, db.oUF.Focus.Power.IndividualColor.b)
																			oUF_LUI_focus.Power.bg:SetVertexColor(db.oUF.Focus.Power.IndividualColor.r*tonumber(db.oUF.Focus.Power.BGMultiplier), db.oUF.Focus.Power.IndividualColor.g*tonumber(db.oUF.Focus.Power.BGMultiplier), db.oUF.Focus.Power.IndividualColor.b*tonumber(db.oUF.Focus.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Power.IndividualColor.r, db.oUF.Focus.Power.IndividualColor.g, db.oUF.Focus.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Power.IndividualColor.r = r
																	db.oUF.Focus.Power.IndividualColor.g = g
																	db.oUF.Focus.Power.IndividualColor.b = b
																	
																	oUF_LUI_focus.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_focus.Power.bg:SetVertexColor(r*tonumber(db.oUF.Focus.Power.BGMultiplier), g*tonumber(db.oUF.Focus.Power.BGMultiplier), b*tonumber(db.oUF.Focus.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Focus.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Focus.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Focus.Power.Texture = PowerTex
																	oUF_LUI_focus.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Focus.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Focus.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.Focus.Power.TextureBG = PowerTexBG
																	oUF_LUI_focus.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Focus.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Focus.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Focus.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_focus.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Focus.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Focus.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Focus.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_focus.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Focus.Full.Enable = not db.oUF.Focus.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_focus.Full:Show()
																else
																	oUF_LUI_focus.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Focus.Full.Height,
															type = "input",
															get = function() return db.oUF.Focus.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Focus.Full.Height = Height
																		oUF_LUI_focus.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Full.Padding,
															type = "input",
															get = function() return db.oUF.Focus.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Focus.Full.Padding = Padding
																	oUF_LUI_focus.Full:ClearAllPoints()
																	oUF_LUI_focus.Full:SetPoint("TOPLEFT", oUF_LUI_focus.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_focus.Full:SetPoint("TOPRIGHT", oUF_LUI_focus.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Focus.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Focus.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Focus.Full.Texture = FullTex
																	oUF_LUI_focus.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Focus.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Focus.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Focus.Full.Alpha = FullAlpha
																	oUF_LUI_focus.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Focus.Full.Color.r, db.oUF.Focus.Full.Color.g, db.oUF.Focus.Full.Color.b, db.oUF.Focus.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Focus.Full.Color.r = r
																	db.oUF.Focus.Full.Color.g = g
																	db.oUF.Focus.Full.Color.b = b
																	db.oUF.Focus.Full.Color.a = a
																	
																	oUF_LUI_focus.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Focus.Enable end,
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Focus.Texts.Name.Enable = not db.oUF.Focus.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_focus.Info:Show()
																else
																	oUF_LUI_focus.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus Name Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.Name.Size,
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.Name.Size = FontSize
																	oUF_LUI_focus.Info:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Name.Font),db.oUF.Focus.Texts.Name.Size,db.oUF.Focus.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus Name!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Font,
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.Name.Font = Font
																	oUF_LUI_focus.Info:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Name.Font),db.oUF.Focus.Texts.Name.Size,db.oUF.Focus.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus Name.\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Outline,
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Info:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Name.Font),db.oUF.Focus.Texts.Name.Size,db.oUF.Focus.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Focus Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Focus.Texts.Name.X = NameX
																		oUF_LUI_focus.Info:ClearAllPoints()
																		oUF_LUI_focus.Info:SetPoint(db.oUF.Focus.Texts.Name.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Name.RelativePoint, tonumber(db.oUF.Focus.Texts.Name.X), tonumber(db.oUF.Focus.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Focus Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Focus.Texts.Name.Y = NameY
																		oUF_LUI_focus.Info:ClearAllPoints()
																		oUF_LUI_focus.Info:SetPoint(db.oUF.Focus.Texts.Name.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Name.RelativePoint, tonumber(db.oUF.Focus.Texts.Name.X), tonumber(db.oUF.Focus.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus Name.\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.Name.Point = positions[Point]
																	oUF_LUI_focus.Info:ClearAllPoints()
																	oUF_LUI_focus.Info:SetPoint(db.oUF.Focus.Texts.Name.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Name.RelativePoint, tonumber(db.oUF.Focus.Texts.Name.X), tonumber(db.oUF.Focus.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus Name.\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Info:ClearAllPoints()
																	oUF_LUI_focus.Info:SetPoint(db.oUF.Focus.Texts.Name.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Name.RelativePoint, tonumber(db.oUF.Focus.Texts.Name.X), tonumber(db.oUF.Focus.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Focus Name.\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Format,
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Focus.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Focus.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Focus Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Focus.Texts.Name.Length,
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Focus.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Focus.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Focus Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Focus.Texts.Name.ColorNameByClass = not db.oUF.Focus.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Focus Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Focus.Texts.Name.ColorClassByClass = not db.oUF.Focus.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Focus.Texts.Name.ColorLevelByDifficulty = not db.oUF.Focus.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Focus.Texts.Name.Enable end,
															get = function() return db.oUF.Focus.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Focus.Texts.Name.ShowClassification = not db.oUF.Focus.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Focus.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Focus.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Focus.Texts.Name.ShortClassification = not db.oUF.Focus.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.Health.Enable = not db.oUF.Focus.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_focus.Health.value:Show()
															else
																oUF_LUI_focus.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus Health Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.Health.Size,
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.Health.Size = FontSize
																	oUF_LUI_focus.Health.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Health.Font),db.oUF.Focus.Texts.Health.Size,db.oUF.Focus.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Focus Health.\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.Format,
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Focus.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Focus.Texts.Health.Format = valueFormat[Format]
																	print("Focus Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus Health!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.Font,
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.Health.Font = Font
																	oUF_LUI_focus.Health.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Health.Font),db.oUF.Focus.Texts.Health.Size,db.oUF.Focus.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus Health.\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.Outline,
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Health.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Health.Font),db.oUF.Focus.Texts.Health.Size,db.oUF.Focus.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Focus Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															get = function() return db.oUF.Focus.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Focus.Texts.Health.X = HealthX
																		oUF_LUI_focus.Health.value:ClearAllPoints()
																		oUF_LUI_focus.Health.value:SetPoint(db.oUF.Focus.Texts.Health.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Health.RelativePoint, tonumber(db.oUF.Focus.Texts.Health.X), tonumber(db.oUF.Focus.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Focus Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															get = function() return db.oUF.Focus.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Focus.Texts.Health.Y = HealthY
																		oUF_LUI_focus.Health.value:ClearAllPoints()
																		oUF_LUI_focus.Health.value:SetPoint(db.oUF.Focus.Texts.Health.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Health.RelativePoint, tonumber(db.oUF.Focus.Texts.Health.X), tonumber(db.oUF.Focus.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus Health.\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.Health.Point = positions[Point]
																	oUF_LUI_focus.Health.value:ClearAllPoints()
																	oUF_LUI_focus.Health.value:SetPoint(db.oUF.Focus.Texts.Health.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Health.RelativePoint, tonumber(db.oUF.Focus.Texts.Health.X), tonumber(db.oUF.Focus.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus Health.\nDefault: "..defaults.profile.oUF.Focus.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Health.value:ClearAllPoints()
																	oUF_LUI_focus.Health.value:SetPoint(db.oUF.Focus.Texts.Health.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Health.RelativePoint, tonumber(db.oUF.Focus.Texts.Health.X), tonumber(db.oUF.Focus.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.Health.ColorClass = not db.oUF.Focus.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.Health.ColorGradient = false
																			db.oUF.Focus.Texts.Health.IndividualColor.Enable = false
																			
																			print("Focus Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Focus.Texts.Health.ColorGradient = not db.oUF.Focus.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Focus.Texts.Health.ColorClass = false
																			db.oUF.Focus.Texts.Health.IndividualColor.Enable = false
																			
																			print("Focus Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.Health.IndividualColor.Enable = not db.oUF.Focus.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.Health.ColorClass = false
																			db.oUF.Focus.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_focus.Health.value:SetTextColor(tonumber(db.oUF.Focus.Texts.Health.IndividualColor.r),tonumber(db.oUF.Focus.Texts.Health.IndividualColor.g),tonumber(db.oUF.Focus.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.Health.IndividualColor.r, db.oUF.Focus.Texts.Health.IndividualColor.g, db.oUF.Focus.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.Health.IndividualColor.r = r
																	db.oUF.Focus.Texts.Health.IndividualColor.g = g
																	db.oUF.Focus.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_focus.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Focus.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Focus.Texts.Health.ShowDead = not db.oUF.Focus.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.Power.Enable = not db.oUF.Focus.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_focus.Power.value:Show()
															else
																oUF_LUI_focus.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus Power Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.Power.Size,
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.Power.Size = FontSize
																	oUF_LUI_focus.Power.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Power.Font),db.oUF.Focus.Texts.Power.Size,db.oUF.Focus.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Focus Power.\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.Format,
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Focus.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Focus.Texts.Power.Format = valueFormat[Format]
																	print("Focus Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus Power!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.Font,
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.Power.Font = Font
																	oUF_LUI_focus.Power.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Power.Font),db.oUF.Focus.Texts.Power.Size,db.oUF.Focus.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus Power.\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.Outline,
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Power.value:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.Power.Font),db.oUF.Focus.Texts.Power.Size,db.oUF.Focus.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Focus Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															get = function() return db.oUF.Focus.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Focus.Texts.Power.X = PowerX
																		oUF_LUI_focus.Power.value:ClearAllPoints()
																		oUF_LUI_focus.Power.value:SetPoint(db.oUF.Focus.Texts.Power.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Power.RelativePoint, tonumber(db.oUF.Focus.Texts.Power.X), tonumber(db.oUF.Focus.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Focus Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															get = function() return db.oUF.Focus.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Focus.Texts.Power.Y = PowerY
																		oUF_LUI_focus.Power.value:ClearAllPoints()
																		oUF_LUI_focus.Power.value:SetPoint(db.oUF.Focus.Texts.Power.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Power.RelativePoint, tonumber(db.oUF.Focus.Texts.Power.X), tonumber(db.oUF.Focus.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus Power.\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.Power.Point = positions[Point]
																	oUF_LUI_focus.Power.value:ClearAllPoints()
																	oUF_LUI_focus.Power.value:SetPoint(db.oUF.Focus.Texts.Power.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Power.RelativePoint, tonumber(db.oUF.Focus.Texts.Power.X), tonumber(db.oUF.Focus.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus Power.\nDefault: "..defaults.profile.oUF.Focus.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Power.value:ClearAllPoints()
																	oUF_LUI_focus.Power.value:SetPoint(db.oUF.Focus.Texts.Power.Point, oUF_LUI_focus, db.oUF.Focus.Texts.Power.RelativePoint, tonumber(db.oUF.Focus.Texts.Power.X), tonumber(db.oUF.Focus.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.Power.ColorClass = not db.oUF.Focus.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.Power.ColorType = false
																			db.oUF.Focus.Texts.Power.IndividualColor.Enable = false
																			
																			print("Focus Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Focus.Texts.Power.ColorType = not db.oUF.Focus.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Focus.Texts.Power.ColorClass = false
																			db.oUF.Focus.Texts.Power.IndividualColor.Enable = false
																			
																			print("Focus Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.Power.IndividualColor.Enable = not db.oUF.Focus.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.Power.ColorClass = false
																			db.oUF.Focus.Texts.Power.ColorType = false
																			
																			oUF_LUI_focus.Power.value:SetTextColor(tonumber(db.oUF.Focus.Texts.Power.IndividualColor.r),tonumber(db.oUF.Focus.Texts.Power.IndividualColor.g),tonumber(db.oUF.Focus.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.Power.IndividualColor.r, db.oUF.Focus.Texts.Power.IndividualColor.g, db.oUF.Focus.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.Power.IndividualColor.r = r
																	db.oUF.Focus.Texts.Power.IndividualColor.g = g
																	db.oUF.Focus.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_focus.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.HealthPercent.Enable = not db.oUF.Focus.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_focus.Health.valuePercent:Show()
															else
																oUF_LUI_focus.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_focus.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthPercent.Font),db.oUF.Focus.Texts.HealthPercent.Size,db.oUF.Focus.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Focus HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Focus.Texts.HealthPercent.ShowAlways = not db.oUF.Focus.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus HealthPercent!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.HealthPercent.Font = Font
																	oUF_LUI_focus.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthPercent.Font),db.oUF.Focus.Texts.HealthPercent.Size,db.oUF.Focus.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus HealthPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthPercent.Font),db.oUF.Focus.Texts.HealthPercent.Size,db.oUF.Focus.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Focus HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Focus.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Focus.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_focus.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_focus.Health.valuePercent:SetPoint(db.oUF.Focus.Texts.HealthPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthPercent.X), tonumber(db.oUF.Focus.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Focus HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Focus.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Focus.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_focus.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_focus.Health.valuePercent:SetPoint(db.oUF.Focus.Texts.HealthPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthPercent.X), tonumber(db.oUF.Focus.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus HealthPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_focus.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_focus.Health.valuePercent:SetPoint(db.oUF.Focus.Texts.HealthPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthPercent.X), tonumber(db.oUF.Focus.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus HealthPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_focus.Health.valuePercent:SetPoint(db.oUF.Focus.Texts.HealthPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthPercent.X), tonumber(db.oUF.Focus.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.HealthPercent.ColorClass = not db.oUF.Focus.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Focus HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Focus.Texts.HealthPercent.ColorGradient = not db.oUF.Focus.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Focus.Texts.HealthPercent.ColorClass = false
																			db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Focus HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.HealthPercent.ColorClass = false
																			db.oUF.Focus.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_focus.Health.valuePercent:SetTextColor(tonumber(db.oUF.Focus.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Focus.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Focus.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.HealthPercent.IndividualColor.r, db.oUF.Focus.Texts.HealthPercent.IndividualColor.g, db.oUF.Focus.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Focus.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Focus.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_focus.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Focus.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Focus.Texts.HealthPercent.ShowDead = not db.oUF.Focus.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.PowerPercent.Enable = not db.oUF.Focus.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_focus.Power.valuePercent:Show()
															else
																oUF_LUI_focus.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_focus.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerPercent.Font),db.oUF.Focus.Texts.PowerPercent.Size,db.oUF.Focus.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Focus PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Focus.Texts.PowerPercent.ShowAlways = not db.oUF.Focus.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus PowerPercent!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.PowerPercent.Font = Font
																	oUF_LUI_focus.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerPercent.Font),db.oUF.Focus.Texts.PowerPercent.Size,db.oUF.Focus.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus PowerPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerPercent.Font),db.oUF.Focus.Texts.PowerPercent.Size,db.oUF.Focus.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Focus PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Focus.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Focus.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_focus.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_focus.Power.valuePercent:SetPoint(db.oUF.Focus.Texts.PowerPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerPercent.X), tonumber(db.oUF.Focus.Texts.PowerPercent.Y))
																	end,
															order = 5,
														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Focus PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Focus.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Focus.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_focus.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_focus.Power.valuePercent:SetPoint(db.oUF.Focus.Texts.PowerPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerPercent.X), tonumber(db.oUF.Focus.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus PowerPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_focus.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_focus.Power.valuePercent:SetPoint(db.oUF.Focus.Texts.PowerPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerPercent.X), tonumber(db.oUF.Focus.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus PowerPercent.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_focus.Power.valuePercent:SetPoint(db.oUF.Focus.Texts.PowerPercent.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerPercent.X), tonumber(db.oUF.Focus.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.PowerPercent.ColorClass = not db.oUF.Focus.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.PowerPercent.ColorType = false
																			db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Focus PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Focus.Texts.PowerPercent.ColorType = not db.oUF.Focus.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Focus.Texts.PowerPercent.ColorClass = false
																			db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Focus PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.PowerPercent.ColorClass = false
																			db.oUF.Focus.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_focus.Power.valuePercent:SetTextColor(tonumber(db.oUF.Focus.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Focus.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Focus.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.PowerPercent.IndividualColor.r, db.oUF.Focus.Texts.PowerPercent.IndividualColor.g, db.oUF.Focus.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Focus.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Focus.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_focus.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus HealthMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.HealthMissing.Enable = not db.oUF.Focus.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_focus.Health.valueMissing:Show()
															else
																oUF_LUI_focus.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_focus.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthMissing.Font),db.oUF.Focus.Texts.HealthMissing.Size,db.oUF.Focus.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Focus HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Focus.Texts.HealthMissing.ShowAlways = not db.oUF.Focus.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Focus.Texts.HealthMissing.ShortValue = not db.oUF.Focus.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus HealthMissing!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.HealthMissing.Font = Font
																	oUF_LUI_focus.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthMissing.Font),db.oUF.Focus.Texts.HealthMissing.Size,db.oUF.Focus.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus HealthMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.HealthMissing.Font),db.oUF.Focus.Texts.HealthMissing.Size,db.oUF.Focus.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Focus HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Focus.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Focus.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_focus.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_focus.Health.valueMissing:SetPoint(db.oUF.Focus.Texts.HealthMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthMissing.X), tonumber(db.oUF.Focus.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Focus HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Focus.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Focus.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_focus.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_focus.Health.valueMissing:SetPoint(db.oUF.Focus.Texts.HealthMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthMissing.X), tonumber(db.oUF.Focus.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus HealthMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_focus.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_focus.Health.valueMissing:SetPoint(db.oUF.Focus.Texts.HealthMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthMissing.X), tonumber(db.oUF.Focus.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus HealthMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_focus.Health.valueMissing:SetPoint(db.oUF.Focus.Texts.HealthMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.HealthMissing.X), tonumber(db.oUF.Focus.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.HealthMissing.ColorClass = not db.oUF.Focus.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Focus HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Focus.Texts.HealthMissing.ColorGradient = not db.oUF.Focus.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Focus.Texts.HealthMissing.ColorClass = false
																			db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Focus HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.HealthMissing.ColorClass = false
																			db.oUF.Focus.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_focus.Health.valueMissing:SetTextColor(tonumber(db.oUF.Focus.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Focus.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Focus.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.HealthMissing.IndividualColor.r, db.oUF.Focus.Texts.HealthMissing.IndividualColor.g, db.oUF.Focus.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Focus.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Focus.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_focus.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Focus PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Focus.Texts.PowerMissing.Enable = not db.oUF.Focus.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_focus.Power.valueMissing:Show()
															else
																oUF_LUI_focus.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Focus PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Focus.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Focus.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Focus.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_focus.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerMissing.Font),db.oUF.Focus.Texts.PowerMissing.Size,db.oUF.Focus.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Focus PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Focus.Texts.PowerMissing.ShowAlways = not db.oUF.Focus.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Focus.Texts.PowerMissing.ShortValue = not db.oUF.Focus.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Focus PowerMissing!\n\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Focus.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Focus.Texts.PowerMissing.Font = Font
																	oUF_LUI_focus.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerMissing.Font),db.oUF.Focus.Texts.PowerMissing.Size,db.oUF.Focus.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Focus PowerMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Focus.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Focus.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_focus.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Focus.Texts.PowerMissing.Font),db.oUF.Focus.Texts.PowerMissing.Size,db.oUF.Focus.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Focus PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Focus.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Focus.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_focus.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_focus.Power.valueMissing:SetPoint(db.oUF.Focus.Texts.PowerMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerMissing.X), tonumber(db.oUF.Focus.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Focus PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Focus.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Focus.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_focus.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_focus.Power.valueMissing:SetPoint(db.oUF.Focus.Texts.PowerMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerMissing.X), tonumber(db.oUF.Focus.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Focus PowerMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Focus.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_focus.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_focus.Power.valueMissing:SetPoint(db.oUF.Focus.Texts.PowerMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerMissing.X), tonumber(db.oUF.Focus.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Focus PowerMissing.\nDefault: "..defaults.profile.oUF.Focus.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Focus.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Focus.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focus.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_focus.Power.valueMissing:SetPoint(db.oUF.Focus.Texts.PowerMissing.Point, oUF_LUI_focus, db.oUF.Focus.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Focus.Texts.PowerMissing.X), tonumber(db.oUF.Focus.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Focus.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Focus.Texts.PowerMissing.ColorClass = not db.oUF.Focus.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Focus.Texts.PowerMissing.ColorType = false
																			db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Focus PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Focus.Texts.PowerMissing.ColorType = not db.oUF.Focus.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Focus.Texts.PowerMissing.ColorClass = false
																			db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Focus PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Focus PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Focus.Texts.PowerMissing.ColorClass = false
																			db.oUF.Focus.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_focus.Power.valueMissing:SetTextColor(tonumber(db.oUF.Focus.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Focus.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Focus.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Focus PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Focus.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Focus.Texts.PowerMissing.IndividualColor.r, db.oUF.Focus.Texts.PowerMissing.IndividualColor.g, db.oUF.Focus.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Focus.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Focus.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Focus.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_focus.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									disabled = function() return not db.oUF.Focus.Enable end,
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Focus.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Focus.Portrait.Enable = not db.oUF.Focus.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Focus.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Focus.Portrait.Enable end,
											get = function() return db.oUF.Focus.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Focus.Portrait.Width = PortraitWidth
														oUF_LUI_focus.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Focus.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Focus.Portrait.Enable end,
											get = function() return db.oUF.Focus.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Focus.Portrait.Height = PortraitHeight
														oUF_LUI_focus.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Focus.Portrait.Enable end,
											get = function() return db.oUF.Focus.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Focus.Portrait.X = PortraitX
														oUF_LUI_focus.Portrait:SetPoint("TOPLEFT", oUF_LUI_focus.Health, "TOPLEFT", PortraitX, db.oUF.Focus.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Focus.Portrait.Enable end,
											get = function() return db.oUF.Focus.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Focus.Portrait.Y = PortraitY
														oUF_LUI_focus.Portrait:SetPoint("TOPLEFT", oUF_LUI_focus.Health, "TOPLEFT", db.oUF.Focus.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.Focus.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.Focus.Icons.Lootmaster.Enable = not db.oUF.Focus.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Focus.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.Focus.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_focus.MasterLooter:ClearAllPoints()
																oUF_LUI_focus.MasterLooter:SetPoint(db.oUF.Focus.Icons.Lootmaster.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.Focus.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Focus.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.Focus.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_focus.MasterLooter:ClearAllPoints()
																oUF_LUI_focus.MasterLooter:SetPoint(db.oUF.Focus.Icons.Lootmaster.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Lootmaster, tonumber(db.oUF.Focus.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.Focus.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_focus.MasterLooter:ClearAllPoints()
															oUF_LUI_focus.MasterLooter:SetPoint(db.oUF.Focus.Icons.Lootmaster.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Lootmaster.Point, tonumber(db.oUF.Focus.Icons.Lootmaster.X), tonumber(db.oUF.Focus.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Focus.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.Focus.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_focus.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_focus.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.MasterLooter:IsShown() then oUF_LUI_focus.MasterLooter:Hide() else oUF_LUI_focus.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.Focus.Icons.Leader.Enable = not db.oUF.Focus.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Leader.Enable end,
													get = function() return db.oUF.Focus.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.Focus.Icons.Leader.X = LeaderX
																oUF_LUI_focus.Leader:ClearAllPoints()
																oUF_LUI_focus.Leader:SetPoint(db.oUF.Focus.Icons.Leader.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.Focus.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Leader.Enable end,
													get = function() return db.oUF.Focus.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.Focus.Icons.Leader.Y = LeaderY
																oUF_LUI_focus.Leader:ClearAllPoints()
																oUF_LUI_focus.Leader:SetPoint(db.oUF.Focus.Icons.Leader.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Leader.Point, tonumber(db.oUF.Focus.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.Focus.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_focus.Leader:ClearAllPoints()
															oUF_LUI_focus.Leader:SetPoint(db.oUF.Focus.Icons.Leader.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Leader.Point, tonumber(db.oUF.Focus.Icons.Leader.X), tonumber(db.oUF.Focus.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.Leader.Enable end,
													get = function() return db.oUF.Focus.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.Focus.Icons.Leader.Size = LeaderSize
															oUF_LUI_focus.Leader:SetHeight(LeaderSize)
															oUF_LUI_focus.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.Leader:IsShown() then oUF_LUI_focus.Leader:Hide() else oUF_LUI_focus.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.Focus.Icons.Role.Enable = not db.oUF.Focus.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Role.Enable end,
													get = function() return db.oUF.Focus.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.Focus.Icons.Role.X = RoleX
																oUF_LUI_focus.LFDRole:ClearAllPoints()
																oUF_LUI_focus.LFDRole:SetPoint(db.oUF.Focus.Icons.Role.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.Focus.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Role.Enable end,
													get = function() return db.oUF.Focus.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.Focus.Icons.Role.Y = RoleY
																oUF_LUI_focus.LFDRole:ClearAllPoints()
																oUF_LUI_focus.LFDRole:SetPoint(db.oUF.Focus.Icons.Role.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Role.Point, tonumber(db.oUF.Focus.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.Focus.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_focus.LFDRole:ClearAllPoints()
															oUF_LUI_focus.LFDRole:SetPoint(db.oUF.Focus.Icons.Role.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Role.Point, tonumber(db.oUF.Focus.Icons.Role.X), tonumber(db.oUF.Focus.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.Role.Enable end,
													get = function() return db.oUF.Focus.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.Focus.Icons.Role.Size = RoleSize
															oUF_LUI_focus.LFDRole:SetHeight(RoleSize)
															oUF_LUI_focus.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.LFDRole:IsShown() then oUF_LUI_focus.LFDRole:Hide() else oUF_LUI_focus.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Focus.Icons.Raid.Enable = not db.oUF.Focus.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Raid.Enable end,
													get = function() return db.oUF.Focus.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.Focus.Icons.Raid.X = RaidX
																oUF_LUI_focus.RaidIcon:ClearAllPoints()
																oUF_LUI_focus.RaidIcon:SetPoint(db.oUF.Focus.Icons.Raid.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Focus.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Raid.Enable end,
													get = function() return db.oUF.Focus.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Focus.Icons.Raid.Y = RaidY
																oUF_LUI_focus.RaidIcon:ClearAllPoints()
																oUF_LUI_focus.RaidIcon:SetPoint(db.oUF.Focus.Icons.Raid.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Raid.Point, tonumber(db.oUF.Focus.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Focus.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_focus.RaidIcon:ClearAllPoints()
															oUF_LUI_focus.RaidIcon:SetPoint(db.oUF.Focus.Icons.Raid.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Raid.Point, tonumber(db.oUF.Focus.Icons.Raid.X), tonumber(db.oUF.Focus.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Focus.Icons.Raid.Enable end,
													get = function() return db.oUF.Focus.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Focus.Icons.Raid.Size = RaidSize
															oUF_LUI_focus.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_focus.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_focus.RaidIcon:IsShown() then oUF_LUI_focus.RaidIcon:Hide() else oUF_LUI_focus.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.Focus.Icons.Resting.Enable = not db.oUF.Focus.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Resting.Enable end,
													get = function() return db.oUF.Focus.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.Focus.Icons.Resting.X = RestingX
																oUF_LUI_focus.Resting:ClearAllPoints()
																oUF_LUI_focus.Resting:SetPoint(db.oUF.Focus.Icons.Resting.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.Focus.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Resting.Enable end,
													get = function() return db.oUF.Focus.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.Focus.Icons.Resting.Y = RestingY
																oUF_LUI_focus.Resting:ClearAllPoints()
																oUF_LUI_focus.Resting:SetPoint(db.oUF.Focus.Icons.Resting.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Resting.Point, tonumber(db.oUF.Focus.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.Focus.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_focus.Resting:ClearAllPoints()
															oUF_LUI_focus.Resting:SetPoint(db.oUF.Focus.Icons.Resting.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Resting.Point, tonumber(db.oUF.Focus.Icons.Resting.X), tonumber(db.oUF.Focus.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.Resting.Enable end,
													get = function() return db.oUF.Focus.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.Focus.Icons.Resting.Size = RestingSize
															oUF_LUI_focus.Resting:SetHeight(RestingSize)
															oUF_LUI_focus.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.Resting:IsShown() then oUF_LUI_focus.Resting:Hide() else oUF_LUI_focus.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.Focus.Icons.Combat.Enable = not db.oUF.Focus.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Combat.Enable end,
													get = function() return db.oUF.Focus.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.Focus.Icons.Combat.X = CombatX
																oUF_LUI_focus.Combat:ClearAllPoints()
																oUF_LUI_focus.Combat:SetPoint(db.oUF.Focus.Icons.Combat.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.Focus.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.Combat.Enable end,
													get = function() return db.oUF.Focus.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.Focus.Icons.Combat.Y = CombatY
																oUF_LUI_focus.Combat:ClearAllPoints()
																oUF_LUI_focus.Combat:SetPoint(db.oUF.Focus.Icons.Combat.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Combat.Point, tonumber(db.oUF.Focus.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.Focus.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_focus.Combat:ClearAllPoints()
															oUF_LUI_focus.Combat:SetPoint(db.oUF.Focus.Icons.Combat.Point, oUF_LUI_focus, db.oUF.Focus.Icons.Combat.Point, tonumber(db.oUF.Focus.Icons.Combat.X), tonumber(db.oUF.Focus.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.Combat.Enable end,
													get = function() return db.oUF.Focus.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.Focus.Icons.Combat.Size = CombatSize
															oUF_LUI_focus.Combat:SetHeight(CombatSize)
															oUF_LUI_focus.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.Focus.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.Combat:IsShown() then oUF_LUI_focus.Combat:Hide() else oUF_LUI_focus.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Focus.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.Focus.Icons.PvP.Enable = not db.oUF.Focus.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Focus.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.PvP.Enable end,
													get = function() return db.oUF.Focus.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.Focus.Icons.PvP.X = PvPX
																oUF_LUI_focus.PvP:ClearAllPoints()
																oUF_LUI_focus.PvP:SetPoint(db.oUF.Focus.Icons.PvP.Point, oUF_LUI_focus, db.oUF.Focus.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.Focus.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Focus.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.Focus.Icons.PvP.Enable end,
													get = function() return db.oUF.Focus.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.Focus.Icons.PvP.Y = PvPY
																oUF_LUI_focus.PvP:ClearAllPoints()
																oUF_LUI_focus.PvP:SetPoint(db.oUF.Focus.Icons.PvP.Point, oUF_LUI_focus, db.oUF.Focus.Icons.PvP.Point, tonumber(db.oUF.Focus.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.Focus.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Focus.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.Focus.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_focus.PvP:ClearAllPoints()
															oUF_LUI_focus.PvP:SetPoint(db.oUF.Focus.Icons.PvP.Point, oUF_LUI_focus, db.oUF.Focus.Icons.PvP.Point, tonumber(db.oUF.Focus.Icons.PvP.X), tonumber(db.oUF.Focus.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.Focus.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Focus.Icons.PvP.Enable end,
													get = function() return db.oUF.Focus.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.Focus.Icons.PvP.Size = PvPSize
															oUF_LUI_focus.PvP:SetHeight(PvPSize)
															oUF_LUI_focus.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Focus.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_focus.PvP:IsShown() then oUF_LUI_focus.PvP:Hide() else oUF_LUI_focus.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						FocusTarget = {
							name = "Focus Target",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 9,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Focus Target",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a FocusTarget Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Enable end,
													set = function(self,Enable)
																db.oUF.FocusTarget.Enable = not db.oUF.FocusTarget.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.FocusTarget.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												FocusTargetX = {
													name = "X Value",
													desc = "X Value for your FocusTarget Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.X,
													type = "input",
													get = function() return db.oUF.FocusTarget.X end,
													set = function(self,FocusTargetX)
																if FocusTargetX == nil or FocusTargetX == "" then
																	FocusTargetX = "0"
																end
																db.oUF.FocusTarget.X = FocusTargetX
																oUF_LUI_focustarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(FocusTargetX), tonumber(db.oUF.FocusTarget.Y))
															end,
													order = 2,
												},
												FocusTargetY = {
													name = "Y Value",
													desc = "Y Value for your FocusTarget Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Y,
													type = "input",
													get = function() return db.oUF.FocusTarget.Y end,
													set = function(self,FocusTargetY)
																if FocusTargetY == nil or FocusTargetY == "" then
																	FocusTargetY = "0"
																end
																db.oUF.FocusTarget.Y = FocusTargetY
																oUF_LUI_focustarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.FocusTarget.X), tonumber(FocusTargetY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											disabled = function() return not db.oUF.FocusTarget.Enable end,
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												FocusTargetHeight = {
													name = "Height",
													desc = "Decide the Height of your FocusTarget Frame.\n\nDefault: "..defaults.profile.oUF.FocusTarget.Height,
													type = "input",
													get = function() return db.oUF.FocusTarget.Height end,
													set = function(self,FocusTargetHeight)
																if FocusTargetHeight == nil or FocusTargetHeight == "" then
																	FocusTargetHeight = "0"
																end
																db.oUF.FocusTarget.Height = FocusTargetHeight
																oUF_LUI_focustarget:SetHeight(tonumber(FocusTargetHeight))
															end,
													order = 2,
												},
												FocusTargetWidth = {
													name = "Width",
													desc = "Decide the Width of your FocusTarget Frame.\n\nDefault: "..defaults.profile.oUF.FocusTarget.Width,
													type = "input",
													get = function() return db.oUF.FocusTarget.Width end,
													set = function(self,FocusTargetWidth)
																if FocusTargetWidth == nil or FocusTargetWidth == "" then
																	FocusTargetWidth = "0"
																end
																db.oUF.FocusTarget.Width = FocusTargetWidth
																oUF_LUI_focustarget:SetWidth(tonumber(FocusTargetWidth))
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.FocusTarget.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.FocusTarget.Backdrop.Color.r, db.oUF.FocusTarget.Backdrop.Color.g, db.oUF.FocusTarget.Backdrop.Color.b, db.oUF.FocusTarget.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.FocusTarget.Backdrop.Color.r = r
															db.oUF.FocusTarget.Backdrop.Color.g = g
															db.oUF.FocusTarget.Backdrop.Color.b = b
															db.oUF.FocusTarget.Backdrop.Color.a = a

															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.FocusTarget.Border.Color.r, db.oUF.FocusTarget.Border.Color.g, db.oUF.FocusTarget.Border.Color.b, db.oUF.FocusTarget.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.FocusTarget.Border.Color.r = r
															db.oUF.FocusTarget.Border.Color.g = g
															db.oUF.FocusTarget.Border.Color.b = b
															db.oUF.FocusTarget.Border.Color.a = a
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.FocusTarget.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.FocusTarget.Backdrop.Texture = BackdropTexture
															oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.FocusTarget.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.FocusTarget.Border.EdgeFile = BorderTexture
															oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.FocusTarget.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.FocusTarget.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.FocusTarget.Border.EdgeSize = BorderSize
															oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.FocusTarget.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.FocusTarget.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_focustarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focustarget, "TOPLEFT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Left), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Top))
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focustarget, "BOTTOMRIGHT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Right), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.FocusTarget.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.FocusTarget.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_focustarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focustarget, "TOPLEFT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Left), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Top))
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focustarget, "BOTTOMRIGHT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Right), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.FocusTarget.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.FocusTarget.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_focustarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focustarget, "TOPLEFT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Left), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Top))
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focustarget, "BOTTOMRIGHT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Right), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.FocusTarget.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.FocusTarget.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_focustarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_focustarget, "TOPLEFT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Left), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Top))
														oUF_LUI_focustarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_focustarget, "BOTTOMRIGHT", tonumber(db.oUF.FocusTarget.Backdrop.Padding.Right), tonumber(db.oUF.FocusTarget.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.FocusTarget.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.FocusTarget.Border.Insets.Left = InsetLeft
														oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.FocusTarget.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.FocusTarget.Border.Insets.Right = InsetRight
														oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.FocusTarget.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.FocusTarget.Border.Insets.Top = InsetTop
														oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.FocusTarget.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.FocusTarget.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.FocusTarget.Border.Insets.Bottom = InsetBottom
														oUF_LUI_focustarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.FocusTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.FocusTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.FocusTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.FocusTarget.Border.Insets.Left), right = tonumber(db.oUF.FocusTarget.Border.Insets.Right), top = tonumber(db.oUF.FocusTarget.Border.Insets.Top), bottom = tonumber(db.oUF.FocusTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.FocusTarget.Backdrop.Color.r), tonumber(db.oUF.FocusTarget.Backdrop.Color.g), tonumber(db.oUF.FocusTarget.Backdrop.Color.b), tonumber(db.oUF.FocusTarget.Backdrop.Color.a))
															oUF_LUI_focustarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.FocusTarget.Border.Color.r), tonumber(db.oUF.FocusTarget.Border.Color.g), tonumber(db.oUF.FocusTarget.Border.Color.b), tonumber(db.oUF.FocusTarget.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.FocusTarget.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.FocusTarget.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your FocusTarget Health.\n\nDefault: "..defaults.profile.oUF.FocusTarget.Health.Height,
															type = "input",
															get = function() return db.oUF.FocusTarget.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.FocusTarget.Health.Height = Height
																		oUF_LUI_focustarget.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Health.Padding,
															type = "input",
															get = function() return db.oUF.FocusTarget.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.FocusTarget.Health.Padding = Padding
																		oUF_LUI_focustarget.Health:ClearAllPoints()
																		oUF_LUI_focustarget.Health:SetPoint("TOPLEFT", oUF_LUI_focustarget, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_focustarget.Health:SetPoint("TOPRIGHT", oUF_LUI_focustarget, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.FocusTarget.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.FocusTarget.Health.Smooth = not db.oUF.FocusTarget.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.FocusTarget.Health.ColorClass = not db.oUF.FocusTarget.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.FocusTarget.Health.ColorGradient = false
																			db.oUF.FocusTarget.Health.IndividualColor.Enable = false
																			
																			print("FocusTarget Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.FocusTarget.Health.ColorGradient = not db.oUF.FocusTarget.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.FocusTarget.Health.ColorClass = false
																			db.oUF.FocusTarget.Health.IndividualColor.Enable = false
																			
																			print("FocusTarget Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.FocusTarget.Health.IndividualColor.Enable = not db.oUF.FocusTarget.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.FocusTarget.Health.ColorClass = false
																			db.oUF.FocusTarget.Health.ColorGradient = false
																			
																			oUF_LUI_focustarget.Health:SetStatusBarColor(db.oUF.FocusTarget.Health.IndividualColor.r, db.oUF.FocusTarget.Health.IndividualColor.g, db.oUF.FocusTarget.Health.IndividualColor.b)
																			oUF_LUI_focustarget.Health.bg:SetVertexColor(db.oUF.FocusTarget.Health.IndividualColor.r*tonumber(db.oUF.FocusTarget.Health.BGMultiplier), db.oUF.FocusTarget.Health.IndividualColor.g*tonumber(db.oUF.FocusTarget.Health.BGMultiplier), db.oUF.FocusTarget.Health.IndividualColor.b*tonumber(db.oUF.FocusTarget.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Health.IndividualColor.r, db.oUF.FocusTarget.Health.IndividualColor.g, db.oUF.FocusTarget.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Health.IndividualColor.r = r
																	db.oUF.FocusTarget.Health.IndividualColor.g = g
																	db.oUF.FocusTarget.Health.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_focustarget.Health.bg:SetVertexColor(r*tonumber(db.oUF.FocusTarget.Health.BGMultiplier), g*tonumber(db.oUF.FocusTarget.Health.BGMultiplier), b*tonumber(db.oUF.FocusTarget.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.FocusTarget.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.FocusTarget.Health.Texture = HealthTex
																	oUF_LUI_focustarget.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.FocusTarget.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.FocusTarget.Health.TextureBG = HealthTexBG
																	oUF_LUI_focustarget.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.FocusTarget.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.FocusTarget.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.FocusTarget.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_focustarget.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.FocusTarget.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.FocusTarget.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.FocusTarget.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_focustarget.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.FocusTarget.Power.Enable = not db.oUF.FocusTarget.Power.Enable
																if EnablePower == true then
																	oUF_LUI_focustarget.Power:Show()
																else
																	oUF_LUI_focustarget.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your FocusTarget Power.\n\nDefault: "..defaults.profile.oUF.FocusTarget.Power.Height,
															type = "input",
															get = function() return db.oUF.FocusTarget.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.FocusTarget.Power.Height = Height
																		oUF_LUI_focustarget.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Power.Padding,
															type = "input",
															get = function() return db.oUF.FocusTarget.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.FocusTarget.Power.Padding = Padding
																		oUF_LUI_focustarget.Power:ClearAllPoints()
																		oUF_LUI_focustarget.Power:SetPoint("TOPLEFT", oUF_LUI_focustarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_focustarget.Power:SetPoint("TOPRIGHT", oUF_LUI_focustarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.FocusTarget.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.FocusTarget.Power.Smooth = not db.oUF.FocusTarget.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.FocusTarget.Power.ColorClass = not db.oUF.FocusTarget.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.FocusTarget.Power.ColorType = false
																			db.oUF.FocusTarget.Power.IndividualColor.Enable = false
																			
																			print("FocusTarget Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.FocusTarget.Power.ColorType = not db.oUF.FocusTarget.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.FocusTarget.Power.ColorClass = false
																			db.oUF.FocusTarget.Power.IndividualColor.Enable = false
																			
																			print("FocusTarget Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.FocusTarget.Power.IndividualColor.Enable = not db.oUF.FocusTarget.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.FocusTarget.Power.ColorType = false
																			db.oUF.FocusTarget.Power.ColorClass = false
																			
																			oUF_LUI_focustarget.Power:SetStatusBarColor(db.oUF.FocusTarget.Power.IndividualColor.r, db.oUF.FocusTarget.Power.IndividualColor.g, db.oUF.FocusTarget.Power.IndividualColor.b)
																			oUF_LUI_focustarget.Power.bg:SetVertexColor(db.oUF.FocusTarget.Power.IndividualColor.r*tonumber(db.oUF.FocusTarget.Power.BGMultiplier), db.oUF.FocusTarget.Power.IndividualColor.g*tonumber(db.oUF.FocusTarget.Power.BGMultiplier), db.oUF.FocusTarget.Power.IndividualColor.b*tonumber(db.oUF.FocusTarget.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Power.IndividualColor.r, db.oUF.FocusTarget.Power.IndividualColor.g, db.oUF.FocusTarget.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Power.IndividualColor.r = r
																	db.oUF.FocusTarget.Power.IndividualColor.g = g
																	db.oUF.FocusTarget.Power.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_focustarget.Power.bg:SetVertexColor(r*tonumber(db.oUF.FocusTarget.Power.BGMultiplier), g*tonumber(db.oUF.FocusTarget.Power.BGMultiplier), b*tonumber(db.oUF.FocusTarget.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.FocusTarget.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.FocusTarget.Power.Texture = PowerTex
																	oUF_LUI_focustarget.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.FocusTarget.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.FocusTarget.Power.TextureBG = PowerTexBG
																	oUF_LUI_focustarget.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.FocusTarget.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.FocusTarget.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.FocusTarget.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_focustarget.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.FocusTarget.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.FocusTarget.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.FocusTarget.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_focustarget.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.FocusTarget.Full.Enable = not db.oUF.FocusTarget.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_focustarget.Full:Show()
																else
																	oUF_LUI_focustarget.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.FocusTarget.Full.Height,
															type = "input",
															get = function() return db.oUF.FocusTarget.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.FocusTarget.Full.Height = Height
																		oUF_LUI_focustarget.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Full.Padding,
															type = "input",
															get = function() return db.oUF.FocusTarget.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.FocusTarget.Full.Padding = Padding
																	oUF_LUI_focustarget.Full:ClearAllPoints()
																	oUF_LUI_focustarget.Full:SetPoint("TOPLEFT", oUF_LUI_focustarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_focustarget.Full:SetPoint("TOPRIGHT", oUF_LUI_focustarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.FocusTarget.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.FocusTarget.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.FocusTarget.Full.Texture = FullTex
																	oUF_LUI_focustarget.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.FocusTarget.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.FocusTarget.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.FocusTarget.Full.Alpha = FullAlpha
																	oUF_LUI_focustarget.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.FocusTarget.Full.Color.r, db.oUF.FocusTarget.Full.Color.g, db.oUF.FocusTarget.Full.Color.b, db.oUF.FocusTarget.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.FocusTarget.Full.Color.r = r
																	db.oUF.FocusTarget.Full.Color.g = g
																	db.oUF.FocusTarget.Full.Color.b = b
																	db.oUF.FocusTarget.Full.Color.a = a
																	
																	oUF_LUI_focustarget.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.FocusTarget.Enable end,
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.FocusTarget.Texts.Name.Enable = not db.oUF.FocusTarget.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_focustarget.Info:Show()
																else
																	oUF_LUI_focustarget.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget Name Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.Name.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.Name.Size = FontSize
																	oUF_LUI_focustarget.Info:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Name.Font),db.oUF.FocusTarget.Texts.Name.Size,db.oUF.FocusTarget.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget Name!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.Name.Font = Font
																	oUF_LUI_focustarget.Info:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Name.Font),db.oUF.FocusTarget.Texts.Name.Size,db.oUF.FocusTarget.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget Name.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Info:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Name.Font),db.oUF.FocusTarget.Texts.Name.Size,db.oUF.FocusTarget.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your FocusTarget Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.FocusTarget.Texts.Name.X = NameX
																		oUF_LUI_focustarget.Info:ClearAllPoints()
																		oUF_LUI_focustarget.Info:SetPoint(db.oUF.FocusTarget.Texts.Name.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Name.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Name.X), tonumber(db.oUF.FocusTarget.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.FocusTarget.Texts.Name.Y = NameY
																		oUF_LUI_focustarget.Info:ClearAllPoints()
																		oUF_LUI_focustarget.Info:SetPoint(db.oUF.FocusTarget.Texts.Name.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Name.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Name.X), tonumber(db.oUF.FocusTarget.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget Name.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.Name.Point = positions[Point]
																	oUF_LUI_focustarget.Info:ClearAllPoints()
																	oUF_LUI_focustarget.Info:SetPoint(db.oUF.FocusTarget.Texts.Name.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Name.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Name.X), tonumber(db.oUF.FocusTarget.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget Name.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Info:ClearAllPoints()
																	oUF_LUI_focustarget.Info:SetPoint(db.oUF.FocusTarget.Texts.Name.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Name.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Name.X), tonumber(db.oUF.FocusTarget.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your FocusTarget Name.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Format,
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.FocusTarget.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.FocusTarget.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your FocusTarget Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Name.Length,
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.FocusTarget.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.FocusTarget.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the FocusTarget Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.FocusTarget.Texts.Name.ColorNameByClass = not db.oUF.FocusTarget.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the FocusTarget Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.FocusTarget.Texts.Name.ColorClassByClass = not db.oUF.FocusTarget.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.FocusTarget.Texts.Name.ColorLevelByDifficulty = not db.oUF.FocusTarget.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.FocusTarget.Texts.Name.ShowClassification = not db.oUF.FocusTarget.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.FocusTarget.Texts.Name.ShowClassification end,
															get = function() return db.oUF.FocusTarget.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.FocusTarget.Texts.Name.ShortClassification = not db.oUF.FocusTarget.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.Health.Enable = not db.oUF.FocusTarget.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_focustarget.Health.value:Show()
															else
																oUF_LUI_focustarget.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget Health Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.Health.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.Health.Size = FontSize
																	oUF_LUI_focustarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Health.Font),db.oUF.FocusTarget.Texts.Health.Size,db.oUF.FocusTarget.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your FocusTarget Health.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.Format,
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.FocusTarget.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.FocusTarget.Texts.Health.Format = valueFormat[Format]
																	print("FocusTarget Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget Health!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.Health.Font = Font
																	oUF_LUI_focustarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Health.Font),db.oUF.FocusTarget.Texts.Health.Size,db.oUF.FocusTarget.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget Health.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Health.Font),db.oUF.FocusTarget.Texts.Health.Size,db.oUF.FocusTarget.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your FocusTarget Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.FocusTarget.Texts.Health.X = HealthX
																		oUF_LUI_focustarget.Health.value:ClearAllPoints()
																		oUF_LUI_focustarget.Health.value:SetPoint(db.oUF.FocusTarget.Texts.Health.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Health.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Health.X), tonumber(db.oUF.FocusTarget.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.FocusTarget.Texts.Health.Y = HealthY
																		oUF_LUI_focustarget.Health.value:ClearAllPoints()
																		oUF_LUI_focustarget.Health.value:SetPoint(db.oUF.FocusTarget.Texts.Health.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Health.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Health.X), tonumber(db.oUF.FocusTarget.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget Health.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.Health.Point = positions[Point]
																	oUF_LUI_focustarget.Health.value:ClearAllPoints()
																	oUF_LUI_focustarget.Health.value:SetPoint(db.oUF.FocusTarget.Texts.Health.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Health.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Health.X), tonumber(db.oUF.FocusTarget.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget Health.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Health.value:ClearAllPoints()
																	oUF_LUI_focustarget.Health.value:SetPoint(db.oUF.FocusTarget.Texts.Health.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Health.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Health.X), tonumber(db.oUF.FocusTarget.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.Health.ColorClass = not db.oUF.FocusTarget.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.Health.ColorGradient = false
																			db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable = false
																			
																			print("FocusTarget Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.FocusTarget.Texts.Health.ColorGradient = not db.oUF.FocusTarget.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.FocusTarget.Texts.Health.ColorClass = false
																			db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable = false
																			
																			print("FocusTarget Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.Health.ColorClass = false
																			db.oUF.FocusTarget.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_focustarget.Health.value:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.Health.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.Health.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.Health.IndividualColor.r, db.oUF.FocusTarget.Texts.Health.IndividualColor.g, db.oUF.FocusTarget.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.Health.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.Health.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.FocusTarget.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.FocusTarget.Texts.Health.ShowDead = not db.oUF.FocusTarget.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.Power.Enable = not db.oUF.FocusTarget.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_focustarget.Power.value:Show()
															else
																oUF_LUI_focustarget.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget Power Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.Power.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.Power.Size = FontSize
																	oUF_LUI_focustarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Power.Font),db.oUF.FocusTarget.Texts.Power.Size,db.oUF.FocusTarget.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your FocusTarget Power.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.Format,
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.FocusTarget.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.FocusTarget.Texts.Power.Format = valueFormat[Format]
																	print("FocusTarget Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget Power!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.Power.Font = Font
																	oUF_LUI_focustarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Power.Font),db.oUF.FocusTarget.Texts.Power.Size,db.oUF.FocusTarget.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget Power.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.Power.Font),db.oUF.FocusTarget.Texts.Power.Size,db.oUF.FocusTarget.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your FocusTarget Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.FocusTarget.Texts.Power.X = PowerX
																		oUF_LUI_focustarget.Power.value:ClearAllPoints()
																		oUF_LUI_focustarget.Power.value:SetPoint(db.oUF.FocusTarget.Texts.Power.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Power.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Power.X), tonumber(db.oUF.FocusTarget.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.FocusTarget.Texts.Power.Y = PowerY
																		oUF_LUI_focustarget.Power.value:ClearAllPoints()
																		oUF_LUI_focustarget.Power.value:SetPoint(db.oUF.FocusTarget.Texts.Power.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Power.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Power.X), tonumber(db.oUF.FocusTarget.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget Power.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.Power.Point = positions[Point]
																	oUF_LUI_focustarget.Power.value:ClearAllPoints()
																	oUF_LUI_focustarget.Power.value:SetPoint(db.oUF.FocusTarget.Texts.Power.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Power.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Power.X), tonumber(db.oUF.FocusTarget.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget Power.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Power.value:ClearAllPoints()
																	oUF_LUI_focustarget.Power.value:SetPoint(db.oUF.FocusTarget.Texts.Power.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.Power.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.Power.X), tonumber(db.oUF.FocusTarget.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.Power.ColorClass = not db.oUF.FocusTarget.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.Power.ColorType = false
																			db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable = false
																			
																			print("FocusTarget Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.FocusTarget.Texts.Power.ColorType = not db.oUF.FocusTarget.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.FocusTarget.Texts.Power.ColorClass = false
																			db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable = false
																			
																			print("FocusTarget Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.Power.ColorClass = false
																			db.oUF.FocusTarget.Texts.Power.ColorType = false
																			
																			oUF_LUI_focustarget.Power.value:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.Power.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.Power.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.Power.IndividualColor.r, db.oUF.FocusTarget.Texts.Power.IndividualColor.g, db.oUF.FocusTarget.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.Power.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.Power.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.HealthPercent.Enable = not db.oUF.FocusTarget.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_focustarget.Health.valuePercent:Show()
															else
																oUF_LUI_focustarget.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_focustarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthPercent.Font),db.oUF.FocusTarget.Texts.HealthPercent.Size,db.oUF.FocusTarget.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show FocusTarget HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.FocusTarget.Texts.HealthPercent.ShowAlways = not db.oUF.FocusTarget.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget HealthPercent!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.HealthPercent.Font = Font
																	oUF_LUI_focustarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthPercent.Font),db.oUF.FocusTarget.Texts.HealthPercent.Size,db.oUF.FocusTarget.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget HealthPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthPercent.Font),db.oUF.FocusTarget.Texts.HealthPercent.Size,db.oUF.FocusTarget.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your FocusTarget HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.FocusTarget.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_focustarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_focustarget.Health.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.HealthPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthPercent.X), tonumber(db.oUF.FocusTarget.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.FocusTarget.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_focustarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_focustarget.Health.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.HealthPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthPercent.X), tonumber(db.oUF.FocusTarget.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget HealthPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_focustarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_focustarget.Health.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.HealthPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthPercent.X), tonumber(db.oUF.FocusTarget.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget HealthPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_focustarget.Health.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.HealthPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthPercent.X), tonumber(db.oUF.FocusTarget.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.HealthPercent.ColorClass = not db.oUF.FocusTarget.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.HealthPercent.ColorGradient = false
																			db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("FocusTarget HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.FocusTarget.Texts.HealthPercent.ColorGradient = not db.oUF.FocusTarget.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.FocusTarget.Texts.HealthPercent.ColorClass = false
																			db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("FocusTarget HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.HealthPercent.ColorClass = false
																			db.oUF.FocusTarget.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_focustarget.Health.valuePercent:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.r, db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.g, db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.FocusTarget.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.FocusTarget.Texts.HealthPercent.ShowDead = not db.oUF.FocusTarget.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.PowerPercent.Enable = not db.oUF.FocusTarget.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_focustarget.Power.valuePercent:Show()
															else
																oUF_LUI_focustarget.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_focustarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerPercent.Font),db.oUF.FocusTarget.Texts.PowerPercent.Size,db.oUF.FocusTarget.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show FocusTarget PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.FocusTarget.Texts.PowerPercent.ShowAlways = not db.oUF.FocusTarget.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget PowerPercent!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.PowerPercent.Font = Font
																	oUF_LUI_focustarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerPercent.Font),db.oUF.FocusTarget.Texts.PowerPercent.Size,db.oUF.FocusTarget.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget PowerPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerPercent.Font),db.oUF.FocusTarget.Texts.PowerPercent.Size,db.oUF.FocusTarget.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your FocusTarget PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.FocusTarget.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_focustarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_focustarget.Power.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.PowerPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerPercent.X), tonumber(db.oUF.FocusTarget.Texts.PowerPercent.Y))
																	end,
															order = 5,

														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.FocusTarget.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_focustarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_focustarget.Power.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.PowerPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerPercent.X), tonumber(db.oUF.FocusTarget.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget PowerPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_focustarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_focustarget.Power.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.PowerPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerPercent.X), tonumber(db.oUF.FocusTarget.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget PowerPercent.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_focustarget.Power.valuePercent:SetPoint(db.oUF.FocusTarget.Texts.PowerPercent.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerPercent.X), tonumber(db.oUF.FocusTarget.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.PowerPercent.ColorClass = not db.oUF.FocusTarget.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.PowerPercent.ColorType = false
																			db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("FocusTarget PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.FocusTarget.Texts.PowerPercent.ColorType = not db.oUF.FocusTarget.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.FocusTarget.Texts.PowerPercent.ColorClass = false
																			db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("FocusTarget PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.PowerPercent.ColorClass = false
																			db.oUF.FocusTarget.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_focustarget.Power.valuePercent:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.r, db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.g, db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget HealthMissing or not.",
													type = "toggle",

													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.HealthMissing.Enable = not db.oUF.FocusTarget.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_focustarget.Health.valueMissing:Show()
															else
																oUF_LUI_focustarget.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_focustarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthMissing.Font),db.oUF.FocusTarget.Texts.HealthMissing.Size,db.oUF.FocusTarget.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show FocusTarget HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.FocusTarget.Texts.HealthMissing.ShowAlways = not db.oUF.FocusTarget.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.FocusTarget.Texts.HealthMissing.ShortValue = not db.oUF.FocusTarget.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget HealthMissing!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.HealthMissing.Font = Font
																	oUF_LUI_focustarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthMissing.Font),db.oUF.FocusTarget.Texts.HealthMissing.Size,db.oUF.FocusTarget.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget HealthMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.HealthMissing.Font),db.oUF.FocusTarget.Texts.HealthMissing.Size,db.oUF.FocusTarget.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your FocusTarget HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.FocusTarget.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_focustarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_focustarget.Health.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.HealthMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthMissing.X), tonumber(db.oUF.FocusTarget.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.FocusTarget.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_focustarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_focustarget.Health.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.HealthMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthMissing.X), tonumber(db.oUF.FocusTarget.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget HealthMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_focustarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_focustarget.Health.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.HealthMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthMissing.X), tonumber(db.oUF.FocusTarget.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget HealthMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_focustarget.Health.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.HealthMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.HealthMissing.X), tonumber(db.oUF.FocusTarget.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.HealthMissing.ColorClass = not db.oUF.FocusTarget.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.HealthMissing.ColorGradient = false
																			db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("FocusTarget HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.FocusTarget.Texts.HealthMissing.ColorGradient = not db.oUF.FocusTarget.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.FocusTarget.Texts.HealthMissing.ColorClass = false
																			db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("FocusTarget HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.HealthMissing.ColorClass = false
																			db.oUF.FocusTarget.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_focustarget.Health.valueMissing:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.r, db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.g, db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the FocusTarget PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.FocusTarget.Texts.PowerMissing.Enable = not db.oUF.FocusTarget.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_focustarget.Power.valueMissing:Show()
															else
																oUF_LUI_focustarget.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your FocusTarget PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.FocusTarget.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_focustarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerMissing.Font),db.oUF.FocusTarget.Texts.PowerMissing.Size,db.oUF.FocusTarget.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",

															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show FocusTarget PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.FocusTarget.Texts.PowerMissing.ShowAlways = not db.oUF.FocusTarget.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.FocusTarget.Texts.PowerMissing.ShortValue = not db.oUF.FocusTarget.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for FocusTarget PowerMissing!\n\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.FocusTarget.Texts.PowerMissing.Font = Font
																	oUF_LUI_focustarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerMissing.Font),db.oUF.FocusTarget.Texts.PowerMissing.Size,db.oUF.FocusTarget.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your FocusTarget PowerMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.FocusTarget.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.FocusTarget.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_focustarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.FocusTarget.Texts.PowerMissing.Font),db.oUF.FocusTarget.Texts.PowerMissing.Size,db.oUF.FocusTarget.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your FocusTarget PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.FocusTarget.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_focustarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_focustarget.Power.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.PowerMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerMissing.X), tonumber(db.oUF.FocusTarget.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your FocusTarget PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.FocusTarget.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_focustarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_focustarget.Power.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.PowerMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerMissing.X), tonumber(db.oUF.FocusTarget.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your FocusTarget PowerMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.FocusTarget.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_focustarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_focustarget.Power.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.PowerMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerMissing.X), tonumber(db.oUF.FocusTarget.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your FocusTarget PowerMissing.\nDefault: "..defaults.profile.oUF.FocusTarget.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_focustarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_focustarget.Power.valueMissing:SetPoint(db.oUF.FocusTarget.Texts.PowerMissing.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.FocusTarget.Texts.PowerMissing.X), tonumber(db.oUF.FocusTarget.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.FocusTarget.Texts.PowerMissing.ColorClass = not db.oUF.FocusTarget.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.FocusTarget.Texts.PowerMissing.ColorType = false
																			db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("FocusTarget PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.FocusTarget.Texts.PowerMissing.ColorType = not db.oUF.FocusTarget.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.FocusTarget.Texts.PowerMissing.ColorClass = false
																			db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("FocusTarget PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual FocusTarget PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.FocusTarget.Texts.PowerMissing.ColorClass = false
																			db.oUF.FocusTarget.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_focustarget.Power.valueMissing:SetTextColor(tonumber(db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual FocusTarget PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.r, db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.g, db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.FocusTarget.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_focustarget.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									disabled = function() return not db.oUF.FocusTarget.Enable end,
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.FocusTarget.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.FocusTarget.Portrait.Enable = not db.oUF.FocusTarget.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.FocusTarget.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.FocusTarget.Portrait.Enable end,
											get = function() return db.oUF.FocusTarget.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.FocusTarget.Portrait.Width = PortraitWidth
														oUF_LUI_focustarget.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.FocusTarget.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.FocusTarget.Portrait.Enable end,
											get = function() return db.oUF.FocusTarget.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.FocusTarget.Portrait.Height = PortraitHeight
														oUF_LUI_focustarget.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.FocusTarget.Portrait.Enable end,
											get = function() return db.oUF.FocusTarget.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.FocusTarget.Portrait.X = PortraitX
														oUF_LUI_focustarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_focustarget.Health, "TOPLEFT", PortraitX, db.oUF.FocusTarget.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.FocusTarget.Portrait.Enable end,
											get = function() return db.oUF.FocusTarget.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.FocusTarget.Portrait.Y = PortraitY
														oUF_LUI_focustarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_focustarget.Health, "TOPLEFT", db.oUF.FocusTarget.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.FocusTarget.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.FocusTarget.Icons.Lootmaster.Enable = not db.oUF.FocusTarget.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.FocusTarget.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_focustarget.MasterLooter:ClearAllPoints()
																oUF_LUI_focustarget.MasterLooter:SetPoint(db.oUF.FocusTarget.Icons.Lootmaster.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.FocusTarget.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.FocusTarget.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_focustarget.MasterLooter:ClearAllPoints()
																oUF_LUI_focustarget.MasterLooter:SetPoint(db.oUF.FocusTarget.Icons.Lootmaster.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Lootmaster, tonumber(db.oUF.FocusTarget.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.FocusTarget.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_focustarget.MasterLooter:ClearAllPoints()
															oUF_LUI_focustarget.MasterLooter:SetPoint(db.oUF.FocusTarget.Icons.Lootmaster.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Lootmaster.Point, tonumber(db.oUF.FocusTarget.Icons.Lootmaster.X), tonumber(db.oUF.FocusTarget.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.FocusTarget.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_focustarget.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_focustarget.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.MasterLooter:IsShown() then oUF_LUI_focustarget.MasterLooter:Hide() else oUF_LUI_focustarget.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.FocusTarget.Icons.Leader.Enable = not db.oUF.FocusTarget.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.FocusTarget.Icons.Leader.X = LeaderX
																oUF_LUI_focustarget.Leader:ClearAllPoints()
																oUF_LUI_focustarget.Leader:SetPoint(db.oUF.FocusTarget.Icons.Leader.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.FocusTarget.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.FocusTarget.Icons.Leader.Y = LeaderY
																oUF_LUI_focustarget.Leader:ClearAllPoints()
																oUF_LUI_focustarget.Leader:SetPoint(db.oUF.FocusTarget.Icons.Leader.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Leader.Point, tonumber(db.oUF.FocusTarget.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.FocusTarget.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_focustarget.Leader:ClearAllPoints()
															oUF_LUI_focustarget.Leader:SetPoint(db.oUF.FocusTarget.Icons.Leader.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Leader.Point, tonumber(db.oUF.FocusTarget.Icons.Leader.X), tonumber(db.oUF.FocusTarget.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.FocusTarget.Icons.Leader.Size = LeaderSize
															oUF_LUI_focustarget.Leader:SetHeight(LeaderSize)
															oUF_LUI_focustarget.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.Leader:IsShown() then oUF_LUI_focustarget.Leader:Hide() else oUF_LUI_focustarget.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.FocusTarget.Icons.Role.Enable = not db.oUF.FocusTarget.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Role.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.FocusTarget.Icons.Role.X = RoleX
																oUF_LUI_focustarget.LFDRole:ClearAllPoints()
																oUF_LUI_focustarget.LFDRole:SetPoint(db.oUF.FocusTarget.Icons.Role.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.FocusTarget.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Role.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.FocusTarget.Icons.Role.Y = RoleY
																oUF_LUI_focustarget.LFDRole:ClearAllPoints()
																oUF_LUI_focustarget.LFDRole:SetPoint(db.oUF.FocusTarget.Icons.Role.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Role.Point, tonumber(db.oUF.FocusTarget.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.FocusTarget.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_focustarget.LFDRole:ClearAllPoints()
															oUF_LUI_focustarget.LFDRole:SetPoint(db.oUF.FocusTarget.Icons.Role.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Role.Point, tonumber(db.oUF.FocusTarget.Icons.Role.X), tonumber(db.oUF.FocusTarget.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.Role.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.FocusTarget.Icons.Role.Size = RoleSize
															oUF_LUI_focustarget.LFDRole:SetHeight(RoleSize)
															oUF_LUI_focustarget.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.LFDRole:IsShown() then oUF_LUI_focustarget.LFDRole:Hide() else oUF_LUI_focustarget.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.FocusTarget.Icons.Raid.Enable = not db.oUF.FocusTarget.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.FocusTarget.Icons.Raid.X = RaidX
																oUF_LUI_focustarget.RaidIcon:ClearAllPoints()
																oUF_LUI_focustarget.RaidIcon:SetPoint(db.oUF.FocusTarget.Icons.Raid.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.FocusTarget.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.FocusTarget.Icons.Raid.Y = RaidY
																oUF_LUI_focustarget.RaidIcon:ClearAllPoints()
																oUF_LUI_focustarget.RaidIcon:SetPoint(db.oUF.FocusTarget.Icons.Raid.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Raid.Point, tonumber(db.oUF.FocusTarget.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.FocusTarget.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_focustarget.RaidIcon:ClearAllPoints()
															oUF_LUI_focustarget.RaidIcon:SetPoint(db.oUF.FocusTarget.Icons.Raid.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Raid.Point, tonumber(db.oUF.FocusTarget.Icons.Raid.X), tonumber(db.oUF.FocusTarget.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.FocusTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.FocusTarget.Icons.Raid.Size = RaidSize
															oUF_LUI_focustarget.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_focustarget.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.RaidIcon:IsShown() then oUF_LUI_focustarget.RaidIcon:Hide() else oUF_LUI_focustarget.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.FocusTarget.Icons.Resting.Enable = not db.oUF.FocusTarget.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.FocusTarget.Icons.Resting.X = RestingX
																oUF_LUI_focustarget.Resting:ClearAllPoints()
																oUF_LUI_focustarget.Resting:SetPoint(db.oUF.FocusTarget.Icons.Resting.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.FocusTarget.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.FocusTarget.Icons.Resting.Y = RestingY
																oUF_LUI_focustarget.Resting:ClearAllPoints()
																oUF_LUI_focustarget.Resting:SetPoint(db.oUF.FocusTarget.Icons.Resting.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Resting.Point, tonumber(db.oUF.FocusTarget.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.FocusTarget.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_focustarget.Resting:ClearAllPoints()
															oUF_LUI_focustarget.Resting:SetPoint(db.oUF.FocusTarget.Icons.Resting.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Resting.Point, tonumber(db.oUF.FocusTarget.Icons.Resting.X), tonumber(db.oUF.FocusTarget.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.FocusTarget.Icons.Resting.Size = RestingSize
															oUF_LUI_focustarget.Resting:SetHeight(RestingSize)
															oUF_LUI_focustarget.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.Resting:IsShown() then oUF_LUI_focustarget.Resting:Hide() else oUF_LUI_focustarget.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.FocusTarget.Icons.Combat.Enable = not db.oUF.FocusTarget.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.FocusTarget.Icons.Combat.X = CombatX
																oUF_LUI_focustarget.Combat:ClearAllPoints()
																oUF_LUI_focustarget.Combat:SetPoint(db.oUF.FocusTarget.Icons.Combat.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.FocusTarget.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.FocusTarget.Icons.Combat.Y = CombatY
																oUF_LUI_focustarget.Combat:ClearAllPoints()
																oUF_LUI_focustarget.Combat:SetPoint(db.oUF.FocusTarget.Icons.Combat.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Combat.Point, tonumber(db.oUF.FocusTarget.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.FocusTarget.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_focustarget.Combat:ClearAllPoints()
															oUF_LUI_focustarget.Combat:SetPoint(db.oUF.FocusTarget.Icons.Combat.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.Combat.Point, tonumber(db.oUF.FocusTarget.Icons.Combat.X), tonumber(db.oUF.FocusTarget.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.FocusTarget.Icons.Combat.Size = CombatSize
															oUF_LUI_focustarget.Combat:SetHeight(CombatSize)
															oUF_LUI_focustarget.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.FocusTarget.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.Combat:IsShown() then oUF_LUI_focustarget.Combat:Hide() else oUF_LUI_focustarget.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.FocusTarget.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.FocusTarget.Icons.PvP.Enable = not db.oUF.FocusTarget.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.FocusTarget.Icons.PvP.X = PvPX
																oUF_LUI_focustarget.PvP:ClearAllPoints()
																oUF_LUI_focustarget.PvP:SetPoint(db.oUF.FocusTarget.Icons.PvP.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.FocusTarget.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.FocusTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.FocusTarget.Icons.PvP.Y = PvPY
																oUF_LUI_focustarget.PvP:ClearAllPoints()
																oUF_LUI_focustarget.PvP:SetPoint(db.oUF.FocusTarget.Icons.PvP.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.PvP.Point, tonumber(db.oUF.FocusTarget.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.FocusTarget.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.FocusTarget.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.FocusTarget.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_focustarget.PvP:ClearAllPoints()
															oUF_LUI_focustarget.PvP:SetPoint(db.oUF.FocusTarget.Icons.PvP.Point, oUF_LUI_focustarget, db.oUF.FocusTarget.Icons.PvP.Point, tonumber(db.oUF.FocusTarget.Icons.PvP.X), tonumber(db.oUF.FocusTarget.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.FocusTarget.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.FocusTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.FocusTarget.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.FocusTarget.Icons.PvP.Size = PvPSize
															oUF_LUI_focustarget.PvP:SetHeight(PvPSize)
															oUF_LUI_focustarget.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.FocusTarget.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_focustarget.PvP:IsShown() then oUF_LUI_focustarget.PvP:Hide() else oUF_LUI_focustarget.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						Pet = {
							name = "Pet",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 10,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Pet",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a Pet Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Enable end,
													set = function(self,Enable)
																db.oUF.Pet.Enable = not db.oUF.Pet.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.Pet.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												PetX = {
													name = "X Value",
													desc = "X Value for your Pet Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.X,
													type = "input",
													get = function() return db.oUF.Pet.X end,
													set = function(self,PetX)
																if PetX == nil or PetX == "" then
																	PetX = "0"
																end
																db.oUF.Pet.X = PetX
																oUF_LUI_pet:SetPoint("CENTER", UIParent, "CENTER", tonumber(PetX), tonumber(db.oUF.Pet.Y))
															end,
													order = 2,
												},
												PetY = {
													name = "Y Value",
													desc = "Y Value for your Pet Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Y,
													type = "input",
													get = function() return db.oUF.Pet.Y end,
													set = function(self,PetY)
																if PetY == nil or PetY == "" then
																	PetY = "0"
																end
																db.oUF.Pet.Y = PetY
																oUF_LUI_pet:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.Pet.X), tonumber(PetY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											disabled = function() return not db.oUF.Pet.Enable end,
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												PetHeight = {
													name = "Height",
													desc = "Decide the Height of your Pet Frame.\n\nDefault: "..defaults.profile.oUF.Pet.Height,
													type = "input",
													get = function() return db.oUF.Pet.Height end,
													set = function(self,PetHeight)
																if PetHeight == nil or PetHeight == "" then
																	PetHeight = "0"
																end
																db.oUF.Pet.Height = PetHeight
																oUF_LUI_pet:SetHeight(tonumber(PetHeight))
															end,
													order = 2,
												},
												PetWidth = {
													name = "Width",
													desc = "Decide the Width of your Pet Frame.\n\nDefault: "..defaults.profile.oUF.Pet.Width,
													type = "input",
													get = function() return db.oUF.Pet.Width end,
													set = function(self,PetWidth)
																if PetWidth == nil or PetWidth == "" then
																	PetWidth = "0"
																end
																db.oUF.Pet.Width = PetWidth
																oUF_LUI_pet:SetWidth(tonumber(PetWidth))
																
																if db.oUF.auras.pet.buffs_enable == true then
																	oUF_LUI_pet.Buffs:SetWidth(tonumber(PetWidth))
																end
																
																if db.oUF.auras.pet.debuffs_enable == true then
																	oUF_LUI_pet.Debuffs:SetWidth(tonumber(PetWidth))
																end
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.Pet.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Pet.Backdrop.Color.r, db.oUF.Pet.Backdrop.Color.g, db.oUF.Pet.Backdrop.Color.b, db.oUF.Pet.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Pet.Backdrop.Color.r = r
															db.oUF.Pet.Backdrop.Color.g = g
															db.oUF.Pet.Backdrop.Color.b = b
															db.oUF.Pet.Backdrop.Color.a = a

															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Pet.Border.Color.r, db.oUF.Pet.Border.Color.g, db.oUF.Pet.Border.Color.b, db.oUF.Pet.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Pet.Border.Color.r = r
															db.oUF.Pet.Border.Color.g = g
															db.oUF.Pet.Border.Color.b = b
															db.oUF.Pet.Border.Color.a = a
															
															oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Pet.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Pet.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Pet.Backdrop.Texture = BackdropTexture
															oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Pet.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Pet.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Pet.Border.EdgeFile = BorderTexture
															oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Pet.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Pet.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Pet.Border.EdgeSize = BorderSize
															oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Pet.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Pet.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_pet.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pet.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pet, "TOPLEFT", tonumber(db.oUF.Pet.Backdrop.Padding.Left), tonumber(db.oUF.Pet.Backdrop.Padding.Top))
														oUF_LUI_pet.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pet, "BOTTOMRIGHT", tonumber(db.oUF.Pet.Backdrop.Padding.Right), tonumber(db.oUF.Pet.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Pet.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Pet.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_pet.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pet.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pet, "TOPLEFT", tonumber(db.oUF.Pet.Backdrop.Padding.Left), tonumber(db.oUF.Pet.Backdrop.Padding.Top))
														oUF_LUI_pet.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pet, "BOTTOMRIGHT", tonumber(db.oUF.Pet.Backdrop.Padding.Right), tonumber(db.oUF.Pet.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Pet.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Pet.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_pet.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pet.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pet, "TOPLEFT", tonumber(db.oUF.Pet.Backdrop.Padding.Left), tonumber(db.oUF.Pet.Backdrop.Padding.Top))
														oUF_LUI_pet.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pet, "BOTTOMRIGHT", tonumber(db.oUF.Pet.Backdrop.Padding.Right), tonumber(db.oUF.Pet.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Pet.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Pet.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_pet.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pet.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pet, "TOPLEFT", tonumber(db.oUF.Pet.Backdrop.Padding.Left), tonumber(db.oUF.Pet.Backdrop.Padding.Top))
														oUF_LUI_pet.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pet, "BOTTOMRIGHT", tonumber(db.oUF.Pet.Backdrop.Padding.Right), tonumber(db.oUF.Pet.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Pet.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Pet.Border.Insets.Left = InsetLeft
														oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Pet.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Pet.Border.Insets.Right = InsetRight
														oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Pet.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Pet.Border.Insets.Top = InsetTop
														oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Pet.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Pet.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Pet.Border.Insets.Bottom = InsetBottom
														oUF_LUI_pet.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Pet.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Pet.Border.EdgeFile), edgeSize = tonumber(db.oUF.Pet.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Pet.Border.Insets.Left), right = tonumber(db.oUF.Pet.Border.Insets.Right), top = tonumber(db.oUF.Pet.Border.Insets.Top), bottom = tonumber(db.oUF.Pet.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pet.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Pet.Backdrop.Color.r), tonumber(db.oUF.Pet.Backdrop.Color.g), tonumber(db.oUF.Pet.Backdrop.Color.b), tonumber(db.oUF.Pet.Backdrop.Color.a))
															oUF_LUI_pet.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Pet.Border.Color.r), tonumber(db.oUF.Pet.Border.Color.g), tonumber(db.oUF.Pet.Border.Color.b), tonumber(db.oUF.Pet.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.Pet.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Pet.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Pet Health.\n\nDefault: "..defaults.profile.oUF.Pet.Health.Height,
															type = "input",
															get = function() return db.oUF.Pet.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Pet.Health.Height = Height
																		oUF_LUI_pet.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Health.Padding,
															type = "input",
															get = function() return db.oUF.Pet.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Pet.Health.Padding = Padding
																		oUF_LUI_pet.Health:ClearAllPoints()
																		oUF_LUI_pet.Health:SetPoint("TOPLEFT", oUF_LUI_pet, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_pet.Health:SetPoint("TOPRIGHT", oUF_LUI_pet, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Pet.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Pet.Health.Smooth = not db.oUF.Pet.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Pet.Health.ColorClass = not db.oUF.Pet.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Pet.Health.ColorGradient = false
																			db.oUF.Pet.Health.IndividualColor.Enable = false
																			db.oUF.Pet.Health.ColorHappy = false
																			
																			print("Pet Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Pet.Health.ColorGradient = not db.oUF.Pet.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Pet.Health.ColorClass = false
																			db.oUF.Pet.Health.IndividualColor.Enable = false
																			db.oUF.Pet.Health.ColorHappy = false
																			
																			print("Pet Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Pet.Health.IndividualColor.Enable = not db.oUF.Pet.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Pet.Health.ColorClass = false
																			db.oUF.Pet.Health.ColorGradient = false
																			db.oUF.Pet.Health.ColorHappy = false
																			
																			oUF_LUI_pet.Health:SetStatusBarColor(db.oUF.Pet.Health.IndividualColor.r, db.oUF.Pet.Health.IndividualColor.g, db.oUF.Pet.Health.IndividualColor.b)
																			oUF_LUI_pet.Health.bg:SetVertexColor(db.oUF.Pet.Health.IndividualColor.r*tonumber(db.oUF.Pet.Health.BGMultiplier), db.oUF.Pet.Health.IndividualColor.g*tonumber(db.oUF.Pet.Health.BGMultiplier), db.oUF.Pet.Health.IndividualColor.b*tonumber(db.oUF.Pet.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Health.IndividualColor.r, db.oUF.Pet.Health.IndividualColor.g, db.oUF.Pet.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Health.IndividualColor.r = r
																	db.oUF.Pet.Health.IndividualColor.g = g
																	db.oUF.Pet.Health.IndividualColor.b = b
																	
																	oUF_LUI_pet.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_pet.Health.bg:SetVertexColor(r*tonumber(db.oUF.Pet.Health.BGMultiplier), g*tonumber(db.oUF.Pet.Health.BGMultiplier), b*tonumber(db.oUF.Pet.Health.BGMultiplier))
																end,
															order = 4,
														},
														HealthHappyColor = {
															name = "Color by Happyness",
															desc = "Wether you want to use Pet Happyness colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Health.ColorHappy end,
															set = function(self,HealthHappyColor)
																		db.oUF.Pet.Health.ColorHappy = not db.oUF.Pet.Health.ColorHappy
																		if HealthHappyColor == true then
																			db.oUF.Pet.Health.ColorClass = false
																			db.oUF.Pet.Health.IndividualColor.Enable = false
																			db.oUF.Pet.Health.ColorGradient = false
																			
																			print("Pet Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 5,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Pet.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Pet.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Pet.Health.Texture = HealthTex
																	oUF_LUI_pet.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Pet.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Pet.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Pet.Health.TextureBG = HealthTexBG
																	oUF_LUI_pet.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Pet.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Pet.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Pet.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_pet.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Pet.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Pet.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Pet.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_pet.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Pet.Power.Enable = not db.oUF.Pet.Power.Enable
																if EnablePower == true then
																	oUF_LUI_pet.Power:Show()
																else
																	oUF_LUI_pet.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Pet Power.\n\nDefault: "..defaults.profile.oUF.Pet.Power.Height,
															type = "input",
															get = function() return db.oUF.Pet.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Pet.Power.Height = Height
																		oUF_LUI_pet.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Power.Padding,
															type = "input",
															get = function() return db.oUF.Pet.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Pet.Power.Padding = Padding
																		oUF_LUI_pet.Power:ClearAllPoints()
																		oUF_LUI_pet.Power:SetPoint("TOPLEFT", oUF_LUI_pet.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_pet.Power:SetPoint("TOPRIGHT", oUF_LUI_pet.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Pet.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Pet.Power.Smooth = not db.oUF.Pet.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Pet.Power.ColorClass = not db.oUF.Pet.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Pet.Power.ColorType = false
																			db.oUF.Pet.Power.IndividualColor.Enable = false
																			db.oUF.Pet.Power.ColorHappy = false
																			
																			print("Pet Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Pet.Power.ColorType = not db.oUF.Pet.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Pet.Power.ColorClass = false
																			db.oUF.Pet.Power.IndividualColor.Enable = false
																			db.oUF.Pet.Power.ColorHappy = false
																			
																			print("Pet Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Pet.Power.IndividualColor.Enable = not db.oUF.Pet.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Pet.Power.ColorType = false
																			db.oUF.Pet.Power.ColorClass = false
																			db.oUF.Pet.Power.ColorHappy = false
																			
																			oUF_LUI_pet.Power:SetStatusBarColor(db.oUF.Pet.Power.IndividualColor.r, db.oUF.Pet.Power.IndividualColor.g, db.oUF.Pet.Power.IndividualColor.b)
																			oUF_LUI_pet.Power.bg:SetVertexColor(db.oUF.Pet.Power.IndividualColor.r*tonumber(db.oUF.Pet.Power.BGMultiplier), db.oUF.Pet.Power.IndividualColor.g*tonumber(db.oUF.Pet.Power.BGMultiplier), db.oUF.Pet.Power.IndividualColor.b*tonumber(db.oUF.Pet.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Power.IndividualColor.r, db.oUF.Pet.Power.IndividualColor.g, db.oUF.Pet.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Power.IndividualColor.r = r
																	db.oUF.Pet.Power.IndividualColor.g = g
																	db.oUF.Pet.Power.IndividualColor.b = b
																	
																	oUF_LUI_pet.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_pet.Power.bg:SetVertexColor(r*tonumber(db.oUF.Pet.Power.BGMultiplier), g*tonumber(db.oUF.Pet.Power.BGMultiplier), b*tonumber(db.oUF.Pet.Power.BGMultiplier))
																end,
															order = 4,
														},
														PowerColorByHappy = {
															name = "Color by Happyness",
															desc = "Wether you want to use Pet Happyness colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Power.ColorHappy end,
															set = function(self,PowerColorByHappy)
																		db.oUF.Pet.Power.ColorHappy = not db.oUF.Pet.Power.ColorHappy
																		if PowerColorByHappy == true then
																			db.oUF.Pet.Power.ColorClass = false
																			db.oUF.Pet.Power.IndividualColor.Enable = false
																			db.oUF.Pet.Power.ColorType = false
																			
																			print("Pet Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 5,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Pet.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Pet.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Pet.Power.Texture = PowerTex
																	oUF_LUI_pet.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Pet.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Pet.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.Pet.Power.TextureBG = PowerTexBG
																	oUF_LUI_pet.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Pet.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Pet.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Pet.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_pet.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Pet.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Pet.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Pet.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_pet.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Pet.Full.Enable = not db.oUF.Pet.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_pet.Full:Show()
																else
																	oUF_LUI_pet.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Pet.Full.Height,
															type = "input",
															get = function() return db.oUF.Pet.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Pet.Full.Height = Height
																		oUF_LUI_pet.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Full.Padding,
															type = "input",
															get = function() return db.oUF.Pet.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Pet.Full.Padding = Padding
																	oUF_LUI_pet.Full:ClearAllPoints()
																	oUF_LUI_pet.Full:SetPoint("TOPLEFT", oUF_LUI_pet.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_pet.Full:SetPoint("TOPRIGHT", oUF_LUI_pet.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Pet.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Pet.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Pet.Full.Texture = FullTex
																	oUF_LUI_pet.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Pet.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Pet.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Pet.Full.Alpha = FullAlpha
																	oUF_LUI_pet.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Pet.Full.Color.r, db.oUF.Pet.Full.Color.g, db.oUF.Pet.Full.Color.b, db.oUF.Pet.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Pet.Full.Color.r = r
																	db.oUF.Pet.Full.Color.g = g
																	db.oUF.Pet.Full.Color.b = b
																	db.oUF.Pet.Full.Color.a = a
																	
																	oUF_LUI_pet.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Pet.Enable end,
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Pet.Texts.Name.Enable = not db.oUF.Pet.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_pet.Info:Show()
																else
																	oUF_LUI_pet.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet Name Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.Name.Size,
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.Name.Size = FontSize
																	oUF_LUI_pet.Info:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Name.Font),db.oUF.Pet.Texts.Name.Size,db.oUF.Pet.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet Name!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Font,
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.Name.Font = Font
																	oUF_LUI_pet.Info:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Name.Font),db.oUF.Pet.Texts.Name.Size,db.oUF.Pet.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet Name.\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Outline,
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Info:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Name.Font),db.oUF.Pet.Texts.Name.Size,db.oUF.Pet.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Pet Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Pet.Texts.Name.X = NameX
																		oUF_LUI_pet.Info:ClearAllPoints()
																		oUF_LUI_pet.Info:SetPoint(db.oUF.Pet.Texts.Name.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Name.RelativePoint, tonumber(db.oUF.Pet.Texts.Name.X), tonumber(db.oUF.Pet.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Pet Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Pet.Texts.Name.Y = NameY
																		oUF_LUI_pet.Info:ClearAllPoints()
																		oUF_LUI_pet.Info:SetPoint(db.oUF.Pet.Texts.Name.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Name.RelativePoint, tonumber(db.oUF.Pet.Texts.Name.X), tonumber(db.oUF.Pet.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet Name.\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.Name.Point = positions[Point]
																	oUF_LUI_pet.Info:ClearAllPoints()
																	oUF_LUI_pet.Info:SetPoint(db.oUF.Pet.Texts.Name.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Name.RelativePoint, tonumber(db.oUF.Pet.Texts.Name.X), tonumber(db.oUF.Pet.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet Name.\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Info:ClearAllPoints()
																	oUF_LUI_pet.Info:SetPoint(db.oUF.Pet.Texts.Name.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Name.RelativePoint, tonumber(db.oUF.Pet.Texts.Name.X), tonumber(db.oUF.Pet.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Pet Name.\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Format,
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Pet.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Pet.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Pet Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Pet.Texts.Name.Length,
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Pet.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Pet.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Pet Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Pet.Texts.Name.ColorNameByClass = not db.oUF.Pet.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Pet Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Pet.Texts.Name.ColorClassByClass = not db.oUF.Pet.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Pet.Texts.Name.ColorLevelByDifficulty = not db.oUF.Pet.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Pet.Texts.Name.Enable end,
															get = function() return db.oUF.Pet.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Pet.Texts.Name.ShowClassification = not db.oUF.Pet.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Pet.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Pet.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Pet.Texts.Name.ShortClassification = not db.oUF.Pet.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.Health.Enable = not db.oUF.Pet.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_pet.Health.value:Show()
															else
																oUF_LUI_pet.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet Health Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.Health.Size,
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.Health.Size = FontSize
																	oUF_LUI_pet.Health.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Health.Font),db.oUF.Pet.Texts.Health.Size,db.oUF.Pet.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Pet Health.\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.Format,
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Pet.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Pet.Texts.Health.Format = valueFormat[Format]
																	print("Pet Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet Health!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.Font,
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.Health.Font = Font
																	oUF_LUI_pet.Health.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Health.Font),db.oUF.Pet.Texts.Health.Size,db.oUF.Pet.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet Health.\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.Outline,
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Health.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Health.Font),db.oUF.Pet.Texts.Health.Size,db.oUF.Pet.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Pet Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															get = function() return db.oUF.Pet.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Pet.Texts.Health.X = HealthX
																		oUF_LUI_pet.Health.value:ClearAllPoints()
																		oUF_LUI_pet.Health.value:SetPoint(db.oUF.Pet.Texts.Health.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Health.RelativePoint, tonumber(db.oUF.Pet.Texts.Health.X), tonumber(db.oUF.Pet.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Pet Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															get = function() return db.oUF.Pet.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Pet.Texts.Health.Y = HealthY
																		oUF_LUI_pet.Health.value:ClearAllPoints()
																		oUF_LUI_pet.Health.value:SetPoint(db.oUF.Pet.Texts.Health.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Health.RelativePoint, tonumber(db.oUF.Pet.Texts.Health.X), tonumber(db.oUF.Pet.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet Health.\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.Health.Point = positions[Point]
																	oUF_LUI_pet.Health.value:ClearAllPoints()
																	oUF_LUI_pet.Health.value:SetPoint(db.oUF.Pet.Texts.Health.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Health.RelativePoint, tonumber(db.oUF.Pet.Texts.Health.X), tonumber(db.oUF.Pet.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet Health.\nDefault: "..defaults.profile.oUF.Pet.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Health.value:ClearAllPoints()
																	oUF_LUI_pet.Health.value:SetPoint(db.oUF.Pet.Texts.Health.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Health.RelativePoint, tonumber(db.oUF.Pet.Texts.Health.X), tonumber(db.oUF.Pet.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.Health.ColorClass = not db.oUF.Pet.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.Health.ColorGradient = false
																			db.oUF.Pet.Texts.Health.IndividualColor.Enable = false
																			
																			print("Pet Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Pet.Texts.Health.ColorGradient = not db.oUF.Pet.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Pet.Texts.Health.ColorClass = false
																			db.oUF.Pet.Texts.Health.IndividualColor.Enable = false
																			
																			print("Pet Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.Health.IndividualColor.Enable = not db.oUF.Pet.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.Health.ColorClass = false
																			db.oUF.Pet.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_pet.Health.value:SetTextColor(tonumber(db.oUF.Pet.Texts.Health.IndividualColor.r),tonumber(db.oUF.Pet.Texts.Health.IndividualColor.g),tonumber(db.oUF.Pet.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.Health.IndividualColor.r, db.oUF.Pet.Texts.Health.IndividualColor.g, db.oUF.Pet.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.Health.IndividualColor.r = r
																	db.oUF.Pet.Texts.Health.IndividualColor.g = g
																	db.oUF.Pet.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_pet.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Pet.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Pet.Texts.Health.ShowDead = not db.oUF.Pet.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.Power.Enable = not db.oUF.Pet.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_pet.Power.value:Show()
															else
																oUF_LUI_pet.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet Power Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.Power.Size,
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.Power.Size = FontSize
																	oUF_LUI_pet.Power.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Power.Font),db.oUF.Pet.Texts.Power.Size,db.oUF.Pet.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Pet Power.\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.Format,
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Pet.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Pet.Texts.Power.Format = valueFormat[Format]
																	print("Pet Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet Power!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.Font,
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.Power.Font = Font
																	oUF_LUI_pet.Power.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Power.Font),db.oUF.Pet.Texts.Power.Size,db.oUF.Pet.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet Power.\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.Outline,
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Power.value:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.Power.Font),db.oUF.Pet.Texts.Power.Size,db.oUF.Pet.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Pet Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															get = function() return db.oUF.Pet.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Pet.Texts.Power.X = PowerX
																		oUF_LUI_pet.Power.value:ClearAllPoints()
																		oUF_LUI_pet.Power.value:SetPoint(db.oUF.Pet.Texts.Power.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Power.RelativePoint, tonumber(db.oUF.Pet.Texts.Power.X), tonumber(db.oUF.Pet.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Pet Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															get = function() return db.oUF.Pet.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Pet.Texts.Power.Y = PowerY
																		oUF_LUI_pet.Power.value:ClearAllPoints()
																		oUF_LUI_pet.Power.value:SetPoint(db.oUF.Pet.Texts.Power.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Power.RelativePoint, tonumber(db.oUF.Pet.Texts.Power.X), tonumber(db.oUF.Pet.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet Power.\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.Power.Point = positions[Point]
																	oUF_LUI_pet.Power.value:ClearAllPoints()
																	oUF_LUI_pet.Power.value:SetPoint(db.oUF.Pet.Texts.Power.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Power.RelativePoint, tonumber(db.oUF.Pet.Texts.Power.X), tonumber(db.oUF.Pet.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet Power.\nDefault: "..defaults.profile.oUF.Pet.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Power.value:ClearAllPoints()
																	oUF_LUI_pet.Power.value:SetPoint(db.oUF.Pet.Texts.Power.Point, oUF_LUI_pet, db.oUF.Pet.Texts.Power.RelativePoint, tonumber(db.oUF.Pet.Texts.Power.X), tonumber(db.oUF.Pet.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.Power.ColorClass = not db.oUF.Pet.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.Power.ColorType = false
																			db.oUF.Pet.Texts.Power.IndividualColor.Enable = false
																			
																			print("Pet Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Pet.Texts.Power.ColorType = not db.oUF.Pet.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Pet.Texts.Power.ColorClass = false
																			db.oUF.Pet.Texts.Power.IndividualColor.Enable = false
																			
																			print("Pet Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.Power.IndividualColor.Enable = not db.oUF.Pet.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.Power.ColorClass = false
																			db.oUF.Pet.Texts.Power.ColorType = false
																			
																			oUF_LUI_pet.Power.value:SetTextColor(tonumber(db.oUF.Pet.Texts.Power.IndividualColor.r),tonumber(db.oUF.Pet.Texts.Power.IndividualColor.g),tonumber(db.oUF.Pet.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.Power.IndividualColor.r, db.oUF.Pet.Texts.Power.IndividualColor.g, db.oUF.Pet.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.Power.IndividualColor.r = r
																	db.oUF.Pet.Texts.Power.IndividualColor.g = g
																	db.oUF.Pet.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_pet.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.HealthPercent.Enable = not db.oUF.Pet.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_pet.Health.valuePercent:Show()
															else
																oUF_LUI_pet.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_pet.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthPercent.Font),db.oUF.Pet.Texts.HealthPercent.Size,db.oUF.Pet.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Pet HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Pet.Texts.HealthPercent.ShowAlways = not db.oUF.Pet.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet HealthPercent!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.HealthPercent.Font = Font
																	oUF_LUI_pet.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthPercent.Font),db.oUF.Pet.Texts.HealthPercent.Size,db.oUF.Pet.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet HealthPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthPercent.Font),db.oUF.Pet.Texts.HealthPercent.Size,db.oUF.Pet.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Pet HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Pet.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Pet.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_pet.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_pet.Health.valuePercent:SetPoint(db.oUF.Pet.Texts.HealthPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthPercent.X), tonumber(db.oUF.Pet.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Pet HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Pet.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Pet.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_pet.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_pet.Health.valuePercent:SetPoint(db.oUF.Pet.Texts.HealthPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthPercent.X), tonumber(db.oUF.Pet.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet HealthPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_pet.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_pet.Health.valuePercent:SetPoint(db.oUF.Pet.Texts.HealthPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthPercent.X), tonumber(db.oUF.Pet.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet HealthPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_pet.Health.valuePercent:SetPoint(db.oUF.Pet.Texts.HealthPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthPercent.X), tonumber(db.oUF.Pet.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.HealthPercent.ColorClass = not db.oUF.Pet.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Pet HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Pet.Texts.HealthPercent.ColorGradient = not db.oUF.Pet.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Pet.Texts.HealthPercent.ColorClass = false
																			db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Pet HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.HealthPercent.ColorClass = false
																			db.oUF.Pet.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_pet.Health.valuePercent:SetTextColor(tonumber(db.oUF.Pet.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Pet.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Pet.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.HealthPercent.IndividualColor.r, db.oUF.Pet.Texts.HealthPercent.IndividualColor.g, db.oUF.Pet.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Pet.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Pet.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_pet.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Pet.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Pet.Texts.HealthPercent.ShowDead = not db.oUF.Pet.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.PowerPercent.Enable = not db.oUF.Pet.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_pet.Power.valuePercent:Show()
															else
																oUF_LUI_pet.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_pet.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerPercent.Font),db.oUF.Pet.Texts.PowerPercent.Size,db.oUF.Pet.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Pet PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Pet.Texts.PowerPercent.ShowAlways = not db.oUF.Pet.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet PowerPercent!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.PowerPercent.Font = Font
																	oUF_LUI_pet.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerPercent.Font),db.oUF.Pet.Texts.PowerPercent.Size,db.oUF.Pet.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet PowerPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerPercent.Font),db.oUF.Pet.Texts.PowerPercent.Size,db.oUF.Pet.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Pet PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Pet.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Pet.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_pet.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_pet.Power.valuePercent:SetPoint(db.oUF.Pet.Texts.PowerPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerPercent.X), tonumber(db.oUF.Pet.Texts.PowerPercent.Y))
																	end,
															order = 5,

														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Pet PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Pet.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Pet.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_pet.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_pet.Power.valuePercent:SetPoint(db.oUF.Pet.Texts.PowerPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerPercent.X), tonumber(db.oUF.Pet.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet PowerPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_pet.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_pet.Power.valuePercent:SetPoint(db.oUF.Pet.Texts.PowerPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerPercent.X), tonumber(db.oUF.Pet.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet PowerPercent.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_pet.Power.valuePercent:SetPoint(db.oUF.Pet.Texts.PowerPercent.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerPercent.X), tonumber(db.oUF.Pet.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.PowerPercent.ColorClass = not db.oUF.Pet.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.PowerPercent.ColorType = false
																			db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Pet PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Pet.Texts.PowerPercent.ColorType = not db.oUF.Pet.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Pet.Texts.PowerPercent.ColorClass = false
																			db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Pet PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.PowerPercent.ColorClass = false
																			db.oUF.Pet.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_pet.Power.valuePercent:SetTextColor(tonumber(db.oUF.Pet.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Pet.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Pet.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.PowerPercent.IndividualColor.r, db.oUF.Pet.Texts.PowerPercent.IndividualColor.g, db.oUF.Pet.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Pet.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Pet.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_pet.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet HealthMissing or not.",
													type = "toggle",

													width = "full",
													get = function() return db.oUF.Pet.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.HealthMissing.Enable = not db.oUF.Pet.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_pet.Health.valueMissing:Show()
															else
																oUF_LUI_pet.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_pet.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthMissing.Font),db.oUF.Pet.Texts.HealthMissing.Size,db.oUF.Pet.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Pet HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Pet.Texts.HealthMissing.ShowAlways = not db.oUF.Pet.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Pet.Texts.HealthMissing.ShortValue = not db.oUF.Pet.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet HealthMissing!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.HealthMissing.Font = Font
																	oUF_LUI_pet.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthMissing.Font),db.oUF.Pet.Texts.HealthMissing.Size,db.oUF.Pet.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet HealthMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.HealthMissing.Font),db.oUF.Pet.Texts.HealthMissing.Size,db.oUF.Pet.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Pet HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Pet.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Pet.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_pet.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_pet.Health.valueMissing:SetPoint(db.oUF.Pet.Texts.HealthMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthMissing.X), tonumber(db.oUF.Pet.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Pet HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Pet.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Pet.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_pet.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_pet.Health.valueMissing:SetPoint(db.oUF.Pet.Texts.HealthMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthMissing.X), tonumber(db.oUF.Pet.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet HealthMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_pet.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_pet.Health.valueMissing:SetPoint(db.oUF.Pet.Texts.HealthMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthMissing.X), tonumber(db.oUF.Pet.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet HealthMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_pet.Health.valueMissing:SetPoint(db.oUF.Pet.Texts.HealthMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.HealthMissing.X), tonumber(db.oUF.Pet.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.HealthMissing.ColorClass = not db.oUF.Pet.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Pet HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Pet.Texts.HealthMissing.ColorGradient = not db.oUF.Pet.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Pet.Texts.HealthMissing.ColorClass = false
																			db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Pet HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.HealthMissing.ColorClass = false
																			db.oUF.Pet.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_pet.Health.valueMissing:SetTextColor(tonumber(db.oUF.Pet.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Pet.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Pet.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.HealthMissing.IndividualColor.r, db.oUF.Pet.Texts.HealthMissing.IndividualColor.g, db.oUF.Pet.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Pet.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Pet.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_pet.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Pet PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Pet.Texts.PowerMissing.Enable = not db.oUF.Pet.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_pet.Power.valueMissing:Show()
															else
																oUF_LUI_pet.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Pet PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Pet.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Pet.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Pet.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_pet.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerMissing.Font),db.oUF.Pet.Texts.PowerMissing.Size,db.oUF.Pet.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",

															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Pet PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Pet.Texts.PowerMissing.ShowAlways = not db.oUF.Pet.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Pet.Texts.PowerMissing.ShortValue = not db.oUF.Pet.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Pet PowerMissing!\n\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Pet.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Pet.Texts.PowerMissing.Font = Font
																	oUF_LUI_pet.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerMissing.Font),db.oUF.Pet.Texts.PowerMissing.Size,db.oUF.Pet.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Pet PowerMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Pet.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Pet.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_pet.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Pet.Texts.PowerMissing.Font),db.oUF.Pet.Texts.PowerMissing.Size,db.oUF.Pet.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Pet PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Pet.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Pet.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_pet.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_pet.Power.valueMissing:SetPoint(db.oUF.Pet.Texts.PowerMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerMissing.X), tonumber(db.oUF.Pet.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Pet PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Pet.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Pet.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_pet.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_pet.Power.valueMissing:SetPoint(db.oUF.Pet.Texts.PowerMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerMissing.X), tonumber(db.oUF.Pet.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Pet PowerMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Pet.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_pet.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_pet.Power.valueMissing:SetPoint(db.oUF.Pet.Texts.PowerMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerMissing.X), tonumber(db.oUF.Pet.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Pet PowerMissing.\nDefault: "..defaults.profile.oUF.Pet.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Pet.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Pet.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pet.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_pet.Power.valueMissing:SetPoint(db.oUF.Pet.Texts.PowerMissing.Point, oUF_LUI_pet, db.oUF.Pet.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Pet.Texts.PowerMissing.X), tonumber(db.oUF.Pet.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Pet.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Pet.Texts.PowerMissing.ColorClass = not db.oUF.Pet.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Pet.Texts.PowerMissing.ColorType = false
																			db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Pet PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Pet.Texts.PowerMissing.ColorType = not db.oUF.Pet.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Pet.Texts.PowerMissing.ColorClass = false
																			db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Pet PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Pet PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Pet.Texts.PowerMissing.ColorClass = false
																			db.oUF.Pet.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_pet.Power.valueMissing:SetTextColor(tonumber(db.oUF.Pet.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Pet.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Pet.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Pet PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Pet.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Pet.Texts.PowerMissing.IndividualColor.r, db.oUF.Pet.Texts.PowerMissing.IndividualColor.g, db.oUF.Pet.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Pet.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Pet.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Pet.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_pet.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									type = "group",
									disabled = function() return not db.oUF.Pet.Enable end,
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Pet.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Pet.Portrait.Enable = not db.oUF.Pet.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Pet.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Pet.Portrait.Enable end,
											get = function() return db.oUF.Pet.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Pet.Portrait.Width = PortraitWidth
														oUF_LUI_pet.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Pet.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Pet.Portrait.Enable end,
											get = function() return db.oUF.Pet.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Pet.Portrait.Height = PortraitHeight
														oUF_LUI_pet.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Pet.Portrait.Enable end,
											get = function() return db.oUF.Pet.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Pet.Portrait.X = PortraitX
														oUF_LUI_pet.Portrait:SetPoint("TOPLEFT", oUF_LUI_pet.Health, "TOPLEFT", PortraitX, db.oUF.Pet.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Pet.Portrait.Enable end,
											get = function() return db.oUF.Pet.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Pet.Portrait.Y = PortraitY
														oUF_LUI_pet.Portrait:SetPoint("TOPLEFT", oUF_LUI_pet.Health, "TOPLEFT", db.oUF.Pet.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.Pet.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.Pet.Icons.Lootmaster.Enable = not db.oUF.Pet.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Pet.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.Pet.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_pet.MasterLooter:ClearAllPoints()
																oUF_LUI_pet.MasterLooter:SetPoint(db.oUF.Pet.Icons.Lootmaster.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.Pet.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Pet.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.Pet.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_pet.MasterLooter:ClearAllPoints()
																oUF_LUI_pet.MasterLooter:SetPoint(db.oUF.Pet.Icons.Lootmaster.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Lootmaster, tonumber(db.oUF.Pet.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.Pet.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_pet.MasterLooter:ClearAllPoints()
															oUF_LUI_pet.MasterLooter:SetPoint(db.oUF.Pet.Icons.Lootmaster.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Lootmaster.Point, tonumber(db.oUF.Pet.Icons.Lootmaster.X), tonumber(db.oUF.Pet.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Pet.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.Pet.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_pet.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_pet.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.MasterLooter:IsShown() then oUF_LUI_pet.MasterLooter:Hide() else oUF_LUI_pet.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.Pet.Icons.Leader.Enable = not db.oUF.Pet.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Leader.Enable end,
													get = function() return db.oUF.Pet.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.Pet.Icons.Leader.X = LeaderX
																oUF_LUI_pet.Leader:ClearAllPoints()
																oUF_LUI_pet.Leader:SetPoint(db.oUF.Pet.Icons.Leader.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.Pet.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Leader.Enable end,
													get = function() return db.oUF.Pet.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.Pet.Icons.Leader.Y = LeaderY
																oUF_LUI_pet.Leader:ClearAllPoints()
																oUF_LUI_pet.Leader:SetPoint(db.oUF.Pet.Icons.Leader.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Leader.Point, tonumber(db.oUF.Pet.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.Pet.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_pet.Leader:ClearAllPoints()
															oUF_LUI_pet.Leader:SetPoint(db.oUF.Pet.Icons.Leader.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Leader.Point, tonumber(db.oUF.Pet.Icons.Leader.X), tonumber(db.oUF.Pet.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.Leader.Enable end,
													get = function() return db.oUF.Pet.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.Pet.Icons.Leader.Size = LeaderSize
															oUF_LUI_pet.Leader:SetHeight(LeaderSize)
															oUF_LUI_pet.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.Leader:IsShown() then oUF_LUI_pet.Leader:Hide() else oUF_LUI_pet.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.Pet.Icons.Role.Enable = not db.oUF.Pet.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Role.Enable end,
													get = function() return db.oUF.Pet.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.Pet.Icons.Role.X = RoleX
																oUF_LUI_pet.LFDRole:ClearAllPoints()
																oUF_LUI_pet.LFDRole:SetPoint(db.oUF.Pet.Icons.Role.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.Pet.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Role.Enable end,
													get = function() return db.oUF.Pet.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.Pet.Icons.Role.Y = RoleY
																oUF_LUI_pet.LFDRole:ClearAllPoints()
																oUF_LUI_pet.LFDRole:SetPoint(db.oUF.Pet.Icons.Role.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Role.Point, tonumber(db.oUF.Pet.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.Pet.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_pet.LFDRole:ClearAllPoints()
															oUF_LUI_pet.LFDRole:SetPoint(db.oUF.Pet.Icons.Role.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Role.Point, tonumber(db.oUF.Pet.Icons.Role.X), tonumber(db.oUF.Pet.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.Role.Enable end,
													get = function() return db.oUF.Pet.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.Pet.Icons.Role.Size = RoleSize
															oUF_LUI_pet.LFDRole:SetHeight(RoleSize)
															oUF_LUI_pet.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.LFDRole:IsShown() then oUF_LUI_pet.LFDRole:Hide() else oUF_LUI_pet.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Pet.Icons.Raid.Enable = not db.oUF.Pet.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Raid.Enable end,
													get = function() return db.oUF.Pet.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end
																db.oUF.Pet.Icons.Raid.X = RaidX
																oUF_LUI_pet.RaidIcon:ClearAllPoints()
																oUF_LUI_pet.RaidIcon:SetPoint(db.oUF.Pet.Icons.Raid.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Pet.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Raid.Enable end,
													get = function() return db.oUF.Pet.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Pet.Icons.Raid.Y = RaidY
																oUF_LUI_pet.RaidIcon:ClearAllPoints()
																oUF_LUI_pet.RaidIcon:SetPoint(db.oUF.Pet.Icons.Raid.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Raid.Point, tonumber(db.oUF.Pet.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Pet.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_pet.RaidIcon:ClearAllPoints()
															oUF_LUI_pet.RaidIcon:SetPoint(db.oUF.Pet.Icons.Raid.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Raid.Point, tonumber(db.oUF.Pet.Icons.Raid.X), tonumber(db.oUF.Pet.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Pet.Icons.Raid.Enable end,
													get = function() return db.oUF.Pet.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Pet.Icons.Raid.Size = RaidSize
															oUF_LUI_pet.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_pet.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_pet.RaidIcon:IsShown() then oUF_LUI_pet.RaidIcon:Hide() else oUF_LUI_pet.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.Pet.Icons.Resting.Enable = not db.oUF.Pet.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Resting.Enable end,
													get = function() return db.oUF.Pet.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.Pet.Icons.Resting.X = RestingX
																oUF_LUI_pet.Resting:ClearAllPoints()
																oUF_LUI_pet.Resting:SetPoint(db.oUF.Pet.Icons.Resting.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.Pet.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Resting.Enable end,
													get = function() return db.oUF.Pet.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.Pet.Icons.Resting.Y = RestingY
																oUF_LUI_pet.Resting:ClearAllPoints()
																oUF_LUI_pet.Resting:SetPoint(db.oUF.Pet.Icons.Resting.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Resting.Point, tonumber(db.oUF.Pet.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.Pet.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_pet.Resting:ClearAllPoints()
															oUF_LUI_pet.Resting:SetPoint(db.oUF.Pet.Icons.Resting.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Resting.Point, tonumber(db.oUF.Pet.Icons.Resting.X), tonumber(db.oUF.Pet.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.Resting.Enable end,
													get = function() return db.oUF.Pet.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.Pet.Icons.Resting.Size = RestingSize
															oUF_LUI_pet.Resting:SetHeight(RestingSize)
															oUF_LUI_pet.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.Resting:IsShown() then oUF_LUI_pet.Resting:Hide() else oUF_LUI_pet.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.Pet.Icons.Combat.Enable = not db.oUF.Pet.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Combat.Enable end,
													get = function() return db.oUF.Pet.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.Pet.Icons.Combat.X = CombatX
																oUF_LUI_pet.Combat:ClearAllPoints()
																oUF_LUI_pet.Combat:SetPoint(db.oUF.Pet.Icons.Combat.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.Pet.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.Combat.Enable end,
													get = function() return db.oUF.Pet.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.Pet.Icons.Combat.Y = CombatY
																oUF_LUI_pet.Combat:ClearAllPoints()
																oUF_LUI_pet.Combat:SetPoint(db.oUF.Pet.Icons.Combat.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Combat.Point, tonumber(db.oUF.Pet.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.Pet.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_pet.Combat:ClearAllPoints()
															oUF_LUI_pet.Combat:SetPoint(db.oUF.Pet.Icons.Combat.Point, oUF_LUI_pet, db.oUF.Pet.Icons.Combat.Point, tonumber(db.oUF.Pet.Icons.Combat.X), tonumber(db.oUF.Pet.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.Combat.Enable end,
													get = function() return db.oUF.Pet.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.Pet.Icons.Combat.Size = CombatSize
															oUF_LUI_pet.Combat:SetHeight(CombatSize)
															oUF_LUI_pet.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.Pet.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.Combat:IsShown() then oUF_LUI_pet.Combat:Hide() else oUF_LUI_pet.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Pet.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.Pet.Icons.PvP.Enable = not db.oUF.Pet.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Pet.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.PvP.Enable end,
													get = function() return db.oUF.Pet.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.Pet.Icons.PvP.X = PvPX
																oUF_LUI_pet.PvP:ClearAllPoints()
																oUF_LUI_pet.PvP:SetPoint(db.oUF.Pet.Icons.PvP.Point, oUF_LUI_pet, db.oUF.Pet.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.Pet.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Pet.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.Pet.Icons.PvP.Enable end,
													get = function() return db.oUF.Pet.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.Pet.Icons.PvP.Y = PvPY
																oUF_LUI_pet.PvP:ClearAllPoints()
																oUF_LUI_pet.PvP:SetPoint(db.oUF.Pet.Icons.PvP.Point, oUF_LUI_pet, db.oUF.Pet.Icons.PvP.Point, tonumber(db.oUF.Pet.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.Pet.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Pet.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.Pet.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_pet.PvP:ClearAllPoints()
															oUF_LUI_pet.PvP:SetPoint(db.oUF.Pet.Icons.PvP.Point, oUF_LUI_pet, db.oUF.Pet.Icons.PvP.Point, tonumber(db.oUF.Pet.Icons.PvP.X), tonumber(db.oUF.Pet.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.Pet.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Pet.Icons.PvP.Enable end,
													get = function() return db.oUF.Pet.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.Pet.Icons.PvP.Size = PvPSize
															oUF_LUI_pet.PvP:SetHeight(PvPSize)
															oUF_LUI_pet.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Pet.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_pet.PvP:IsShown() then oUF_LUI_pet.PvP:Hide() else oUF_LUI_pet.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						PetTarget = {
							name = "Pet Target",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 11,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Pet Target",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a PetTarget Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Enable end,
													set = function(self,Enable)
																db.oUF.PetTarget.Enable = not db.oUF.PetTarget.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.PetTarget.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												PetTargetX = {
													name = "X Value",
													desc = "X Value for your PetTarget Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.X,
													type = "input",
													get = function() return db.oUF.PetTarget.X end,
													set = function(self,PetTargetX)
																if PetTargetX == nil or PetTargetX == "" then
																	PetTargetX = "0"
																end
																db.oUF.PetTarget.X = PetTargetX
																oUF_LUI_pettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(PetTargetX), tonumber(db.oUF.PetTarget.Y))
															end,
													order = 2,
												},
												PetTargetY = {
													name = "Y Value",
													desc = "Y Value for your PetTarget Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Y,
													type = "input",
													get = function() return db.oUF.PetTarget.Y end,
													set = function(self,PetTargetY)
																if PetTargetY == nil or PetTargetY == "" then
																	PetTargetY = "0"
																end
																db.oUF.PetTarget.Y = PetTargetY
																oUF_LUI_pettarget:SetPoint("CENTER", UIParent, "CENTER", tonumber(db.oUF.PetTarget.X), tonumber(PetTargetY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											disabled = function() return not db.oUF.PetTarget.Enable end,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												PetTargetHeight = {
													name = "Height",
													desc = "Decide the Height of your PetTarget Frame.\n\nDefault: "..defaults.profile.oUF.PetTarget.Height,
													type = "input",
													get = function() return db.oUF.PetTarget.Height end,
													set = function(self,PetTargetHeight)
																if PetTargetHeight == nil or PetTargetHeight == "" then
																	PetTargetHeight = "0"
																end
																db.oUF.PetTarget.Height = PetTargetHeight
																oUF_LUI_pettarget:SetHeight(tonumber(PetTargetHeight))
															end,
													order = 2,
												},
												PetTargetWidth = {
													name = "Width",
													desc = "Decide the Width of your PetTarget Frame.\n\nDefault: "..defaults.profile.oUF.PetTarget.Width,
													type = "input",
													get = function() return db.oUF.PetTarget.Width end,
													set = function(self,PetTargetWidth)
																if PetTargetWidth == nil or PetTargetWidth == "" then
																	PetTargetWidth = "0"
																end
																db.oUF.PetTarget.Width = PetTargetWidth
																oUF_LUI_pettarget:SetWidth(tonumber(PetTargetWidth))
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.PetTarget.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.PetTarget.Backdrop.Color.r, db.oUF.PetTarget.Backdrop.Color.g, db.oUF.PetTarget.Backdrop.Color.b, db.oUF.PetTarget.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.PetTarget.Backdrop.Color.r = r
															db.oUF.PetTarget.Backdrop.Color.g = g
															db.oUF.PetTarget.Backdrop.Color.b = b
															db.oUF.PetTarget.Backdrop.Color.a = a

															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.PetTarget.Border.Color.r, db.oUF.PetTarget.Border.Color.g, db.oUF.PetTarget.Border.Color.b, db.oUF.PetTarget.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.PetTarget.Border.Color.r = r
															db.oUF.PetTarget.Border.Color.g = g
															db.oUF.PetTarget.Border.Color.b = b
															db.oUF.PetTarget.Border.Color.a = a
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.PetTarget.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.PetTarget.Backdrop.Texture = BackdropTexture
															oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.PetTarget.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.PetTarget.Border.EdgeFile = BorderTexture
															oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.PetTarget.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.PetTarget.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.PetTarget.Border.EdgeSize = BorderSize
															oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.PetTarget.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.PetTarget.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_pettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pettarget, "TOPLEFT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Left), tonumber(db.oUF.PetTarget.Backdrop.Padding.Top))
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pettarget, "BOTTOMRIGHT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Right), tonumber(db.oUF.PetTarget.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.PetTarget.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.PetTarget.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_pettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pettarget, "TOPLEFT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Left), tonumber(db.oUF.PetTarget.Backdrop.Padding.Top))
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pettarget, "BOTTOMRIGHT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Right), tonumber(db.oUF.PetTarget.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.PetTarget.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.PetTarget.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_pettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pettarget, "TOPLEFT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Left), tonumber(db.oUF.PetTarget.Backdrop.Padding.Top))
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pettarget, "BOTTOMRIGHT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Right), tonumber(db.oUF.PetTarget.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.PetTarget.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.PetTarget.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_pettarget.FrameBackdrop:ClearAllPoints()
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_pettarget, "TOPLEFT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Left), tonumber(db.oUF.PetTarget.Backdrop.Padding.Top))
														oUF_LUI_pettarget.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_pettarget, "BOTTOMRIGHT", tonumber(db.oUF.PetTarget.Backdrop.Padding.Right), tonumber(db.oUF.PetTarget.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.PetTarget.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.PetTarget.Border.Insets.Left = InsetLeft
														oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.PetTarget.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.PetTarget.Border.Insets.Right = InsetRight
														oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.PetTarget.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.PetTarget.Border.Insets.Top = InsetTop
														oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.PetTarget.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.PetTarget.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.PetTarget.Border.Insets.Bottom = InsetBottom
														oUF_LUI_pettarget.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.PetTarget.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.PetTarget.Border.EdgeFile), edgeSize = tonumber(db.oUF.PetTarget.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.PetTarget.Border.Insets.Left), right = tonumber(db.oUF.PetTarget.Border.Insets.Right), top = tonumber(db.oUF.PetTarget.Border.Insets.Top), bottom = tonumber(db.oUF.PetTarget.Border.Insets.Bottom)}
															})
															
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.PetTarget.Backdrop.Color.r), tonumber(db.oUF.PetTarget.Backdrop.Color.g), tonumber(db.oUF.PetTarget.Backdrop.Color.b), tonumber(db.oUF.PetTarget.Backdrop.Color.a))
															oUF_LUI_pettarget.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.PetTarget.Border.Color.r), tonumber(db.oUF.PetTarget.Border.Color.g), tonumber(db.oUF.PetTarget.Border.Color.b), tonumber(db.oUF.PetTarget.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.PetTarget.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.PetTarget.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your PetTarget Health.\n\nDefault: "..defaults.profile.oUF.PetTarget.Health.Height,
															type = "input",
															get = function() return db.oUF.PetTarget.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.PetTarget.Health.Height = Height
																		oUF_LUI_pettarget.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Health.Padding,
															type = "input",
															get = function() return db.oUF.PetTarget.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.PetTarget.Health.Padding = Padding
																		oUF_LUI_pettarget.Health:ClearAllPoints()
																		oUF_LUI_pettarget.Health:SetPoint("TOPLEFT", oUF_LUI_pettarget, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_pettarget.Health:SetPoint("TOPRIGHT", oUF_LUI_pettarget, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.PetTarget.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.PetTarget.Health.Smooth = not db.oUF.PetTarget.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.PetTarget.Health.ColorClass = not db.oUF.PetTarget.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.PetTarget.Health.ColorGradient = false
																			db.oUF.PetTarget.Health.IndividualColor.Enable = false
																			
																			print("PetTarget Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.PetTarget.Health.ColorGradient = not db.oUF.PetTarget.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.PetTarget.Health.ColorClass = false
																			db.oUF.PetTarget.Health.IndividualColor.Enable = false
																			
																			print("PetTarget Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.PetTarget.Health.IndividualColor.Enable = not db.oUF.PetTarget.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.PetTarget.Health.ColorClass = false
																			db.oUF.PetTarget.Health.ColorGradient = false
																			
																			oUF_LUI_pettarget.Health:SetStatusBarColor(db.oUF.PetTarget.Health.IndividualColor.r, db.oUF.PetTarget.Health.IndividualColor.g, db.oUF.PetTarget.Health.IndividualColor.b)
																			oUF_LUI_pettarget.Health.bg:SetVertexColor(db.oUF.PetTarget.Health.IndividualColor.r*tonumber(db.oUF.PetTarget.Health.BGMultiplier), db.oUF.PetTarget.Health.IndividualColor.g*tonumber(db.oUF.PetTarget.Health.BGMultiplier), db.oUF.PetTarget.Health.IndividualColor.b*tonumber(db.oUF.PetTarget.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Health.IndividualColor.r, db.oUF.PetTarget.Health.IndividualColor.g, db.oUF.PetTarget.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Health.IndividualColor.r = r
																	db.oUF.PetTarget.Health.IndividualColor.g = g
																	db.oUF.PetTarget.Health.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_pettarget.Health.bg:SetVertexColor(r*tonumber(db.oUF.PetTarget.Health.BGMultiplier), g*tonumber(db.oUF.PetTarget.Health.BGMultiplier), b*tonumber(db.oUF.PetTarget.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.PetTarget.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.PetTarget.Health.Texture = HealthTex
																	oUF_LUI_pettarget.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.PetTarget.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.PetTarget.Health.TextureBG = HealthTexBG
																	oUF_LUI_pettarget.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.PetTarget.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.PetTarget.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.PetTarget.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_pettarget.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.PetTarget.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.PetTarget.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.PetTarget.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_pettarget.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.PetTarget.Power.Enable = not db.oUF.PetTarget.Power.Enable
																if EnablePower == true then
																	oUF_LUI_pettarget.Power:Show()
																else
																	oUF_LUI_pettarget.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your PetTarget Power.\n\nDefault: "..defaults.profile.oUF.PetTarget.Power.Height,
															type = "input",
															get = function() return db.oUF.PetTarget.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.PetTarget.Power.Height = Height
																		oUF_LUI_pettarget.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Power.Padding,
															type = "input",
															get = function() return db.oUF.PetTarget.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.PetTarget.Power.Padding = Padding
																		oUF_LUI_pettarget.Power:ClearAllPoints()
																		oUF_LUI_pettarget.Power:SetPoint("TOPLEFT", oUF_LUI_pettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_pettarget.Power:SetPoint("TOPRIGHT", oUF_LUI_pettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.PetTarget.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.PetTarget.Power.Smooth = not db.oUF.PetTarget.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.PetTarget.Power.ColorClass = not db.oUF.PetTarget.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.PetTarget.Power.ColorType = false
																			db.oUF.PetTarget.Power.IndividualColor.Enable = false
																			
																			print("PetTarget Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.PetTarget.Power.ColorType = not db.oUF.PetTarget.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.PetTarget.Power.ColorClass = false
																			db.oUF.PetTarget.Power.IndividualColor.Enable = false
																			
																			print("PetTarget Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.PetTarget.Power.IndividualColor.Enable = not db.oUF.PetTarget.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.PetTarget.Power.ColorType = false
																			db.oUF.PetTarget.Power.ColorClass = false
																			
																			oUF_LUI_pettarget.Power:SetStatusBarColor(db.oUF.PetTarget.Power.IndividualColor.r, db.oUF.PetTarget.Power.IndividualColor.g, db.oUF.PetTarget.Power.IndividualColor.b)
																			oUF_LUI_pettarget.Power.bg:SetVertexColor(db.oUF.PetTarget.Power.IndividualColor.r*tonumber(db.oUF.PetTarget.Power.BGMultiplier), db.oUF.PetTarget.Power.IndividualColor.g*tonumber(db.oUF.PetTarget.Power.BGMultiplier), db.oUF.PetTarget.Power.IndividualColor.b*tonumber(db.oUF.PetTarget.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Power.IndividualColor.r, db.oUF.PetTarget.Power.IndividualColor.g, db.oUF.PetTarget.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Power.IndividualColor.r = r
																	db.oUF.PetTarget.Power.IndividualColor.g = g
																	db.oUF.PetTarget.Power.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_pettarget.Power.bg:SetVertexColor(r*tonumber(db.oUF.PetTarget.Power.BGMultiplier), g*tonumber(db.oUF.PetTarget.Power.BGMultiplier), b*tonumber(db.oUF.PetTarget.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.PetTarget.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.PetTarget.Power.Texture = PowerTex
																	oUF_LUI_pettarget.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.PetTarget.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.PetTarget.Power.TextureBG = PowerTexBG
																	oUF_LUI_pettarget.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.PetTarget.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.PetTarget.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.PetTarget.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_pettarget.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.PetTarget.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.PetTarget.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.PetTarget.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_pettarget.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.PetTarget.Full.Enable = not db.oUF.PetTarget.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_pettarget.Full:Show()
																else
																	oUF_LUI_pettarget.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.PetTarget.Full.Height,
															type = "input",
															get = function() return db.oUF.PetTarget.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.PetTarget.Full.Height = Height
																		oUF_LUI_pettarget.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Full.Padding,
															type = "input",
															get = function() return db.oUF.PetTarget.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.PetTarget.Full.Padding = Padding
																	oUF_LUI_pettarget.Full:ClearAllPoints()
																	oUF_LUI_pettarget.Full:SetPoint("TOPLEFT", oUF_LUI_pettarget.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_pettarget.Full:SetPoint("TOPRIGHT", oUF_LUI_pettarget.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.PetTarget.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.PetTarget.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.PetTarget.Full.Texture = FullTex
																	oUF_LUI_pettarget.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.PetTarget.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.PetTarget.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.PetTarget.Full.Alpha = FullAlpha
																	oUF_LUI_pettarget.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.PetTarget.Full.Color.r, db.oUF.PetTarget.Full.Color.g, db.oUF.PetTarget.Full.Color.b, db.oUF.PetTarget.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.PetTarget.Full.Color.r = r
																	db.oUF.PetTarget.Full.Color.g = g
																	db.oUF.PetTarget.Full.Color.b = b
																	db.oUF.PetTarget.Full.Color.a = a
																	
																	oUF_LUI_pettarget.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									order = 6,
									disabled = function() return not db.oUF.PetTarget.Enable end,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.PetTarget.Texts.Name.Enable = not db.oUF.PetTarget.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_pettarget.Info:Show()
																else
																	oUF_LUI_pettarget.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget Name Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.Name.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.Name.Size = FontSize
																	oUF_LUI_pettarget.Info:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Name.Font),db.oUF.PetTarget.Texts.Name.Size,db.oUF.PetTarget.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget Name!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.Name.Font = Font
																	oUF_LUI_pettarget.Info:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Name.Font),db.oUF.PetTarget.Texts.Name.Size,db.oUF.PetTarget.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget Name.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Info:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Name.Font),db.oUF.PetTarget.Texts.Name.Size,db.oUF.PetTarget.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your PetTarget Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.PetTarget.Texts.Name.X = NameX
																		oUF_LUI_pettarget.Info:ClearAllPoints()
																		oUF_LUI_pettarget.Info:SetPoint(db.oUF.PetTarget.Texts.Name.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Name.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Name.X), tonumber(db.oUF.PetTarget.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.PetTarget.Texts.Name.Y = NameY
																		oUF_LUI_pettarget.Info:ClearAllPoints()
																		oUF_LUI_pettarget.Info:SetPoint(db.oUF.PetTarget.Texts.Name.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Name.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Name.X), tonumber(db.oUF.PetTarget.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget Name.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.Name.Point = positions[Point]
																	oUF_LUI_pettarget.Info:ClearAllPoints()
																	oUF_LUI_pettarget.Info:SetPoint(db.oUF.PetTarget.Texts.Name.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Name.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Name.X), tonumber(db.oUF.PetTarget.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget Name.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Info:ClearAllPoints()
																	oUF_LUI_pettarget.Info:SetPoint(db.oUF.PetTarget.Texts.Name.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Name.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Name.X), tonumber(db.oUF.PetTarget.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your PetTarget Name.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Format,
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.PetTarget.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.PetTarget.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your PetTarget Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Name.Length,
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.PetTarget.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.PetTarget.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the PetTarget Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.PetTarget.Texts.Name.ColorNameByClass = not db.oUF.PetTarget.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the PetTarget Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.PetTarget.Texts.Name.ColorClassByClass = not db.oUF.PetTarget.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.PetTarget.Texts.Name.ColorLevelByDifficulty = not db.oUF.PetTarget.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.PetTarget.Texts.Name.ShowClassification = not db.oUF.PetTarget.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.PetTarget.Texts.Name.ShowClassification end,
															get = function() return db.oUF.PetTarget.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.PetTarget.Texts.Name.ShortClassification = not db.oUF.PetTarget.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.Health.Enable = not db.oUF.PetTarget.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_pettarget.Health.value:Show()
															else
																oUF_LUI_pettarget.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget Health Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.Health.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.Health.Size = FontSize
																	oUF_LUI_pettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Health.Font),db.oUF.PetTarget.Texts.Health.Size,db.oUF.PetTarget.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your PetTarget Health.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.Format,
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.PetTarget.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.PetTarget.Texts.Health.Format = valueFormat[Format]
																	print("PetTarget Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget Health!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.Health.Font = Font
																	oUF_LUI_pettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Health.Font),db.oUF.PetTarget.Texts.Health.Size,db.oUF.PetTarget.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget Health.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Health.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Health.Font),db.oUF.PetTarget.Texts.Health.Size,db.oUF.PetTarget.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your PetTarget Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.PetTarget.Texts.Health.X = HealthX
																		oUF_LUI_pettarget.Health.value:ClearAllPoints()
																		oUF_LUI_pettarget.Health.value:SetPoint(db.oUF.PetTarget.Texts.Health.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Health.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Health.X), tonumber(db.oUF.PetTarget.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.PetTarget.Texts.Health.Y = HealthY
																		oUF_LUI_pettarget.Health.value:ClearAllPoints()
																		oUF_LUI_pettarget.Health.value:SetPoint(db.oUF.PetTarget.Texts.Health.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Health.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Health.X), tonumber(db.oUF.PetTarget.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget Health.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.Health.Point = positions[Point]
																	oUF_LUI_pettarget.Health.value:ClearAllPoints()
																	oUF_LUI_pettarget.Health.value:SetPoint(db.oUF.PetTarget.Texts.Health.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Health.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Health.X), tonumber(db.oUF.PetTarget.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget Health.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Health.value:ClearAllPoints()
																	oUF_LUI_pettarget.Health.value:SetPoint(db.oUF.PetTarget.Texts.Health.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Health.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Health.X), tonumber(db.oUF.PetTarget.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.Health.ColorClass = not db.oUF.PetTarget.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.Health.ColorGradient = false
																			db.oUF.PetTarget.Texts.Health.IndividualColor.Enable = false
																			
																			print("PetTarget Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.PetTarget.Texts.Health.ColorGradient = not db.oUF.PetTarget.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.PetTarget.Texts.Health.ColorClass = false
																			db.oUF.PetTarget.Texts.Health.IndividualColor.Enable = false
																			
																			print("PetTarget Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.Health.IndividualColor.Enable = not db.oUF.PetTarget.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.Health.ColorClass = false
																			db.oUF.PetTarget.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_pettarget.Health.value:SetTextColor(tonumber(db.oUF.PetTarget.Texts.Health.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.Health.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.Health.IndividualColor.r, db.oUF.PetTarget.Texts.Health.IndividualColor.g, db.oUF.PetTarget.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.Health.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.Health.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.PetTarget.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.PetTarget.Texts.Health.ShowDead = not db.oUF.PetTarget.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.Power.Enable = not db.oUF.PetTarget.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_pettarget.Power.value:Show()
															else
																oUF_LUI_pettarget.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget Power Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.Power.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.Power.Size = FontSize
																	oUF_LUI_pettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Power.Font),db.oUF.PetTarget.Texts.Power.Size,db.oUF.PetTarget.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your PetTarget Power.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.Format,
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.PetTarget.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.PetTarget.Texts.Power.Format = valueFormat[Format]
																	print("PetTarget Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget Power!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.Power.Font = Font
																	oUF_LUI_pettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Power.Font),db.oUF.PetTarget.Texts.Power.Size,db.oUF.PetTarget.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget Power.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Power.value:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.Power.Font),db.oUF.PetTarget.Texts.Power.Size,db.oUF.PetTarget.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your PetTarget Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.PetTarget.Texts.Power.X = PowerX
																		oUF_LUI_pettarget.Power.value:ClearAllPoints()
																		oUF_LUI_pettarget.Power.value:SetPoint(db.oUF.PetTarget.Texts.Power.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Power.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Power.X), tonumber(db.oUF.PetTarget.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															get = function() return db.oUF.PetTarget.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.PetTarget.Texts.Power.Y = PowerY
																		oUF_LUI_pettarget.Power.value:ClearAllPoints()
																		oUF_LUI_pettarget.Power.value:SetPoint(db.oUF.PetTarget.Texts.Power.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Power.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Power.X), tonumber(db.oUF.PetTarget.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget Power.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.Power.Point = positions[Point]
																	oUF_LUI_pettarget.Power.value:ClearAllPoints()
																	oUF_LUI_pettarget.Power.value:SetPoint(db.oUF.PetTarget.Texts.Power.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Power.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Power.X), tonumber(db.oUF.PetTarget.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget Power.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Power.value:ClearAllPoints()
																	oUF_LUI_pettarget.Power.value:SetPoint(db.oUF.PetTarget.Texts.Power.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.Power.RelativePoint, tonumber(db.oUF.PetTarget.Texts.Power.X), tonumber(db.oUF.PetTarget.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.Power.ColorClass = not db.oUF.PetTarget.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.Power.ColorType = false
																			db.oUF.PetTarget.Texts.Power.IndividualColor.Enable = false
																			
																			print("PetTarget Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.PetTarget.Texts.Power.ColorType = not db.oUF.PetTarget.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.PetTarget.Texts.Power.ColorClass = false
																			db.oUF.PetTarget.Texts.Power.IndividualColor.Enable = false
																			
																			print("PetTarget Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.Power.IndividualColor.Enable = not db.oUF.PetTarget.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.Power.ColorClass = false
																			db.oUF.PetTarget.Texts.Power.ColorType = false
																			
																			oUF_LUI_pettarget.Power.value:SetTextColor(tonumber(db.oUF.PetTarget.Texts.Power.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.Power.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.Power.IndividualColor.r, db.oUF.PetTarget.Texts.Power.IndividualColor.g, db.oUF.PetTarget.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.Power.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.Power.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.HealthPercent.Enable = not db.oUF.PetTarget.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_pettarget.Health.valuePercent:Show()
															else
																oUF_LUI_pettarget.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_pettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthPercent.Font),db.oUF.PetTarget.Texts.HealthPercent.Size,db.oUF.PetTarget.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show PetTarget HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.PetTarget.Texts.HealthPercent.ShowAlways = not db.oUF.PetTarget.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget HealthPercent!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.HealthPercent.Font = Font
																	oUF_LUI_pettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthPercent.Font),db.oUF.PetTarget.Texts.HealthPercent.Size,db.oUF.PetTarget.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget HealthPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthPercent.Font),db.oUF.PetTarget.Texts.HealthPercent.Size,db.oUF.PetTarget.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your PetTarget HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.PetTarget.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_pettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_pettarget.Health.valuePercent:SetPoint(db.oUF.PetTarget.Texts.HealthPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthPercent.X), tonumber(db.oUF.PetTarget.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.PetTarget.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_pettarget.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_pettarget.Health.valuePercent:SetPoint(db.oUF.PetTarget.Texts.HealthPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthPercent.X), tonumber(db.oUF.PetTarget.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget HealthPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_pettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_pettarget.Health.valuePercent:SetPoint(db.oUF.PetTarget.Texts.HealthPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthPercent.X), tonumber(db.oUF.PetTarget.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget HealthPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_pettarget.Health.valuePercent:SetPoint(db.oUF.PetTarget.Texts.HealthPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthPercent.X), tonumber(db.oUF.PetTarget.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.HealthPercent.ColorClass = not db.oUF.PetTarget.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.HealthPercent.ColorGradient = false
																			db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("PetTarget HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.PetTarget.Texts.HealthPercent.ColorGradient = not db.oUF.PetTarget.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.PetTarget.Texts.HealthPercent.ColorClass = false
																			db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("PetTarget HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.HealthPercent.ColorClass = false
																			db.oUF.PetTarget.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_pettarget.Health.valuePercent:SetTextColor(tonumber(db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.r, db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.g, db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.PetTarget.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.PetTarget.Texts.HealthPercent.ShowDead = not db.oUF.PetTarget.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.PowerPercent.Enable = not db.oUF.PetTarget.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_pettarget.Power.valuePercent:Show()
															else
																oUF_LUI_pettarget.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_pettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerPercent.Font),db.oUF.PetTarget.Texts.PowerPercent.Size,db.oUF.PetTarget.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show PetTarget PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.PetTarget.Texts.PowerPercent.ShowAlways = not db.oUF.PetTarget.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget PowerPercent!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.PowerPercent.Font = Font
																	oUF_LUI_pettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerPercent.Font),db.oUF.PetTarget.Texts.PowerPercent.Size,db.oUF.PetTarget.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget PowerPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerPercent.Font),db.oUF.PetTarget.Texts.PowerPercent.Size,db.oUF.PetTarget.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your PetTarget PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.PetTarget.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_pettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_pettarget.Power.valuePercent:SetPoint(db.oUF.PetTarget.Texts.PowerPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerPercent.X), tonumber(db.oUF.PetTarget.Texts.PowerPercent.Y))
																	end,
															order = 5,

														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.PetTarget.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_pettarget.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_pettarget.Power.valuePercent:SetPoint(db.oUF.PetTarget.Texts.PowerPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerPercent.X), tonumber(db.oUF.PetTarget.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget PowerPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_pettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_pettarget.Power.valuePercent:SetPoint(db.oUF.PetTarget.Texts.PowerPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerPercent.X), tonumber(db.oUF.PetTarget.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget PowerPercent.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_pettarget.Power.valuePercent:SetPoint(db.oUF.PetTarget.Texts.PowerPercent.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerPercent.X), tonumber(db.oUF.PetTarget.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.PowerPercent.ColorClass = not db.oUF.PetTarget.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.PowerPercent.ColorType = false
																			db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("PetTarget PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.PetTarget.Texts.PowerPercent.ColorType = not db.oUF.PetTarget.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.PetTarget.Texts.PowerPercent.ColorClass = false
																			db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("PetTarget PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.PowerPercent.ColorClass = false
																			db.oUF.PetTarget.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_pettarget.Power.valuePercent:SetTextColor(tonumber(db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.r, db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.g, db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget HealthMissing or not.",
													type = "toggle",

													width = "full",
													get = function() return db.oUF.PetTarget.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.HealthMissing.Enable = not db.oUF.PetTarget.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_pettarget.Health.valueMissing:Show()
															else
																oUF_LUI_pettarget.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_pettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthMissing.Font),db.oUF.PetTarget.Texts.HealthMissing.Size,db.oUF.PetTarget.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show PetTarget HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.PetTarget.Texts.HealthMissing.ShowAlways = not db.oUF.PetTarget.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.PetTarget.Texts.HealthMissing.ShortValue = not db.oUF.PetTarget.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget HealthMissing!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.HealthMissing.Font = Font
																	oUF_LUI_pettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthMissing.Font),db.oUF.PetTarget.Texts.HealthMissing.Size,db.oUF.PetTarget.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget HealthMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.HealthMissing.Font),db.oUF.PetTarget.Texts.HealthMissing.Size,db.oUF.PetTarget.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your PetTarget HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.PetTarget.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_pettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_pettarget.Health.valueMissing:SetPoint(db.oUF.PetTarget.Texts.HealthMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthMissing.X), tonumber(db.oUF.PetTarget.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.PetTarget.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_pettarget.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_pettarget.Health.valueMissing:SetPoint(db.oUF.PetTarget.Texts.HealthMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthMissing.X), tonumber(db.oUF.PetTarget.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget HealthMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_pettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_pettarget.Health.valueMissing:SetPoint(db.oUF.PetTarget.Texts.HealthMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthMissing.X), tonumber(db.oUF.PetTarget.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget HealthMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_pettarget.Health.valueMissing:SetPoint(db.oUF.PetTarget.Texts.HealthMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.HealthMissing.X), tonumber(db.oUF.PetTarget.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.HealthMissing.ColorClass = not db.oUF.PetTarget.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.HealthMissing.ColorGradient = false
																			db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("PetTarget HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.PetTarget.Texts.HealthMissing.ColorGradient = not db.oUF.PetTarget.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.PetTarget.Texts.HealthMissing.ColorClass = false
																			db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("PetTarget HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.HealthMissing.ColorClass = false
																			db.oUF.PetTarget.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_pettarget.Health.valueMissing:SetTextColor(tonumber(db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.r, db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.g, db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the PetTarget PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.PetTarget.Texts.PowerMissing.Enable = not db.oUF.PetTarget.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_pettarget.Power.valueMissing:Show()
															else
																oUF_LUI_pettarget.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your PetTarget PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.PetTarget.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_pettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerMissing.Font),db.oUF.PetTarget.Texts.PowerMissing.Size,db.oUF.PetTarget.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",

															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show PetTarget PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.PetTarget.Texts.PowerMissing.ShowAlways = not db.oUF.PetTarget.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.PetTarget.Texts.PowerMissing.ShortValue = not db.oUF.PetTarget.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for PetTarget PowerMissing!\n\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.PetTarget.Texts.PowerMissing.Font = Font
																	oUF_LUI_pettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerMissing.Font),db.oUF.PetTarget.Texts.PowerMissing.Size,db.oUF.PetTarget.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your PetTarget PowerMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.PetTarget.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.PetTarget.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_pettarget.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.PetTarget.Texts.PowerMissing.Font),db.oUF.PetTarget.Texts.PowerMissing.Size,db.oUF.PetTarget.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your PetTarget PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.PetTarget.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_pettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_pettarget.Power.valueMissing:SetPoint(db.oUF.PetTarget.Texts.PowerMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerMissing.X), tonumber(db.oUF.PetTarget.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your PetTarget PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.PetTarget.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_pettarget.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_pettarget.Power.valueMissing:SetPoint(db.oUF.PetTarget.Texts.PowerMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerMissing.X), tonumber(db.oUF.PetTarget.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your PetTarget PowerMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.PetTarget.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_pettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_pettarget.Power.valueMissing:SetPoint(db.oUF.PetTarget.Texts.PowerMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerMissing.X), tonumber(db.oUF.PetTarget.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your PetTarget PowerMissing.\nDefault: "..defaults.profile.oUF.PetTarget.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.PetTarget.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.PetTarget.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_pettarget.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_pettarget.Power.valueMissing:SetPoint(db.oUF.PetTarget.Texts.PowerMissing.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.PetTarget.Texts.PowerMissing.X), tonumber(db.oUF.PetTarget.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.PetTarget.Texts.PowerMissing.ColorClass = not db.oUF.PetTarget.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.PetTarget.Texts.PowerMissing.ColorType = false
																			db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("PetTarget PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.PetTarget.Texts.PowerMissing.ColorType = not db.oUF.PetTarget.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.PetTarget.Texts.PowerMissing.ColorClass = false
																			db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("PetTarget PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PetTarget PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.PetTarget.Texts.PowerMissing.ColorClass = false
																			db.oUF.PetTarget.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_pettarget.Power.valueMissing:SetTextColor(tonumber(db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual PetTarget PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.r, db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.g, db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.PetTarget.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_pettarget.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									disabled = function() return not db.oUF.PetTarget.Enable end,
									type = "group",
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.PetTarget.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.PetTarget.Portrait.Enable = not db.oUF.PetTarget.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.PetTarget.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.PetTarget.Portrait.Enable end,
											get = function() return db.oUF.PetTarget.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.PetTarget.Portrait.Width = PortraitWidth
														oUF_LUI_pettarget.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.PetTarget.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.PetTarget.Portrait.Enable end,
											get = function() return db.oUF.PetTarget.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.PetTarget.Portrait.Height = PortraitHeight
														oUF_LUI_pettarget.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.PetTarget.Portrait.Enable end,
											get = function() return db.oUF.PetTarget.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.PetTarget.Portrait.X = PortraitX
														oUF_LUI_pettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_pettarget.Health, "TOPLEFT", PortraitX, db.oUF.PetTarget.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.PetTarget.Portrait.Enable end,
											get = function() return db.oUF.PetTarget.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.PetTarget.Portrait.Y = PortraitY
														oUF_LUI_pettarget.Portrait:SetPoint("TOPLEFT", oUF_LUI_pettarget.Health, "TOPLEFT", db.oUF.PetTarget.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.PetTarget.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.PetTarget.Icons.Lootmaster.Enable = not db.oUF.PetTarget.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.PetTarget.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_pettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_pettarget.MasterLooter:SetPoint(db.oUF.PetTarget.Icons.Lootmaster.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Lootmaster, tonumber(LootMasterX), tonumber(db.oUF.PetTarget.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.PetTarget.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_pettarget.MasterLooter:ClearAllPoints()
																oUF_LUI_pettarget.MasterLooter:SetPoint(db.oUF.PetTarget.Icons.Lootmaster.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Lootmaster, tonumber(db.oUF.PetTarget.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.PetTarget.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_pettarget.MasterLooter:ClearAllPoints()
															oUF_LUI_pettarget.MasterLooter:SetPoint(db.oUF.PetTarget.Icons.Lootmaster.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Lootmaster.Point, tonumber(db.oUF.PetTarget.Icons.Lootmaster.X), tonumber(db.oUF.PetTarget.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.PetTarget.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_pettarget.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_pettarget.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.MasterLooter:IsShown() then oUF_LUI_pettarget.MasterLooter:Hide() else oUF_LUI_pettarget.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.PetTarget.Icons.Leader.Enable = not db.oUF.PetTarget.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.PetTarget.Icons.Leader.X = LeaderX
																oUF_LUI_pettarget.Leader:ClearAllPoints()
																oUF_LUI_pettarget.Leader:SetPoint(db.oUF.PetTarget.Icons.Leader.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.PetTarget.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.PetTarget.Icons.Leader.Y = LeaderY
																oUF_LUI_pettarget.Leader:ClearAllPoints()
																oUF_LUI_pettarget.Leader:SetPoint(db.oUF.PetTarget.Icons.Leader.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Leader.Point, tonumber(db.oUF.PetTarget.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.PetTarget.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_pettarget.Leader:ClearAllPoints()
															oUF_LUI_pettarget.Leader:SetPoint(db.oUF.PetTarget.Icons.Leader.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Leader.Point, tonumber(db.oUF.PetTarget.Icons.Leader.X), tonumber(db.oUF.PetTarget.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.Leader.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.PetTarget.Icons.Leader.Size = LeaderSize
															oUF_LUI_pettarget.Leader:SetHeight(LeaderSize)
															oUF_LUI_pettarget.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.Leader:IsShown() then oUF_LUI_pettarget.Leader:Hide() else oUF_LUI_pettarget.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.PetTarget.Icons.Role.Enable = not db.oUF.PetTarget.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Role.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.PetTarget.Icons.Role.X = RoleX
																oUF_LUI_pettarget.LFDRole:ClearAllPoints()
																oUF_LUI_pettarget.LFDRole:SetPoint(db.oUF.PetTarget.Icons.Role.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.PetTarget.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Role.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.PetTarget.Icons.Role.Y = RoleY
																oUF_LUI_pettarget.LFDRole:ClearAllPoints()
																oUF_LUI_pettarget.LFDRole:SetPoint(db.oUF.PetTarget.Icons.Role.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Role.Point, tonumber(db.oUF.PetTarget.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.PetTarget.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_pettarget.LFDRole:ClearAllPoints()
															oUF_LUI_pettarget.LFDRole:SetPoint(db.oUF.PetTarget.Icons.Role.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Role.Point, tonumber(db.oUF.PetTarget.Icons.Role.X), tonumber(db.oUF.PetTarget.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.Role.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.PetTarget.Icons.Role.Size = RoleSize
															oUF_LUI_pettarget.LFDRole:SetHeight(RoleSize)
															oUF_LUI_pettarget.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.LFDRole:IsShown() then oUF_LUI_pettarget.LFDRole:Hide() else oUF_LUI_pettarget.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.PetTarget.Icons.Raid.Enable = not db.oUF.PetTarget.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end

																db.oUF.PetTarget.Icons.Raid.X = RaidX
																oUF_LUI_pettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_pettarget.RaidIcon:SetPoint(db.oUF.PetTarget.Icons.Raid.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.PetTarget.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.PetTarget.Icons.Raid.Y = RaidY
																oUF_LUI_pettarget.RaidIcon:ClearAllPoints()
																oUF_LUI_pettarget.RaidIcon:SetPoint(db.oUF.PetTarget.Icons.Raid.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Raid.Point, tonumber(db.oUF.PetTarget.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.PetTarget.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_pettarget.RaidIcon:ClearAllPoints()
															oUF_LUI_pettarget.RaidIcon:SetPoint(db.oUF.PetTarget.Icons.Raid.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Raid.Point, tonumber(db.oUF.PetTarget.Icons.Raid.X), tonumber(db.oUF.PetTarget.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.PetTarget.Icons.Raid.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.PetTarget.Icons.Raid.Size = RaidSize
															oUF_LUI_pettarget.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_pettarget.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.RaidIcon:IsShown() then oUF_LUI_pettarget.RaidIcon:Hide() else oUF_LUI_pettarget.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.PetTarget.Icons.Resting.Enable = not db.oUF.PetTarget.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.PetTarget.Icons.Resting.X = RestingX
																oUF_LUI_pettarget.Resting:ClearAllPoints()
																oUF_LUI_pettarget.Resting:SetPoint(db.oUF.PetTarget.Icons.Resting.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.PetTarget.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.PetTarget.Icons.Resting.Y = RestingY
																oUF_LUI_pettarget.Resting:ClearAllPoints()
																oUF_LUI_pettarget.Resting:SetPoint(db.oUF.PetTarget.Icons.Resting.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Resting.Point, tonumber(db.oUF.PetTarget.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.PetTarget.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_pettarget.Resting:ClearAllPoints()
															oUF_LUI_pettarget.Resting:SetPoint(db.oUF.PetTarget.Icons.Resting.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Resting.Point, tonumber(db.oUF.PetTarget.Icons.Resting.X), tonumber(db.oUF.PetTarget.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.Resting.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.PetTarget.Icons.Resting.Size = RestingSize
															oUF_LUI_pettarget.Resting:SetHeight(RestingSize)
															oUF_LUI_pettarget.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.Resting:IsShown() then oUF_LUI_pettarget.Resting:Hide() else oUF_LUI_pettarget.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.PetTarget.Icons.Combat.Enable = not db.oUF.PetTarget.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.PetTarget.Icons.Combat.X = CombatX
																oUF_LUI_pettarget.Combat:ClearAllPoints()
																oUF_LUI_pettarget.Combat:SetPoint(db.oUF.PetTarget.Icons.Combat.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.PetTarget.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.PetTarget.Icons.Combat.Y = CombatY
																oUF_LUI_pettarget.Combat:ClearAllPoints()
																oUF_LUI_pettarget.Combat:SetPoint(db.oUF.PetTarget.Icons.Combat.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Combat.Point, tonumber(db.oUF.PetTarget.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)
															db.oUF.PetTarget.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_pettarget.Combat:ClearAllPoints()
															oUF_LUI_pettarget.Combat:SetPoint(db.oUF.PetTarget.Icons.Combat.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.Combat.Point, tonumber(db.oUF.PetTarget.Icons.Combat.X), tonumber(db.oUF.PetTarget.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.Combat.Enable end,
													get = function() return db.oUF.PetTarget.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.PetTarget.Icons.Combat.Size = CombatSize
															oUF_LUI_pettarget.Combat:SetHeight(CombatSize)
															oUF_LUI_pettarget.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.PetTarget.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.Combat:IsShown() then oUF_LUI_pettarget.Combat:Hide() else oUF_LUI_pettarget.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.PetTarget.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.PetTarget.Icons.PvP.Enable = not db.oUF.PetTarget.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.PetTarget.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.PetTarget.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.PetTarget.Icons.PvP.X = PvPX
																oUF_LUI_pettarget.PvP:ClearAllPoints()
																oUF_LUI_pettarget.PvP:SetPoint(db.oUF.PetTarget.Icons.PvP.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.PetTarget.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.PetTarget.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.PetTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.PetTarget.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.PetTarget.Icons.PvP.Y = PvPY
																oUF_LUI_pettarget.PvP:ClearAllPoints()
																oUF_LUI_pettarget.PvP:SetPoint(db.oUF.PetTarget.Icons.PvP.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.PvP.Point, tonumber(db.oUF.PetTarget.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.PetTarget.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.PetTarget.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.PetTarget.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_pettarget.PvP:ClearAllPoints()
															oUF_LUI_pettarget.PvP:SetPoint(db.oUF.PetTarget.Icons.PvP.Point, oUF_LUI_pettarget, db.oUF.PetTarget.Icons.PvP.Point, tonumber(db.oUF.PetTarget.Icons.PvP.X), tonumber(db.oUF.PetTarget.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.PetTarget.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.PetTarget.Icons.PvP.Enable end,
													get = function() return db.oUF.PetTarget.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.PetTarget.Icons.PvP.Size = PvPSize
															oUF_LUI_pettarget.PvP:SetHeight(PvPSize)
															oUF_LUI_pettarget.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.PetTarget.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_pettarget.PvP:IsShown() then oUF_LUI_pettarget.PvP:Hide() else oUF_LUI_pettarget.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						Party = {
							name = "Party",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 12,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Party",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a Party Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Enable end,
													set = function(self,Enable)
																db.oUF.Party.Enable = not db.oUF.Party.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												ShowPlayer = {
													name = "Show Player",
													disabled = function() return not db.oUF.Party.Enable end,
													desc = "Wether you want to show your Player within the Party Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.ShowPlayer end,
													set = function(self,ShowPlayer)
																db.oUF.Party.ShowPlayer = not db.oUF.Party.ShowPlayer
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 2,
												},
												ShowInRaid = {
													name = "Show in Raid",
													disabled = function() return not db.oUF.Party.Enable end,
													desc = "Wether you want to show your Party Frame while in Raids with more than 5 Players or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.ShowInRaid end,
													set = function(self,ShowInRaid)
																db.oUF.Party.ShowInRaid = not db.oUF.Party.ShowInRaid
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 3,
												},
												Padding = {
													name = "Padding",
													disabled = function() return not db.oUF.Party.Enable end,
													desc = "Choose the Padding between your Partymembers.\nDefault: "..defaults.profile.oUF.Party.Padding,
													type = "input",
													get = function() return db.oUF.Party.Padding end,
													set = function(self,Padding)
																if Padding == nil or Padding == "" then
																	Padding = "0"
																end
																db.oUF.Party.Padding = Padding
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 4,
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.Party.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												PartyX = {
													name = "X Value",
													desc = "X Value for your Party Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.X,
													type = "input",
													get = function() return db.oUF.Party.X end,
													set = function(self,PartyX)
																if PartyX == nil or PartyX == "" then
																	PartyX = "0"
																end
																db.oUF.Party.X = PartyX
																party:ClearAllPoints()
																party:SetPoint("LEFT", UIParent, "LEFT", tonumber(PartyX), tonumber(db.oUF.Party.Y))
															end,
													order = 2,
												},
												PartyY = {
													name = "Y Value",
													desc = "Y Value for your Party Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Y,
													type = "input",
													get = function() return db.oUF.Party.Y end,
													set = function(self,PartyY)
																if PartyY == nil or PartyY == "" then
																	PartyY = "0"
																end
																db.oUF.Party.Y = PartyY
																party:ClearAllPoints()
																party:SetPoint("LEFT", UIParent, "LEFT", tonumber(db.oUF.Party.X), tonumber(PartyY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											disabled = function() return not db.oUF.Party.Enable end,
											order = 2,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												PartyHeight = {
													name = "Height",
													desc = "Decide the Height of your Party Frame.\n\nDefault: "..defaults.profile.oUF.Party.Height,
													type = "input",
													get = function() return db.oUF.Party.Height end,
													set = function(self,PartyHeight)
																if PartyHeight == nil or PartyHeight == "" then
																	PartyHeight = "0"
																end
																db.oUF.Party.Height = PartyHeight
																oUF_LUI_partyUnitButton1:SetHeight(tonumber(PartyHeight))
															end,
													order = 2,
												},
												PartyWidth = {
													name = "Width",
													desc = "Decide the Width of your Party Frame.\n\nDefault: "..defaults.profile.oUF.Party.Width,
													type = "input",
													get = function() return db.oUF.Party.Width end,
													set = function(self,PartyWidth)
																if PartyWidth == nil or PartyWidth == "" then
																	PartyWidth = "0"
																end
																db.oUF.Party.Width = PartyWidth
																oUF_LUI_partyUnitButton1:SetWidth(tonumber(PartyWidth))
																
																if db.oUF.auras.party.buffs_enable == true then
																	oUF_LUI_partyUnitButton1.Buffs:SetWidth(tonumber(PartyWidth))
																end
																
																if db.oUF.auras.party.debuffs_enable == true then
																	oUF_LUI_partyUnitButton1.Debuffs:SetWidth(tonumber(PartyWidth))
																end
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.Party.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Party.Backdrop.Color.r, db.oUF.Party.Backdrop.Color.g, db.oUF.Party.Backdrop.Color.b, db.oUF.Party.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Party.Backdrop.Color.r = r
															db.oUF.Party.Backdrop.Color.g = g
															db.oUF.Party.Backdrop.Color.b = b
															db.oUF.Party.Backdrop.Color.a = a

															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(r,g,b,a)
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Party.Border.Color.r, db.oUF.Party.Border.Color.g, db.oUF.Party.Border.Color.b, db.oUF.Party.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Party.Border.Color.r = r
															db.oUF.Party.Border.Color.g = g
															db.oUF.Party.Border.Color.b = b
															db.oUF.Party.Border.Color.a = a
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Party.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Party.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Party.Backdrop.Texture = BackdropTexture
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Party.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Party.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Party.Border.EdgeFile = BorderTexture
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Party.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Party.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Party.Border.EdgeSize = BorderSize
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Party.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Party.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_partyUnitButton1.FrameBackdrop:ClearAllPoints()
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1, "TOPLEFT", tonumber(db.oUF.Party.Backdrop.Padding.Left), tonumber(db.oUF.Party.Backdrop.Padding.Top))
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_partyUnitButton1, "BOTTOMRIGHT", tonumber(db.oUF.Party.Backdrop.Padding.Right), tonumber(db.oUF.Party.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Party.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Party.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_partyUnitButton1.FrameBackdrop:ClearAllPoints()
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1, "TOPLEFT", tonumber(db.oUF.Party.Backdrop.Padding.Left), tonumber(db.oUF.Party.Backdrop.Padding.Top))
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_partyUnitButton1, "BOTTOMRIGHT", tonumber(db.oUF.Party.Backdrop.Padding.Right), tonumber(db.oUF.Party.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Party.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Party.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_partyUnitButton1.FrameBackdrop:ClearAllPoints()
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1, "TOPLEFT", tonumber(db.oUF.Party.Backdrop.Padding.Left), tonumber(db.oUF.Party.Backdrop.Padding.Top))
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_partyUnitButton1, "BOTTOMRIGHT", tonumber(db.oUF.Party.Backdrop.Padding.Right), tonumber(db.oUF.Party.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Party.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Party.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_partyUnitButton1.FrameBackdrop:ClearAllPoints()
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1, "TOPLEFT", tonumber(db.oUF.Party.Backdrop.Padding.Left), tonumber(db.oUF.Party.Backdrop.Padding.Top))
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_partyUnitButton1, "BOTTOMRIGHT", tonumber(db.oUF.Party.Backdrop.Padding.Right), tonumber(db.oUF.Party.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Party.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Party.Border.Insets.Left = InsetLeft
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Party.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Party.Border.Insets.Right = InsetRight
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Party.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Party.Border.Insets.Top = InsetTop
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Party.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Party.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Party.Border.Insets.Bottom = InsetBottom
														oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Party.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Party.Border.EdgeFile), edgeSize = tonumber(db.oUF.Party.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Party.Border.Insets.Left), right = tonumber(db.oUF.Party.Border.Insets.Right), top = tonumber(db.oUF.Party.Border.Insets.Top), bottom = tonumber(db.oUF.Party.Border.Insets.Bottom)}
															})
															
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Party.Backdrop.Color.r), tonumber(db.oUF.Party.Backdrop.Color.g), tonumber(db.oUF.Party.Backdrop.Color.b), tonumber(db.oUF.Party.Backdrop.Color.a))
															oUF_LUI_partyUnitButton1.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Party.Border.Color.r), tonumber(db.oUF.Party.Border.Color.g), tonumber(db.oUF.Party.Border.Color.b), tonumber(db.oUF.Party.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.Party.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Party.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Party Health.\n\nDefault: "..defaults.profile.oUF.Party.Health.Height,
															type = "input",
															get = function() return db.oUF.Party.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Party.Health.Height = Height
																		oUF_LUI_partyUnitButton1.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Health.Padding,
															type = "input",
															get = function() return db.oUF.Party.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Party.Health.Padding = Padding
																		oUF_LUI_partyUnitButton1.Health:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_partyUnitButton1.Health:SetPoint("TOPRIGHT", oUF_LUI_partyUnitButton1, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Party.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Party.Health.Smooth = not db.oUF.Party.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Party.Health.ColorClass = not db.oUF.Party.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Party.Health.ColorGradient = false
																			db.oUF.Party.Health.IndividualColor.Enable = false
																			
																			print("Party Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Party.Health.ColorGradient = not db.oUF.Party.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Party.Health.ColorClass = false
																			db.oUF.Party.Health.IndividualColor.Enable = false
																			
																			print("Party Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Party.Health.IndividualColor.Enable = not db.oUF.Party.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Party.Health.ColorClass = false
																			db.oUF.Party.Health.ColorGradient = false
																			
																			oUF_LUI_partyUnitButton1.Health:SetStatusBarColor(db.oUF.Party.Health.IndividualColor.r, db.oUF.Party.Health.IndividualColor.g, db.oUF.Party.Health.IndividualColor.b)
																			oUF_LUI_partyUnitButton1.Health.bg:SetVertexColor(db.oUF.Party.Health.IndividualColor.r*tonumber(db.oUF.Party.Health.BGMultiplier), db.oUF.Party.Health.IndividualColor.g*tonumber(db.oUF.Party.Health.BGMultiplier), db.oUF.Party.Health.IndividualColor.b*tonumber(db.oUF.Party.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Health.IndividualColor.r, db.oUF.Party.Health.IndividualColor.g, db.oUF.Party.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Health.IndividualColor.r = r
																	db.oUF.Party.Health.IndividualColor.g = g
																	db.oUF.Party.Health.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_partyUnitButton1.Health.bg:SetVertexColor(r*tonumber(db.oUF.Party.Health.BGMultiplier), g*tonumber(db.oUF.Party.Health.BGMultiplier), b*tonumber(db.oUF.Party.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Party.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Party.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Party.Health.Texture = HealthTex
																	oUF_LUI_partyUnitButton1.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Party.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Party.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Party.Health.TextureBG = HealthTexBG
																	oUF_LUI_partyUnitButton1.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Party.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Party.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Party.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_partyUnitButton1.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Party.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Party.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Party.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_partyUnitButton1.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Party.Power.Enable = not db.oUF.Party.Power.Enable
																if EnablePower == true then
																	oUF_LUI_partyUnitButton1.Power:Show()
																else
																	oUF_LUI_partyUnitButton1.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Party Power.\n\nDefault: "..defaults.profile.oUF.Party.Power.Height,
															type = "input",
															get = function() return db.oUF.Party.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Party.Power.Height = Height
																		oUF_LUI_partyUnitButton1.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Power.Padding,
															type = "input",
															get = function() return db.oUF.Party.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Party.Power.Padding = Padding
																		oUF_LUI_partyUnitButton1.Power:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_partyUnitButton1.Power:SetPoint("TOPRIGHT", oUF_LUI_partyUnitButton1.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Party.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Party.Power.Smooth = not db.oUF.Party.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Party.Power.ColorClass = not db.oUF.Party.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Party.Power.ColorType = false
																			db.oUF.Party.Power.IndividualColor.Enable = false
																			
																			print("Party Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Party.Power.ColorType = not db.oUF.Party.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Party.Power.ColorClass = false
																			db.oUF.Party.Power.IndividualColor.Enable = false
																			
																			print("Party Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Party.Power.IndividualColor.Enable = not db.oUF.Party.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Party.Power.ColorType = false
																			db.oUF.Party.Power.ColorClass = false
																			
																			oUF_LUI_partyUnitButton1.Power:SetStatusBarColor(db.oUF.Party.Power.IndividualColor.r, db.oUF.Party.Power.IndividualColor.g, db.oUF.Party.Power.IndividualColor.b)
																			oUF_LUI_partyUnitButton1.Power.bg:SetVertexColor(db.oUF.Party.Power.IndividualColor.r*tonumber(db.oUF.Party.Power.BGMultiplier), db.oUF.Party.Power.IndividualColor.g*tonumber(db.oUF.Party.Power.BGMultiplier), db.oUF.Party.Power.IndividualColor.b*tonumber(db.oUF.Party.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Power.IndividualColor.r, db.oUF.Party.Power.IndividualColor.g, db.oUF.Party.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Power.IndividualColor.r = r
																	db.oUF.Party.Power.IndividualColor.g = g
																	db.oUF.Party.Power.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_partyUnitButton1.Power.bg:SetVertexColor(r*tonumber(db.oUF.Party.Power.BGMultiplier), g*tonumber(db.oUF.Party.Power.BGMultiplier), b*tonumber(db.oUF.Party.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Party.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Party.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Party.Power.Texture = PowerTex
																	oUF_LUI_partyUnitButton1.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Party.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Party.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.Party.Power.TextureBG = PowerTexBG
																	oUF_LUI_partyUnitButton1.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Party.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Party.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Party.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_partyUnitButton1.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Party.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Party.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Party.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_partyUnitButton1.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Party.Full.Enable = not db.oUF.Party.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_partyUnitButton1_Full:Show()
																else
																	oUF_LUI_partyUnitButton1_Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Party.Full.Height,
															type = "input",
															get = function() return db.oUF.Party.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Party.Full.Height = Height
																		oUF_LUI_partyUnitButton1_Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Full.Padding,
															type = "input",
															get = function() return db.oUF.Party.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Party.Full.Padding = Padding
																	oUF_LUI_partyUnitButton1_Full:ClearAllPoints()
																	oUF_LUI_partyUnitButton1_Full:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_partyUnitButton1_Full:SetPoint("TOPRIGHT", oUF_LUI_partyUnitButton1.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Party.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Party.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Party.Full.Texture = FullTex
																	oUF_LUI_partyUnitButton1_Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Party.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Party.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Party.Full.Alpha = FullAlpha
																	oUF_LUI_partyUnitButton1_Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Party.Full.Color.r, db.oUF.Party.Full.Color.g, db.oUF.Party.Full.Color.b, db.oUF.Party.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Party.Full.Color.r = r
																	db.oUF.Party.Full.Color.g = g
																	db.oUF.Party.Full.Color.b = b
																	db.oUF.Party.Full.Color.a = a
																	
																	oUF_LUI_partyUnitButton1_Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Party.Enable end,
									order = 6,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Party.Texts.Name.Enable = not db.oUF.Party.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_partyUnitButton1.Info:Show()
																else
																	oUF_LUI_partyUnitButton1.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party Name Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.Name.Size,
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.Name.Size = FontSize
																	oUF_LUI_partyUnitButton1.Info:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Name.Font),db.oUF.Party.Texts.Name.Size,db.oUF.Party.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party Name!\n\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Font,
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.Name.Font = Font
																	oUF_LUI_partyUnitButton1.Info:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Name.Font),db.oUF.Party.Texts.Name.Size,db.oUF.Party.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party Name.\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Outline,
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Info:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Name.Font),db.oUF.Party.Texts.Name.Size,db.oUF.Party.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Party Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Party.Texts.Name.X = NameX
																		oUF_LUI_partyUnitButton1.Info:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Info:SetPoint(db.oUF.Party.Texts.Name.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Name.RelativePoint, tonumber(db.oUF.Party.Texts.Name.X), tonumber(db.oUF.Party.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Party Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Party.Texts.Name.Y = NameY
																		oUF_LUI_partyUnitButton1.Info:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Info:SetPoint(db.oUF.Party.Texts.Name.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Name.RelativePoint, tonumber(db.oUF.Party.Texts.Name.X), tonumber(db.oUF.Party.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party Name.\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.Name.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Info:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Info:SetPoint(db.oUF.Party.Texts.Name.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Name.RelativePoint, tonumber(db.oUF.Party.Texts.Name.X), tonumber(db.oUF.Party.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party Name.\nDefault: "..defaults.profile.oUF.Party.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Info:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Info:SetPoint(db.oUF.Party.Texts.Name.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Name.RelativePoint, tonumber(db.oUF.Party.Texts.Name.X), tonumber(db.oUF.Party.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Party Name.\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Format,
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,

															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Party.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Party.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Party Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Party.Texts.Name.Length,
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Party.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Party.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Party Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Party.Texts.Name.ColorNameByClass = not db.oUF.Party.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Party Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Party.Texts.Name.ColorClassByClass = not db.oUF.Party.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Party.Texts.Name.ColorLevelByDifficulty = not db.oUF.Party.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Party.Texts.Name.Enable end,
															get = function() return db.oUF.Party.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Party.Texts.Name.ShowClassification = not db.oUF.Party.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Party.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Party.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Party.Texts.Name.ShortClassification = not db.oUF.Party.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.Health.Enable = not db.oUF.Party.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Health.value:Show()
															else
																oUF_LUI_partyUnitButton1.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party Health Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.Health.Size,
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.Health.Size = FontSize
																	oUF_LUI_partyUnitButton1.Health.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Health.Font),db.oUF.Party.Texts.Health.Size,db.oUF.Party.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Party Health.\nDefault: "..defaults.profile.oUF.Party.Texts.Health.Format,
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Party.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Party.Texts.Health.Format = valueFormat[Format]
																	print("Party Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party Health!\n\nDefault: "..defaults.profile.oUF.Party.Texts.Health.Font,
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.Health.Font = Font
																	oUF_LUI_partyUnitButton1.Health.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Health.Font),db.oUF.Party.Texts.Health.Size,db.oUF.Party.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party Health.\nDefault: "..defaults.profile.oUF.Party.Texts.Health.Outline,
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Health.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Health.Font),db.oUF.Party.Texts.Health.Size,db.oUF.Party.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Party Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															get = function() return db.oUF.Party.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Party.Texts.Health.X = HealthX
																		oUF_LUI_partyUnitButton1.Health.value:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.value:SetPoint(db.oUF.Party.Texts.Health.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Health.RelativePoint, tonumber(db.oUF.Party.Texts.Health.X), tonumber(db.oUF.Party.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Party Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															get = function() return db.oUF.Party.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Party.Texts.Health.Y = HealthY
																		oUF_LUI_partyUnitButton1.Health.value:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.value:SetPoint(db.oUF.Party.Texts.Health.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Health.RelativePoint, tonumber(db.oUF.Party.Texts.Health.X), tonumber(db.oUF.Party.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party Health.\nDefault: "..defaults.profile.oUF.Party.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.Health.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Health.value:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.value:SetPoint(db.oUF.Party.Texts.Health.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Health.RelativePoint, tonumber(db.oUF.Party.Texts.Health.X), tonumber(db.oUF.Party.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party Health.\nDefault: "..defaults.profile.oUF.Party.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Health.value:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.value:SetPoint(db.oUF.Party.Texts.Health.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Health.RelativePoint, tonumber(db.oUF.Party.Texts.Health.X), tonumber(db.oUF.Party.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.Health.ColorClass = not db.oUF.Party.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.Health.ColorGradient = false
																			db.oUF.Party.Texts.Health.IndividualColor.Enable = false
																			
																			print("Party Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Party.Texts.Health.ColorGradient = not db.oUF.Party.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Party.Texts.Health.ColorClass = false
																			db.oUF.Party.Texts.Health.IndividualColor.Enable = false
																			
																			print("Party Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.Health.IndividualColor.Enable = not db.oUF.Party.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.Health.ColorClass = false
																			db.oUF.Party.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_partyUnitButton1.Health.value:SetTextColor(tonumber(db.oUF.Party.Texts.Health.IndividualColor.r),tonumber(db.oUF.Party.Texts.Health.IndividualColor.g),tonumber(db.oUF.Party.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.Health.IndividualColor.r, db.oUF.Party.Texts.Health.IndividualColor.g, db.oUF.Party.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.Health.IndividualColor.r = r
																	db.oUF.Party.Texts.Health.IndividualColor.g = g
																	db.oUF.Party.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Party.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Party.Texts.Health.ShowDead = not db.oUF.Party.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.Power.Enable = not db.oUF.Party.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Power.value:Show()
															else
																oUF_LUI_partyUnitButton1.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party Power Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.Power.Size,
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.Power.Size = FontSize
																	oUF_LUI_partyUnitButton1.Power.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Power.Font),db.oUF.Party.Texts.Power.Size,db.oUF.Party.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Party Power.\nDefault: "..defaults.profile.oUF.Party.Texts.Power.Format,
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Party.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Party.Texts.Power.Format = valueFormat[Format]
																	print("Party Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party Power!\n\nDefault: "..defaults.profile.oUF.Party.Texts.Power.Font,
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.Power.Font = Font
																	oUF_LUI_partyUnitButton1.Power.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Power.Font),db.oUF.Party.Texts.Power.Size,db.oUF.Party.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party Power.\nDefault: "..defaults.profile.oUF.Party.Texts.Power.Outline,
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Power.value:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.Power.Font),db.oUF.Party.Texts.Power.Size,db.oUF.Party.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Party Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															get = function() return db.oUF.Party.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Party.Texts.Power.X = PowerX
																		oUF_LUI_partyUnitButton1.Power.value:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.value:SetPoint(db.oUF.Party.Texts.Power.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Power.RelativePoint, tonumber(db.oUF.Party.Texts.Power.X), tonumber(db.oUF.Party.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Party Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															get = function() return db.oUF.Party.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Party.Texts.Power.Y = PowerY
																		oUF_LUI_partyUnitButton1.Power.value:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.value:SetPoint(db.oUF.Party.Texts.Power.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Power.RelativePoint, tonumber(db.oUF.Party.Texts.Power.X), tonumber(db.oUF.Party.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party Power.\nDefault: "..defaults.profile.oUF.Party.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.Power.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Power.value:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.value:SetPoint(db.oUF.Party.Texts.Power.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Power.RelativePoint, tonumber(db.oUF.Party.Texts.Power.X), tonumber(db.oUF.Party.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party Power.\nDefault: "..defaults.profile.oUF.Party.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Power.value:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.value:SetPoint(db.oUF.Party.Texts.Power.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.Power.RelativePoint, tonumber(db.oUF.Party.Texts.Power.X), tonumber(db.oUF.Party.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.Power.ColorClass = not db.oUF.Party.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.Power.ColorType = false
																			db.oUF.Party.Texts.Power.IndividualColor.Enable = false
																			
																			print("Party Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Party.Texts.Power.ColorType = not db.oUF.Party.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Party.Texts.Power.ColorClass = false
																			db.oUF.Party.Texts.Power.IndividualColor.Enable = false
																			
																			print("Party Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.Power.IndividualColor.Enable = not db.oUF.Party.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.Power.ColorClass = false
																			db.oUF.Party.Texts.Power.ColorType = false
																			
																			oUF_LUI_partyUnitButton1.Power.value:SetTextColor(tonumber(db.oUF.Party.Texts.Power.IndividualColor.r),tonumber(db.oUF.Party.Texts.Power.IndividualColor.g),tonumber(db.oUF.Party.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.Power.IndividualColor.r, db.oUF.Party.Texts.Power.IndividualColor.g, db.oUF.Party.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.Power.IndividualColor.r = r
																	db.oUF.Party.Texts.Power.IndividualColor.g = g
																	db.oUF.Party.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.HealthPercent.Enable = not db.oUF.Party.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Health.valuePercent:Show()
															else
																oUF_LUI_partyUnitButton1.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthPercent.Font),db.oUF.Party.Texts.HealthPercent.Size,db.oUF.Party.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Party HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Party.Texts.HealthPercent.ShowAlways = not db.oUF.Party.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party HealthPercent!\n\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.HealthPercent.Font = Font
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthPercent.Font),db.oUF.Party.Texts.HealthPercent.Size,db.oUF.Party.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party HealthPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthPercent.Font),db.oUF.Party.Texts.HealthPercent.Size,db.oUF.Party.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Party HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Party.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Party.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_partyUnitButton1.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.valuePercent:SetPoint(db.oUF.Party.Texts.HealthPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Party.Texts.HealthPercent.X), tonumber(db.oUF.Party.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Party HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Party.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Party.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_partyUnitButton1.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.valuePercent:SetPoint(db.oUF.Party.Texts.HealthPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Party.Texts.HealthPercent.X), tonumber(db.oUF.Party.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party HealthPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetPoint(db.oUF.Party.Texts.HealthPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Party.Texts.HealthPercent.X), tonumber(db.oUF.Party.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party HealthPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetPoint(db.oUF.Party.Texts.HealthPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Party.Texts.HealthPercent.X), tonumber(db.oUF.Party.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.HealthPercent.ColorClass = not db.oUF.Party.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Party HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Party.Texts.HealthPercent.ColorGradient = not db.oUF.Party.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Party.Texts.HealthPercent.ColorClass = false
																			db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Party HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.HealthPercent.ColorClass = false
																			db.oUF.Party.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_partyUnitButton1.Health.valuePercent:SetTextColor(tonumber(db.oUF.Party.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Party.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Party.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.HealthPercent.IndividualColor.r, db.oUF.Party.Texts.HealthPercent.IndividualColor.g, db.oUF.Party.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Party.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Party.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Party.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Party.Texts.HealthPercent.ShowDead = not db.oUF.Party.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.PowerPercent.Enable = not db.oUF.Party.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Power.valuePercent:Show()
															else
																oUF_LUI_partyUnitButton1.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerPercent.Font),db.oUF.Party.Texts.PowerPercent.Size,db.oUF.Party.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Party PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Party.Texts.PowerPercent.ShowAlways = not db.oUF.Party.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party PowerPercent!\n\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.PowerPercent.Font = Font
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerPercent.Font),db.oUF.Party.Texts.PowerPercent.Size,db.oUF.Party.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party PowerPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerPercent.Font),db.oUF.Party.Texts.PowerPercent.Size,db.oUF.Party.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Party PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Party.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Party.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_partyUnitButton1.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.valuePercent:SetPoint(db.oUF.Party.Texts.PowerPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Party.Texts.PowerPercent.X), tonumber(db.oUF.Party.Texts.PowerPercent.Y))
																	end,
															order = 5,

														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Party PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Party.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Party.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_partyUnitButton1.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.valuePercent:SetPoint(db.oUF.Party.Texts.PowerPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Party.Texts.PowerPercent.X), tonumber(db.oUF.Party.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party PowerPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetPoint(db.oUF.Party.Texts.PowerPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Party.Texts.PowerPercent.X), tonumber(db.oUF.Party.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party PowerPercent.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetPoint(db.oUF.Party.Texts.PowerPercent.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Party.Texts.PowerPercent.X), tonumber(db.oUF.Party.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.PowerPercent.ColorClass = not db.oUF.Party.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.PowerPercent.ColorType = false
																			db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Party PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Party.Texts.PowerPercent.ColorType = not db.oUF.Party.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Party.Texts.PowerPercent.ColorClass = false
																			db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Party PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.PowerPercent.ColorClass = false
																			db.oUF.Party.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_partyUnitButton1.Power.valuePercent:SetTextColor(tonumber(db.oUF.Party.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Party.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Party.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.PowerPercent.IndividualColor.r, db.oUF.Party.Texts.PowerPercent.IndividualColor.g, db.oUF.Party.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Party.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Party.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party HealthMissing or not.",
													type = "toggle",

													width = "full",
													get = function() return db.oUF.Party.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.HealthMissing.Enable = not db.oUF.Party.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Health.valueMissing:Show()
															else
																oUF_LUI_partyUnitButton1.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthMissing.Font),db.oUF.Party.Texts.HealthMissing.Size,db.oUF.Party.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Party HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Party.Texts.HealthMissing.ShowAlways = not db.oUF.Party.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Party.Texts.HealthMissing.ShortValue = not db.oUF.Party.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party HealthMissing!\n\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.HealthMissing.Font = Font
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthMissing.Font),db.oUF.Party.Texts.HealthMissing.Size,db.oUF.Party.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party HealthMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.HealthMissing.Font),db.oUF.Party.Texts.HealthMissing.Size,db.oUF.Party.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Party HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Party.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Party.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_partyUnitButton1.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.valueMissing:SetPoint(db.oUF.Party.Texts.HealthMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Party.Texts.HealthMissing.X), tonumber(db.oUF.Party.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Party HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Party.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Party.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_partyUnitButton1.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Health.valueMissing:SetPoint(db.oUF.Party.Texts.HealthMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Party.Texts.HealthMissing.X), tonumber(db.oUF.Party.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party HealthMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetPoint(db.oUF.Party.Texts.HealthMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Party.Texts.HealthMissing.X), tonumber(db.oUF.Party.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party HealthMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetPoint(db.oUF.Party.Texts.HealthMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Party.Texts.HealthMissing.X), tonumber(db.oUF.Party.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.HealthMissing.ColorClass = not db.oUF.Party.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Party HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Party.Texts.HealthMissing.ColorGradient = not db.oUF.Party.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Party.Texts.HealthMissing.ColorClass = false
																			db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Party HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.HealthMissing.ColorClass = false
																			db.oUF.Party.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_partyUnitButton1.Health.valueMissing:SetTextColor(tonumber(db.oUF.Party.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Party.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Party.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.HealthMissing.IndividualColor.r, db.oUF.Party.Texts.HealthMissing.IndividualColor.g, db.oUF.Party.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Party.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Party.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Party PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Party.Texts.PowerMissing.Enable = not db.oUF.Party.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_partyUnitButton1.Power.valueMissing:Show()
															else
																oUF_LUI_partyUnitButton1.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Party PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Party.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Party.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Party.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerMissing.Font),db.oUF.Party.Texts.PowerMissing.Size,db.oUF.Party.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",

															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Party PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Party.Texts.PowerMissing.ShowAlways = not db.oUF.Party.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Party.Texts.PowerMissing.ShortValue = not db.oUF.Party.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Party PowerMissing!\n\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Party.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Party.Texts.PowerMissing.Font = Font
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerMissing.Font),db.oUF.Party.Texts.PowerMissing.Size,db.oUF.Party.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Party PowerMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Party.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Party.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Party.Texts.PowerMissing.Font),db.oUF.Party.Texts.PowerMissing.Size,db.oUF.Party.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Party PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Party.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Party.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_partyUnitButton1.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.valueMissing:SetPoint(db.oUF.Party.Texts.PowerMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Party.Texts.PowerMissing.X), tonumber(db.oUF.Party.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Party PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Party.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Party.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_partyUnitButton1.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_partyUnitButton1.Power.valueMissing:SetPoint(db.oUF.Party.Texts.PowerMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Party.Texts.PowerMissing.X), tonumber(db.oUF.Party.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Party PowerMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Party.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_partyUnitButton1.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetPoint(db.oUF.Party.Texts.PowerMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Party.Texts.PowerMissing.X), tonumber(db.oUF.Party.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Party PowerMissing.\nDefault: "..defaults.profile.oUF.Party.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Party.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Party.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_partyUnitButton1.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetPoint(db.oUF.Party.Texts.PowerMissing.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Party.Texts.PowerMissing.X), tonumber(db.oUF.Party.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Party.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Party.Texts.PowerMissing.ColorClass = not db.oUF.Party.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Party.Texts.PowerMissing.ColorType = false
																			db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Party PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Party.Texts.PowerMissing.ColorType = not db.oUF.Party.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Party.Texts.PowerMissing.ColorClass = false
																			db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Party PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Party PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Party.Texts.PowerMissing.ColorClass = false
																			db.oUF.Party.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_partyUnitButton1.Power.valueMissing:SetTextColor(tonumber(db.oUF.Party.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Party.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Party.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Party PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Party.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Party.Texts.PowerMissing.IndividualColor.r, db.oUF.Party.Texts.PowerMissing.IndividualColor.g, db.oUF.Party.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Party.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Party.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Party.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_partyUnitButton1.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									disabled = function() return not db.oUF.Party.Enable end,
									type = "group",
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Party.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Party.Portrait.Enable = not db.oUF.Party.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Party.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Party.Portrait.Enable end,
											get = function() return db.oUF.Party.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Party.Portrait.Width = PortraitWidth
														oUF_LUI_partyUnitButton1.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Party.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Party.Portrait.Enable end,
											get = function() return db.oUF.Party.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Party.Portrait.Height = PortraitHeight
														oUF_LUI_partyUnitButton1.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Party.Portrait.Enable end,
											get = function() return db.oUF.Party.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Party.Portrait.X = PortraitX
														oUF_LUI_partyUnitButton1.Portrait:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1.Health, "TOPLEFT", PortraitX, db.oUF.Party.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Party.Portrait.Enable end,
											get = function() return db.oUF.Party.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Party.Portrait.Y = PortraitY
														oUF_LUI_partyUnitButton1.Portrait:SetPoint("TOPLEFT", oUF_LUI_partyUnitButton1.Health, "TOPLEFT", db.oUF.Party.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.Party.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Lootmaster = {
											name = "Lootmaster",
											type = "group",
											order = 1,
											args = {
												LootMasterEnable = {
													name = "Enable",
													desc = "Wether you want to show the LootMaster Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Lootmaster.Enable end,
													set = function(self,LootMasterEnable)
																db.oUF.Party.Icons.Lootmaster.Enable = not db.oUF.Party.Icons.Lootmaster.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LootMasterX = {
													name = "X Value",
													desc = "X Value for your LootMaster Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Lootmaster.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Party.Icons.Lootmaster.X end,
													set = function(self,LootMasterX)
																if LootMasterX == nil or LootMasterX == "" then
																	LootMasterX = "0"
																end
																db.oUF.Party.Icons.Lootmaster.X = LootMasterX
																oUF_LUI_partyUnitButton1.MasterLooter:ClearAllPoints()
																oUF_LUI_partyUnitButton1.MasterLooter:SetPoint(db.oUF.Party.Icons.Lootmaster.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Lootmaster.Point, tonumber(LootMasterX), tonumber(db.oUF.Party.Icons.Lootmaster.Y))
															end,
													order = 2,
												},
												LootMasterY = {
													name = "Y Value",
													desc = "Y Value for your LootMaster Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Lootmaster.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Party.Icons.Lootmaster.Y end,
													set = function(self,LootMasterY)
																if LootMasterY == nil or LootMasterY == "" then
																	LootMasterY = "0"
																end
																db.oUF.Party.Icons.Lootmaster.Y = LootMasterY
																oUF_LUI_partyUnitButton1.MasterLooter:ClearAllPoints()
																oUF_LUI_partyUnitButton1.MasterLooter:SetPoint(db.oUF.Party.Icons.Lootmaster.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Lootmaster.Point, tonumber(db.oUF.Party.Icons.Lootmaster.X), tonumber(LootMasterY))
															end,
													order = 3,
												},
												LootMasterPoint = {
													name = "Position",
													desc = "Choose the Position for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Lootmaster.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Lootmaster.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Lootmaster.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LootMasterPoint)
															db.oUF.Party.Icons.Lootmaster.Point = positions[LootMasterPoint]
															oUF_LUI_partyUnitButton1.MasterLooter:ClearAllPoints()
															oUF_LUI_partyUnitButton1.MasterLooter:SetPoint(db.oUF.Party.Icons.Lootmaster.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Lootmaster.Point, tonumber(db.oUF.Party.Icons.Lootmaster.X), tonumber(db.oUF.Party.Icons.Lootmaster.X))
														end,
													order = 4,
												},
												LootMasterSize = {
													name = "Size",
													desc = "Choose a size for your LootMaster Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Lootmaster.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.Lootmaster.Enable end,
													get = function() return db.oUF.Party.Icons.Lootmaster.Size end,
													set = function(_, LootMasterSize) 
															db.oUF.Party.Icons.Lootmaster.Size = LootMasterSize
															oUF_LUI_partyUnitButton1.MasterLooter:SetHeight(LootMasterSize)
															oUF_LUI_partyUnitButton1.MasterLooter:SetWidth(LootMasterSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.Lootmaster.Enable end,
													desc = "Toggles the LootMaster Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.MasterLooter:IsShown() then oUF_LUI_partyUnitButton1.MasterLooter:Hide() else oUF_LUI_partyUnitButton1.MasterLooter:Show() end end
												},
											},
										},
										Leader = {
											name = "Leader",
											type = "group",
											order = 2,
											args = {
												LeaderEnable = {
													name = "Enable",
													desc = "Wether you want to show the Leader Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Leader.Enable end,
													set = function(self,LeaderEnable)
																db.oUF.Party.Icons.Leader.Enable = not db.oUF.Party.Icons.Leader.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												LeaderX = {
													name = "X Value",
													desc = "X Value for your Leader Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Leader.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Leader.Enable end,
													get = function() return db.oUF.Party.Icons.Leader.X end,
													set = function(self,LeaderX)
																if LeaderX == nil or LeaderX == "" then
																	LeaderX = "0"
																end
																db.oUF.Party.Icons.Leader.X = LeaderX
																oUF_LUI_partyUnitButton1.Leader:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Leader:SetPoint(db.oUF.Party.Icons.Leader.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Leader.Point, tonumber(LeaderX), tonumber(db.oUF.Party.Icons.Leader.Y))
															end,
													order = 2,
												},
												LeaderY = {
													name = "Y Value",
													desc = "Y Value for your Leader Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Leader.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Leader.Enable end,
													get = function() return db.oUF.Party.Icons.Leader.Y end,
													set = function(self,LeaderY)
																if LeaderY == nil or LeaderY == "" then
																	LeaderY = "0"
																end
																db.oUF.Party.Icons.Leader.Y = LeaderY
																oUF_LUI_partyUnitButton1.Leader:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Leader:SetPoint(db.oUF.Party.Icons.Leader.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Leader.Point, tonumber(db.oUF.Party.Icons.Leader.X), tonumber(LeaderY))
															end,
													order = 3,
												},
												LeaderPoint = {
													name = "Position",
													desc = "Choose the Position for your Leader Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Leader.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Leader.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Leader.Point == v then
																	return k
																end
															end
														end,
													set = function(self, LeaderPoint)
															db.oUF.Party.Icons.Leader.Point = positions[LeaderPoint]
															oUF_LUI_partyUnitButton1.Leader:ClearAllPoints()
															oUF_LUI_partyUnitButton1.Leader:SetPoint(db.oUF.Party.Icons.Leader.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Leader.Point, tonumber(db.oUF.Party.Icons.Leader.X), tonumber(db.oUF.Party.Icons.Leader.X))
														end,
													order = 4,
												},
												LeaderSize = {
													name = "Size",
													desc = "Choose your Size for your Leader Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Leader.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.Leader.Enable end,
													get = function() return db.oUF.Party.Icons.Leader.Size end,
													set = function(_, LeaderSize) 
															db.oUF.Party.Icons.Leader.Size = LeaderSize
															oUF_LUI_partyUnitButton1.Leader:SetHeight(LeaderSize)
															oUF_LUI_partyUnitButton1.Leader:SetWidth(LeaderSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.Leader.Enable end,
													desc = "Toggles the Leader Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.Leader:IsShown() then oUF_LUI_partyUnitButton1.Leader:Hide() else oUF_LUI_partyUnitButton1.Leader:Show() end end
												},
											},
										},
										LFDRole = {
											name = "LFDRole",
											type = "group",
											order = 3,
											args = {
												RoleEnable = {
													name = "Enable",
													desc = "Wether you want to show the Group Role Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Role.Enable end,
													set = function(self,RoleEnable)
																db.oUF.Party.Icons.Role.Enable = not db.oUF.Party.Icons.Role.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RoleX = {
													name = "X Value",
													desc = "X Value for your Group Role Icon Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Role.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Role.Enable end,
													get = function() return db.oUF.Party.Icons.Role.X end,
													set = function(self,RoleX)
																if RoleX == nil or RoleX == "" then
																	RoleX = "0"
																end
																db.oUF.Party.Icons.Role.X = RoleX
																oUF_LUI_partyUnitButton1.LFDRole:ClearAllPoints()
																oUF_LUI_partyUnitButton1.LFDRole:SetPoint(db.oUF.Party.Icons.Role.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Role.Point, tonumber(RoleX), tonumber(db.oUF.Party.Icons.Role.Y))
															end,
													order = 2,
												},
												RoleY = {
													name = "Y Value",
													desc = "Y Value for your Role Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Role.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Role.Enable end,
													get = function() return db.oUF.Party.Icons.Role.Y end,
													set = function(self,RoleY)
																if RoleY == nil or RoleY == "" then
																	RoleY = "0"
																end
																db.oUF.Party.Icons.Role.Y = RoleY
																oUF_LUI_partyUnitButton1.LFDRole:ClearAllPoints()
																oUF_LUI_partyUnitButton1.LFDRole:SetPoint(db.oUF.Party.Icons.Role.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Role.Point, tonumber(db.oUF.Party.Icons.Role.X), tonumber(RoleY))
															end,
													order = 3,
												},
												RolePoint = {
													name = "Position",
													desc = "Choose the Position for your Role Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Role.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Role.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Role.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RolePoint)
															db.oUF.Party.Icons.Role.Point = positions[RolePoint]
															oUF_LUI_partyUnitButton1.LFDRole:ClearAllPoints()
															oUF_LUI_partyUnitButton1.LFDRole:SetPoint(db.oUF.Party.Icons.Role.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Role.Point, tonumber(db.oUF.Party.Icons.Role.X), tonumber(db.oUF.Party.Icons.Role.X))
														end,
													order = 4,
												},
												RoleSize = {
													name = "Size",
													desc = "Choose a Size for your Group Role Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Role.Size,
													type = "range",
													min = 5,
													max = 100,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.Role.Enable end,
													get = function() return db.oUF.Party.Icons.Role.Size end,
													set = function(_, RoleSize) 
															db.oUF.Party.Icons.Role.Size = RoleSize
															oUF_LUI_partyUnitButton1.LFDRole:SetHeight(RoleSize)
															oUF_LUI_partyUnitButton1.LFDRole:SetWidth(RoleSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.Role.Enable end,
													desc = "Toggles the LFDRole Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.LFDRole:IsShown() then oUF_LUI_partyUnitButton1.LFDRole:Hide() else oUF_LUI_partyUnitButton1.LFDRole:Show() end end
												},
											},
										},
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 4,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Party.Icons.Raid.Enable = not db.oUF.Party.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Raid.Enable end,
													get = function() return db.oUF.Party.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end

																db.oUF.Party.Icons.Raid.X = RaidX
																oUF_LUI_partyUnitButton1.RaidIcon:ClearAllPoints()
																oUF_LUI_partyUnitButton1.RaidIcon:SetPoint(db.oUF.Party.Icons.Raid.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Party.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Raid.Enable end,
													get = function() return db.oUF.Party.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Party.Icons.Raid.Y = RaidY
																oUF_LUI_partyUnitButton1.RaidIcon:ClearAllPoints()
																oUF_LUI_partyUnitButton1.RaidIcon:SetPoint(db.oUF.Party.Icons.Raid.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Raid.Point, tonumber(db.oUF.Party.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Party.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_partyUnitButton1.RaidIcon:ClearAllPoints()
															oUF_LUI_partyUnitButton1.RaidIcon:SetPoint(db.oUF.Party.Icons.Raid.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Raid.Point, tonumber(db.oUF.Party.Icons.Raid.X), tonumber(db.oUF.Party.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Party.Icons.Raid.Enable end,
													get = function() return db.oUF.Party.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Party.Icons.Raid.Size = RaidSize
															oUF_LUI_partyUnitButton1.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_partyUnitButton1.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.RaidIcon:IsShown() then oUF_LUI_partyUnitButton1.RaidIcon:Hide() else oUF_LUI_partyUnitButton1.RaidIcon:Show() end end
												},
											},
										},
										Resting = {
											name = "Resting",
											type = "group",
											order = 5,
											args = {
												RestingEnable = {
													name = "Enable",
													desc = "Wether you want to show the Resting Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Resting.Enable end,
													set = function(self,RestingEnable)
																db.oUF.Party.Icons.Resting.Enable = not db.oUF.Party.Icons.Resting.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RestingX = {
													name = "X Value",
													desc = "X Value for your Resting Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Resting.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Resting.Enable end,
													get = function() return db.oUF.Party.Icons.Resting.X end,
													set = function(self,RestingX)
																if RestingX == nil or RestingX == "" then
																	RestingX = "0"
																end
																db.oUF.Party.Icons.Resting.X = RestingX
																oUF_LUI_partyUnitButton1.Resting:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Resting:SetPoint(db.oUF.Party.Icons.Resting.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Resting.Point, tonumber(RestingX), tonumber(db.oUF.Party.Icons.Resting.Y))
															end,
													order = 2,
												},
												RestingY = {
													name = "Y Value",
													desc = "Y Value for your Resting Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Resting.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Resting.Enable end,
													get = function() return db.oUF.Party.Icons.Resting.Y end,
													set = function(self,RestingY)
																if RestingY == nil or RestingY == "" then
																	RestingY = "0"
																end
																db.oUF.Party.Icons.Resting.Y = RestingY
																oUF_LUI_partyUnitButton1.Resting:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Resting:SetPoint(db.oUF.Party.Icons.Resting.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Resting.Point, tonumber(db.oUF.Party.Icons.Resting.X), tonumber(RestingY))
															end,
													order = 3,
												},
												RestingPoint = {
													name = "Position",
													desc = "Choose the Position for your Resting Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Resting.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Resting.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Resting.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RestingPoint)
															db.oUF.Party.Icons.Resting.Point = positions[RestingPoint]
															oUF_LUI_partyUnitButton1.Resting:ClearAllPoints()
															oUF_LUI_partyUnitButton1.Resting:SetPoint(db.oUF.Party.Icons.Resting.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Resting.Point, tonumber(db.oUF.Party.Icons.Resting.X), tonumber(db.oUF.Party.Icons.Resting.X))
														end,
													order = 4,
												},
												RestingSize = {
													name = "Size",
													desc = "Choose a Size for your Resting Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Resting.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.Resting.Enable end,
													get = function() return db.oUF.Party.Icons.Resting.Size end,
													set = function(_, RestingSize) 
															db.oUF.Party.Icons.Resting.Size = RestingSize
															oUF_LUI_partyUnitButton1.Resting:SetHeight(RestingSize)
															oUF_LUI_partyUnitButton1.Resting:SetWidth(RestingSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.Resting.Enable end,
													desc = "Toggles the Resting Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.Resting:IsShown() then oUF_LUI_partyUnitButton1.Resting:Hide() else oUF_LUI_partyUnitButton1.Resting:Show() end end
												},
											},
										},
										Combat = {
											name = "Combat",
											type = "group",
											order = 5,
											args = {
												CombatEnable = {
													name = "Enable",
													desc = "Wether you want to show the Combat Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.Combat.Enable end,
													set = function(self,CombatEnable)
																db.oUF.Party.Icons.Combat.Enable = not db.oUF.Party.Icons.Combat.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												CombatX = {
													name = "X Value",
													desc = "X Value for your Combat Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.Combat.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Combat.Enable end,
													get = function() return db.oUF.Party.Icons.Combat.X end,
													set = function(self,CombatX)
																if CombatX == nil or CombatX == "" then
																	CombatX = "0"
																end
																db.oUF.Party.Icons.Combat.X = CombatX
																oUF_LUI_partyUnitButton1.Combat:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Combat:SetPoint(db.oUF.Party.Icons.Combat.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Combat.Point, tonumber(CombatX), tonumber(db.oUF.Party.Icons.Combat.Y))
															end,
													order = 2,
												},
												CombatY = {
													name = "Y Value",
													desc = "Y Value for your Combat Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.Combat.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.Combat.Enable end,
													get = function() return db.oUF.Party.Icons.Combat.Y end,
													set = function(self,CombatY)
																if CombatY == nil or CombatY == "" then
																	CombatY = "0"
																end
																db.oUF.Party.Icons.Combat.Y = CombatY
																oUF_LUI_partyUnitButton1.Combat:ClearAllPoints()
																oUF_LUI_partyUnitButton1.Combat:SetPoint(db.oUF.Party.Icons.Combat.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Combat.Point, tonumber(db.oUF.Party.Icons.Combat.X), tonumber(CombatY))
															end,
													order = 3,
												},
												CombatPoint = {
													name = "Position",
													desc = "Choose the Position for your Combat Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Combat.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.Combat.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.Combat.Point == v then
																	return k
																end
															end
														end,
													set = function(self, CombatPoint)

															db.oUF.Party.Icons.Combat.Point = positions[CombatPoint]
															oUF_LUI_partyUnitButton1.Combat:ClearAllPoints()
															oUF_LUI_partyUnitButton1.Combat:SetPoint(db.oUF.Party.Icons.Combat.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.Combat.Point, tonumber(db.oUF.Party.Icons.Combat.X), tonumber(db.oUF.Party.Icons.Combat.X))
														end,
													order = 4,
												},
												CombatSize = {
													name = "Size",
													desc = "Choose a Size for your Combat Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.Combat.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.Combat.Enable end,
													get = function() return db.oUF.Party.Icons.Combat.Size end,
													set = function(_, CombatSize) 
															db.oUF.Party.Icons.Combat.Size = CombatSize
															oUF_LUI_partyUnitButton1.Combat:SetHeight(CombatSize)
															oUF_LUI_partyUnitButton1.Combat:SetWidth(CombatSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													disabled = function() return not db.oUF.Party.Icons.Combat.Enable end,
													name = "Show/Hide",
													desc = "Toggles the Combat Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.Combat:IsShown() then oUF_LUI_partyUnitButton1.Combat:Hide() else oUF_LUI_partyUnitButton1.Combat:Show() end end
												},
											},
										},
										PvP = {
											name = "PvP",
											type = "group",
											order = 5,
											args = {
												PvPEnable = {
													name = "Enable",
													desc = "Wether you want to show the PvP Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Party.Icons.PvP.Enable end,
													set = function(self,PvPEnable)
																db.oUF.Party.Icons.PvP.Enable = not db.oUF.Party.Icons.PvP.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PvPX = {
													name = "X Value",
													desc = "X Value for your PvP Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Party.Icons.PvP.X,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.PvP.Enable end,
													get = function() return db.oUF.Party.Icons.PvP.X end,
													set = function(self,PvPX)
																if PvPX == nil or PvPX == "" then
																	PvPX = "0"
																end
																db.oUF.Party.Icons.PvP.X = PvPX
																oUF_LUI_partyUnitButton1.PvP:ClearAllPoints()
																oUF_LUI_partyUnitButton1.PvP:SetPoint(db.oUF.Party.Icons.PvP.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.PvP.Point, tonumber(PvPX), tonumber(db.oUF.Party.Icons.PvP.Y))
															end,
													order = 2,
												},
												PvPY = {
													name = "Y Value",
													desc = "Y Value for your PvP Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Party.Icons.PvP.Y,
													type = "input",
													disabled = function() return not db.oUF.Party.Icons.PvP.Enable end,
													get = function() return db.oUF.Party.Icons.PvP.Y end,
													set = function(self,PvPY)
																if PvPY == nil or PvPY == "" then
																	PvPY = "0"
																end
																db.oUF.Party.Icons.PvP.Y = PvPY
																oUF_LUI_partyUnitButton1.PvP:ClearAllPoints()
																oUF_LUI_partyUnitButton1.PvP:SetPoint(db.oUF.Party.Icons.PvP.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.PvP.Point, tonumber(db.oUF.Party.Icons.PvP.X), tonumber(PvPY))
															end,
													order = 3,
												},
												PvPPoint = {
													name = "Position",
													desc = "Choose the Position for your PvP Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.PvP.Point,
													type = "select",
													disabled = function() return not db.oUF.Party.Icons.PvP.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Party.Icons.PvP.Point == v then
																	return k
																end
															end
														end,
													set = function(self, PvPPoint)
															db.oUF.Party.Icons.PvP.Point = positions[PvPPoint]
															oUF_LUI_partyUnitButton1.PvP:ClearAllPoints()
															oUF_LUI_partyUnitButton1.PvP:SetPoint(db.oUF.Party.Icons.PvP.Point, oUF_LUI_partyUnitButton1, db.oUF.Party.Icons.PvP.Point, tonumber(db.oUF.Party.Icons.PvP.X), tonumber(db.oUF.Party.Icons.PvP.X))
														end,
													order = 4,
												},
												PvPSize = {
													name = "Size",
													desc = "Choose a Size for your PvP Icon.\nDefault: "..defaults.profile.oUF.Party.Icons.PvP.Size,
													type = "range",
													min = 5,
													max = 40,
													step = 1,
													disabled = function() return not db.oUF.Party.Icons.PvP.Enable end,
													get = function() return db.oUF.Party.Icons.PvP.Size end,
													set = function(_, PvPSize) 
															db.oUF.Party.Icons.PvP.Size = PvPSize
															oUF_LUI_partyUnitButton1.PvP:SetHeight(PvPSize)
															oUF_LUI_partyUnitButton1.PvP:SetWidth(PvPSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Party.Icons.PvP.Enable end,
													desc = "Toggles the PvP Icon",
													type = 'execute',
													func = function() if oUF_LUI_partyUnitButton1.PvP:IsShown() then oUF_LUI_partyUnitButton1.PvP:Hide() else oUF_LUI_partyUnitButton1.PvP:Show() end end
												},
											},
										},
									},
								},
							},
						},
						Boss = {
							name = "Boss",
							type = "group",
							disabled = function() return not db.oUF.Settings.Enable end,
							order = 13,
							childGroups = "tab",
							disabled = true,
							args = {
								header1 = {
									name = "Boss",
									type = "header",
									order = 1,
								},
								General = {
									name = "General",
									type = "group",
									childGroups = "tab",
									order = 2,
									args = {
										General = {
											name = "General",
											type = "group",
											order = 0,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to use a Boss Frame or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Enable end,
													set = function(self,Enable)
																db.oUF.Boss.Enable = not db.oUF.Boss.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												Padding = {
													name = "Padding",
													disabled = function() return not db.oUF.Boss.Enable end,
													desc = "Choose the Padding between your Bosses.\nDefault: "..defaults.profile.oUF.Boss.Padding,
													type = "input",
													get = function() return db.oUF.Boss.Padding end,
													set = function(self,Padding)
																if Padding == nil or Padding == "" then
																	Padding = "0"
																end
																db.oUF.Boss.Padding = Padding
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 2,
												},
												empty = {
													order = 3,
													width = "full",
													type = "description",
													name = "   ",
												},
												toggle = {
													order = 4,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Boss.Enable end,
													desc = "Toggles the Boss Frame",
													type = 'execute',
													func = function() if oUF_Boss1:IsShown() then StaticPopup_Show("RELOAD_UI") else ShowBossFrames() end end
												},
											},
										},
										Positioning = {
											name = "Positioning",
											type = "group",
											disabled = function() return not db.oUF.Boss.Enable end,
											order = 1,
											args = {
												header1 = {
													name = "Frame Position",
													type = "header",
													order = 1,
												},
												BossX = {
													name = "X Value",
													desc = "X Value for your Boss Frame.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.X,
													type = "input",
													get = function() return db.oUF.Boss.X end,
													set = function(self,BossX)
																if BossX == nil or BossX == "" then
																	BossX = "0"
																end
																db.oUF.Boss.X = BossX
																
																oUF_Boss1:ClearAllPoints()
																oUF_Boss1:SetPoint("RIGHT", UIParent, "RIGHT", tonumber(BossX), tonumber(db.oUF.Boss.Y))
															end,
													order = 2,
												},
												BossY = {
													name = "Y Value",
													desc = "Y Value for your Boss Frame.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Y,
													type = "input",
													get = function() return db.oUF.Boss.Y end,
													set = function(self,BossY)
																if BossY == nil or BossY == "" then
																	BossY = "0"
																end
																db.oUF.Boss.Y = BossY
																
																oUF_Boss1:ClearAllPoints()
																oUF_Boss1:SetPoint("RIGHT", UIParent, "RIGHT", tonumber(db.oUF.Boss.X), tonumber(BossY))
															end,
													order = 3,
												},
											},
										},
										Size = {
											name = "Size",
											type = "group",
											order = 2,
											disabled = function() return not db.oUF.Boss.Enable end,
											args = {
												header1 = {
													name = "Frame Height/Width",
													type = "header",
													order = 1,
												},
												BossHeight = {
													name = "Height",
													desc = "Decide the Height of your Boss Frame.\n\nDefault: "..defaults.profile.oUF.Boss.Height,
													type = "input",
													get = function() return db.oUF.Boss.Height end,
													set = function(self,BossHeight)
																if BossHeight == nil or BossHeight == "" then
																	BossHeight = "0"
																end
																db.oUF.Boss.Height = BossHeight

																for i = 1,MAX_BOSS_FRAMES do
																	local bossfunc = loadstring("oUF_Boss"..i..":SetHeight(tonumber("..BossHeight.."))")
																	bossfunc()
																end
															end,
													order = 2,
												},
												BossWidth = {
													name = "Width",
													desc = "Decide the Width of your Boss Frame.\n\nDefault: "..defaults.profile.oUF.Boss.Width,
													type = "input",
													get = function() return db.oUF.Boss.Width end,
													set = function(self,BossWidth)
																if BossWidth == nil or BossWidth == "" then
																	BossWidth = "0"
																end
																db.oUF.Boss.Width = BossWidth
																
																for i = 1,MAX_BOSS_FRAMES do
																	local bossfunc = loadstring("oUF_Boss"..i..":SetWidth(tonumber("..BossWidth.."))")
																	bossfunc()
																end
															end,
													order = 3,
												},
											},
										},
										Appearance = {
											name = "Appearance",
											type = "group",
											disabled = function() return not db.oUF.Boss.Enable end,
											order = 3,
											args = {
												header1 = {
													name = "Backdrop Colors",
													type = "header",
													order = 1,
												},
												BackdropColor = {
													name = "Color",
													desc = "Choose a Backdrop Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Boss.Backdrop.Color.r, db.oUF.Boss.Backdrop.Color.g, db.oUF.Boss.Backdrop.Color.b, db.oUF.Boss.Backdrop.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Boss.Backdrop.Color.r = r
															db.oUF.Boss.Backdrop.Color.g = g
															db.oUF.Boss.Backdrop.Color.b = b
															db.oUF.Boss.Backdrop.Color.a = a
															
															for i = 1,MAX_BOSS_FRAMES do
																local bossfunc = loadstring("oUF_Boss"..i..".FrameBackdrop:SetBackdropColor("..r..","..g..","..b..","..a..")")
																bossfunc()
															end
														end,
													order = 2,
												},
												BackdropBorderColor = {
													name = "Border Color",
													desc = "Choose a Backdrop Border Color.",
													type = "color",
													width = "full",
													hasAlpha = true,
													get = function() return db.oUF.Boss.Border.Color.r, db.oUF.Boss.Border.Color.g, db.oUF.Boss.Border.Color.b, db.oUF.Boss.Border.Color.a end,
													set = function(_,r,g,b,a)
															db.oUF.Boss.Border.Color.r = r
															db.oUF.Boss.Border.Color.g = g
															db.oUF.Boss.Border.Color.b = b
															db.oUF.Boss.Border.Color.a = a
															
															
															
															for i = 1,MAX_BOSS_FRAMES do
																print("oUF_Boss"..i..".FrameBackdrop:SetBackdrop({bgFile = \""..LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture).."\",edgeFile = \""..LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile).."\", edgeSize = "..tonumber(db.oUF.Boss.Border.EdgeSize)..", insets = {left = "..tonumber(db.oUF.Boss.Border.Insets.Left)..", right = "..tonumber(db.oUF.Boss.Border.Insets.Right)..", top = "..tonumber(db.oUF.Boss.Border.Insets.Top)..", bottom = "..tonumber(db.oUF.Boss.Border.Insets.Bottom).."}})")
																
																local bossfunc = loadstring("oUF_Boss"..i..".FrameBackdrop:SetBackdrop({bgFile = \""..LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture).."\",edgeFile = \""..LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile).."\", edgeSize = "..tonumber(db.oUF.Boss.Border.EdgeSize)..", insets = {left = "..tonumber(db.oUF.Boss.Border.Insets.Left)..", right = "..tonumber(db.oUF.Boss.Border.Insets.Right)..", top = "..tonumber(db.oUF.Boss.Border.Insets.Top)..", bottom = "..tonumber(db.oUF.Boss.Border.Insets.Bottom).."}})")
																
																
																local bossfunc2 = loadstring("oUF_Boss"..i..".FrameBackdrop:SetBackdropColor(tonumber("..db.oUF.Boss.Backdrop.Color.r.."), tonumber("..db.oUF.Boss.Backdrop.Color.g.."), tonumber("..db.oUF.Boss.Backdrop.Color.b.."), tonumber("..db.oUF.Boss.Backdrop.Color.a.."))")
																
																
																local bossfunc3 = loadstring("oUF_Boss"..i..".FrameBackdrop:SetBackdropBorderColor(tonumber("..db.oUF.Boss.Border.Color.r.."), tonumber("..db.oUF.Boss.Border.Color.g.."), tonumber("..db.oUF.Boss.Border.Color.b.."), tonumber("..db.oUF.Boss.Border.Color.a.."))")
																
																bossfunc()
																bossfunc2()
																bossfunc3()
															end
															--[[
															oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_Boss1.FrameBackdrop:SetBackdrop({
																bgFile = Interface\Tooltips\UI-Tooltip-Background,
																edgeFile = Interface\Addons\oUF_LUI\media\textures\glowTex.tga, edgeSize = 5, 
																insets = {left = 3, right = 3, top = 3, bottom = 3}})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
															]]--
														end,
													order = 3,
												},
												header2 = {
													name = "Backdrop Settings",
													type = "header",
													order = 4,
												},
												BackdropTexture = {
													name = "Backdrop Texture",
													desc = "Choose your Backdrop Texture!\nDefault: "..defaults.profile.oUF.Boss.Backdrop.Texture,
													type = "select",
													dialogControl = "LSM30_Background",
													values = widgetLists.background,
													get = function() return db.oUF.Boss.Backdrop.Texture end,
													set = function(self, BackdropTexture)
															db.oUF.Boss.Backdrop.Texture = BackdropTexture
															oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
														end,
													order = 5,
												},
												BorderTexture = {
													name = "Border Texture",
													desc = "Choose your Border Texture!\nDefault: "..defaults.profile.oUF.Boss.Border.EdgeFile,
													type = "select",
													dialogControl = "LSM30_Border",
													values = widgetLists.border,
													get = function() return db.oUF.Boss.Border.EdgeFile end,
													set = function(self, BorderTexture)
															db.oUF.Boss.Border.EdgeFile = BorderTexture
															oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
														end,
													order = 6,
												},
												BorderSize = {
													name = "Edge Size",
													desc = "Choose the Edge Size for your Frame Border.\nDefault: "..defaults.profile.oUF.Boss.Border.EdgeSize,
													type = "range",
													min = 1,
													max = 50,
													step = 1,
													get = function() return db.oUF.Boss.Border.EdgeSize end,
													set = function(_, BorderSize) 
															db.oUF.Boss.Border.EdgeSize = BorderSize
															oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
														end,
													order = 7,
												},
												header3 = {
													name = "Backdrop Padding",
													type = "header",
													order = 8,
												},
												PaddingLeft = {
													name = "Left",
													desc = "Value for the Left Backdrop Padding\nDefault: "..defaults.profile.oUF.Boss.Backdrop.Padding.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Backdrop.Padding.Left end,
													set = function(self,PaddingLeft)
														if PaddingLeft == nil or PaddingLeft == "" then
															PaddingLeft = "0"
														end
														db.oUF.Boss.Backdrop.Padding.Left = PaddingLeft
														oUF_LUI_Boss.FrameBackdrop:ClearAllPoints()
														oUF_LUI_Boss.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_Boss, "TOPLEFT", tonumber(db.oUF.Boss.Backdrop.Padding.Left), tonumber(db.oUF.Boss.Backdrop.Padding.Top))
														oUF_LUI_Boss.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_Boss, "BOTTOMRIGHT", tonumber(db.oUF.Boss.Backdrop.Padding.Right), tonumber(db.oUF.Boss.Backdrop.Padding.Bottom))
													end,
													order = 9,
												},
												PaddingRight = {
													name = "Right",
													desc = "Value for the Right Backdrop Padding\nDefault: "..defaults.profile.oUF.Boss.Backdrop.Padding.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Backdrop.Padding.Right end,
													set = function(self,PaddingRight)
														if PaddingRight == nil or PaddingRight == "" then
															PaddingRight = "0"
														end
														db.oUF.Boss.Backdrop.Padding.Right = PaddingRight
														oUF_LUI_Boss.FrameBackdrop:ClearAllPoints()
														oUF_LUI_Boss.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_Boss, "TOPLEFT", tonumber(db.oUF.Boss.Backdrop.Padding.Left), tonumber(db.oUF.Boss.Backdrop.Padding.Top))
														oUF_LUI_Boss.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_Boss, "BOTTOMRIGHT", tonumber(db.oUF.Boss.Backdrop.Padding.Right), tonumber(db.oUF.Boss.Backdrop.Padding.Bottom))
													end,
													order = 10,
												},
												PaddingTop = {
													name = "Top",
													desc = "Value for the Top Backdrop Padding\nDefault: "..defaults.profile.oUF.Boss.Backdrop.Padding.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Backdrop.Padding.Top end,
													set = function(self,PaddingTop)
														if PaddingTop == nil or PaddingTop == "" then
															PaddingTop = "0"
														end
														db.oUF.Boss.Backdrop.Padding.Top = PaddingTop
														oUF_LUI_Boss.FrameBackdrop:ClearAllPoints()
														oUF_LUI_Boss.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_Boss, "TOPLEFT", tonumber(db.oUF.Boss.Backdrop.Padding.Left), tonumber(db.oUF.Boss.Backdrop.Padding.Top))
														oUF_LUI_Boss.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_Boss, "BOTTOMRIGHT", tonumber(db.oUF.Boss.Backdrop.Padding.Right), tonumber(db.oUF.Boss.Backdrop.Padding.Bottom))
													end,
													order = 11,
												},
												PaddingBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Backdrop Padding\nDefault: "..defaults.profile.oUF.Boss.Backdrop.Padding.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Backdrop.Padding.Bottom end,
													set = function(self,PaddingBottom)
														if PaddingBottom == nil or PaddingBottom == "" then
															PaddingBottom = "0"
														end
														db.oUF.Boss.Backdrop.Padding.Bottom = PaddingBottom
														oUF_LUI_Boss.FrameBackdrop:ClearAllPoints()
														oUF_LUI_Boss.FrameBackdrop:SetPoint("TOPLEFT", oUF_LUI_Boss, "TOPLEFT", tonumber(db.oUF.Boss.Backdrop.Padding.Left), tonumber(db.oUF.Boss.Backdrop.Padding.Top))
														oUF_LUI_Boss.FrameBackdrop:SetPoint("BOTTOMRIGHT", oUF_LUI_Boss, "BOTTOMRIGHT", tonumber(db.oUF.Boss.Backdrop.Padding.Right), tonumber(db.oUF.Boss.Backdrop.Padding.Bottom))
													end,
													order = 12,
												},
												header4 = {
													name = "Boder Insets",
													type = "header",
													order = 13,
												},
												InsetLeft = {
													name = "Left",
													desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.oUF.Boss.Border.Insets.Left,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Border.Insets.Left end,
													set = function(self,InsetLeft)
														if InsetLeft == nil or InsetLeft == "" then
															InsetLeft = "0"
														end
														db.oUF.Boss.Border.Insets.Left = InsetLeft
														oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
															end,
													order = 14,
												},
												InsetRight = {
													name = "Right",
													desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.oUF.Boss.Border.Insets.Right,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Border.Insets.Right end,
													set = function(self,InsetRight)
														if InsetRight == nil or InsetRight == "" then
															InsetRight = "0"
														end
														db.oUF.Boss.Border.Insets.Right = InsetRight
														oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
															end,
													order = 15,
												},
												InsetTop = {
													name = "Top",
													desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.oUF.Boss.Border.Insets.Top,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Border.Insets.Top end,
													set = function(self,InsetTop)
														if InsetTop == nil or InsetTop == "" then
															InsetTop = "0"
														end
														db.oUF.Boss.Border.Insets.Top = InsetTop
														oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
															end,
													order = 16,
												},
												InsetBottom = {
													name = "Bottom",
													desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.oUF.Boss.Border.Insets.Bottom,
													type = "input",
													width = "half",
													get = function() return db.oUF.Boss.Border.Insets.Bottom end,
													set = function(self,InsetBottom)
														if InsetBottom == nil or InsetBottom == "" then
															InsetBottom = "0"
														end
														db.oUF.Boss.Border.Insets.Bottom = InsetBottom
														oUF_LUI_Boss.FrameBackdrop:SetBackdrop({
																bgFile = LSM:Fetch("background", db.oUF.Boss.Backdrop.Texture),
																edgeFile = LSM:Fetch("border", db.oUF.Boss.Border.EdgeFile), edgeSize = tonumber(db.oUF.Boss.Border.EdgeSize),
																insets = {left = tonumber(db.oUF.Boss.Border.Insets.Left), right = tonumber(db.oUF.Boss.Border.Insets.Right), top = tonumber(db.oUF.Boss.Border.Insets.Top), bottom = tonumber(db.oUF.Boss.Border.Insets.Bottom)}
															})
															
															oUF_LUI_Boss.FrameBackdrop:SetBackdropColor(tonumber(db.oUF.Boss.Backdrop.Color.r), tonumber(db.oUF.Boss.Backdrop.Color.g), tonumber(db.oUF.Boss.Backdrop.Color.b), tonumber(db.oUF.Boss.Backdrop.Color.a))
															oUF_LUI_Boss.FrameBackdrop:SetBackdropBorderColor(tonumber(db.oUF.Boss.Border.Color.r), tonumber(db.oUF.Boss.Border.Color.g), tonumber(db.oUF.Boss.Border.Color.b), tonumber(db.oUF.Boss.Border.Color.a))
															end,
													order = 17,
												},
											},
										},
										AlphaFader = {
											name = "Fader",
											type = "group",
											disabled = function() return not db.oUF.Boss.Enable end,
											order = 4,
											args = {
												empty = {
													order = 1,
													width = "full",
													type = "description",
													name = "\n\n    coming soon...",
												},
											},
										},
									},
								},
								Bars = {
									name = "Bars",
									type = "group",
									childGroups = "tab",
									disabled = function() return not db.oUF.Boss.Enable end,
									order = 3,
									args = {
										Health = {
											name = "Health",
											type = "group",
											order = 1,
											args = {
												General = {
													name = "General Settings",
													type = "group",
													guiInline = true,
													order = 1,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Boss Health.\n\nDefault: "..defaults.profile.oUF.Boss.Health.Height,
															type = "input",
															get = function() return db.oUF.Boss.Health.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Boss.Health.Height = Height
																		oUF_LUI_Boss.Health:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Health.Padding,
															type = "input",
															get = function() return db.oUF.Boss.Health.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Boss.Health.Padding = Padding
																		oUF_LUI_Boss.Health:ClearAllPoints()
																		oUF_LUI_Boss.Health:SetPoint("TOPLEFT", oUF_LUI_Boss, "TOPLEFT", 0, tonumber(Padding))
																		oUF_LUI_Boss.Health:SetPoint("TOPRIGHT", oUF_LUI_Boss, "TOPRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Boss.Health.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Boss.Health.Smooth = not db.oUF.Boss.Health.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													guiInline = true,
													order = 2,
													args = {
														HealthClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Health.ColorClass end,
															set = function(self,HealthClassColor)
																		db.oUF.Boss.Health.ColorClass = not db.oUF.Boss.Health.ColorClass
																		if HealthClassColor == true then
																			db.oUF.Boss.Health.ColorGradient = false
																			db.oUF.Boss.Health.IndividualColor.Enable = false
																			
																			print("Boss Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 1,
														},
														HealthGradientColor = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthBars or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Health.ColorGradient end,
															set = function(self,HealthGradientColor)
																		db.oUF.Boss.Health.ColorGradient = not db.oUF.Boss.Health.ColorGradient
																		if HealthGradientColor == true then
																			db.oUF.Boss.Health.ColorClass = false
																			db.oUF.Boss.Health.IndividualColor.Enable = false
																			
																			print("Boss Healthbar Color will change once you gain/lose HP")
																		end
																	end,
															order = 2,
														},
														IndividualHealthColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual HealthBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Health.IndividualColor.Enable end,
															set = function(self,IndividualHealthColor)
																		db.oUF.Boss.Health.IndividualColor.Enable = not db.oUF.Boss.Health.IndividualColor.Enable
																		if IndividualHealthColor == true then
																			db.oUF.Boss.Health.ColorClass = false
																			db.oUF.Boss.Health.ColorGradient = false
																			
																			oUF_LUI_Boss.Health:SetStatusBarColor(db.oUF.Boss.Health.IndividualColor.r, db.oUF.Boss.Health.IndividualColor.g, db.oUF.Boss.Health.IndividualColor.b)
																			oUF_LUI_Boss.Health.bg:SetVertexColor(db.oUF.Boss.Health.IndividualColor.r*tonumber(db.oUF.Boss.Health.BGMultiplier), db.oUF.Boss.Health.IndividualColor.g*tonumber(db.oUF.Boss.Health.BGMultiplier), db.oUF.Boss.Health.IndividualColor.b*tonumber(db.oUF.Boss.Health.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														HealthColor = {
															name = "Individual Color",
															desc = "Choose an individual Healthbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Health.IndividualColor.r, db.oUF.Boss.Health.IndividualColor.g, db.oUF.Boss.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Health.IndividualColor.r = r
																	db.oUF.Boss.Health.IndividualColor.g = g
																	db.oUF.Boss.Health.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Health:SetStatusBarColor(r, g, b)
																	oUF_LUI_Boss.Health.bg:SetVertexColor(r*tonumber(db.oUF.Boss.Health.BGMultiplier), g*tonumber(db.oUF.Boss.Health.BGMultiplier), b*tonumber(db.oUF.Boss.Health.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														HealthTex = {
															name = "Texture",
															desc = "Choose your Health Texture!\nDefault: "..defaults.profile.oUF.Boss.Health.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Boss.Health.Texture
																end,
															set = function(self, HealthTex)
																	db.oUF.Boss.Health.Texture = HealthTex
																	oUF_LUI_Boss.Health:SetStatusBarTexture(LSM:Fetch("statusbar", HealthTex))
																end,
															order = 1,
														},
														HealthTexBG = {
															name = "Background Texture",
															desc = "Choose your Health Background Texture!\nDefault: "..defaults.profile.oUF.Boss.Health.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Boss.Health.TextureBG
																end,
															set = function(self, HealthTexBG)
																	db.oUF.Boss.Health.TextureBG = HealthTexBG
																	oUF_LUI_Boss.Health.bg:SetTexture(LSM:Fetch("statusbar", HealthTexBG))
																end,
															order = 2,
														},
														HealthTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Health Background.\nDefault: "..defaults.profile.oUF.Boss.Health.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Boss.Health.BGAlpha end,
															set = function(_, HealthTexBGAlpha) 
																	db.oUF.Boss.Health.BGAlpha  = HealthTexBGAlpha
																	oUF_LUI_Boss.Health.bg:SetAlpha(tonumber(HealthTexBGAlpha))
																end,
															order = 3,
														},
														HealthTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Boss.Health.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Boss.Health.BGMultiplier end,
															set = function(_, HealthTexBGMultiplier) 
																	db.oUF.Boss.Health.BGMultiplier  = HealthTexBGMultiplier
																	oUF_LUI_Boss.Health.bg.multiplier = tonumber(HealthTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 2,
											args = {
												EnablePower = {
													name = "Enable",
													desc = "Wether you want to use a Powerbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Power.Enable end,
													set = function(self,EnablePower)
																db.oUF.Boss.Power.Enable = not db.oUF.Boss.Power.Enable
																if EnablePower == true then
																	oUF_LUI_Boss.Power:Show()
																else
																	oUF_LUI_Boss.Power:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "General Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Power.Enable end,
													guiInline = true,

													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Boss Power.\n\nDefault: "..defaults.profile.oUF.Boss.Power.Height,
															type = "input",
															get = function() return db.oUF.Boss.Power.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Boss.Power.Height = Height
																		oUF_LUI_Boss.Power:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Powerbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Power.Padding,
															type = "input",
															get = function() return db.oUF.Boss.Power.Padding end,
															set = function(self,Padding)
																		if Padding == nil or Padding == "" then
																			Padding = "0"
																		end
																		db.oUF.Boss.Power.Padding = Padding
																		oUF_LUI_Boss.Power:ClearAllPoints()
																		oUF_LUI_Boss.Power:SetPoint("TOPLEFT", oUF_LUI_Boss.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																		oUF_LUI_Boss.Power:SetPoint("TOPRIGHT", oUF_LUI_Boss.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																	end,
															order = 2,
														},
														Smooth = {
															name = "Enable Smooth Bar Animation",
															desc = "Wether you want to use Smooth Animations or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Boss.Power.Smooth end,
															set = function(self,Smooth)
																		db.oUF.Boss.Power.Smooth = not db.oUF.Boss.Power.Smooth
																		StaticPopup_Show("RELOAD_UI")
																	end,
															order = 3,
														},
													}
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Power.Enable end,
													guiInline = true,
													order = 3,
													args = {
														PowerClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Power.ColorClass end,
															set = function(self,PowerClassColor)
																		db.oUF.Boss.Power.ColorClass = not db.oUF.Boss.Power.ColorClass
																		if PowerClassColor == true then
																			db.oUF.Boss.Power.ColorType = false
																			db.oUF.Boss.Power.IndividualColor.Enable = false
																			
																			print("Boss Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														PowerColorByType = {
															name = "Color by Type",
															desc = "Wether you want to use Power Type colored PowerBars or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Power.ColorType end,
															set = function(self,PowerColorByType)
																		db.oUF.Boss.Power.ColorType = not db.oUF.Boss.Power.ColorType
																		if PowerColorByType == true then
																			db.oUF.Boss.Power.ColorClass = false
																			db.oUF.Boss.Power.IndividualColor.Enable = false
																			
																			print("Boss Powerbar Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualPowerColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual PowerBar Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Power.IndividualColor.Enable end,
															set = function(self,IndividualPowerColor)
																		db.oUF.Boss.Power.IndividualColor.Enable = not db.oUF.Boss.Power.IndividualColor.Enable
																		if IndividualPowerColor == true then
																			db.oUF.Boss.Power.ColorType = false
																			db.oUF.Boss.Power.ColorClass = false
																			
																			oUF_LUI_Boss.Power:SetStatusBarColor(db.oUF.Boss.Power.IndividualColor.r, db.oUF.Boss.Power.IndividualColor.g, db.oUF.Boss.Power.IndividualColor.b)
																			oUF_LUI_Boss.Power.bg:SetVertexColor(db.oUF.Boss.Power.IndividualColor.r*tonumber(db.oUF.Boss.Power.BGMultiplier), db.oUF.Boss.Power.IndividualColor.g*tonumber(db.oUF.Boss.Power.BGMultiplier), db.oUF.Boss.Power.IndividualColor.b*tonumber(db.oUF.Boss.Power.BGMultiplier))
																		end
																	end,
															order = 3,
														},
														PowerColor = {
															name = "Individual Color",
															desc = "Choose an individual Powerbar Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Power.IndividualColor.r, db.oUF.Boss.Power.IndividualColor.g, db.oUF.Boss.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Power.IndividualColor.r = r
																	db.oUF.Boss.Power.IndividualColor.g = g
																	db.oUF.Boss.Power.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Power:SetStatusBarColor(r, g, b)
																	oUF_LUI_Boss.Power.bg:SetVertexColor(r*tonumber(db.oUF.Boss.Power.BGMultiplier), g*tonumber(db.oUF.Boss.Power.BGMultiplier), b*tonumber(db.oUF.Boss.Power.BGMultiplier))
																end,
															order = 4,
														},
													},
												},
												Textures = {
													name = "Texture Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Power.Enable end,
													guiInline = true,
													order = 4,
													args = {
														PowerTex = {
															name = "Texture",
															desc = "Choose your Power Texture!\nDefault: "..defaults.profile.oUF.Boss.Power.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Boss.Power.Texture
																end,
															set = function(self, PowerTex)
																	db.oUF.Boss.Power.Texture = PowerTex
																	oUF_LUI_Boss.Power:SetStatusBarTexture(LSM:Fetch("statusbar", PowerTex))
																end,
															order = 1,
														},
														PowerTexBG = {
															name = "Background Texture",
															desc = "Choose your Power Background Texture!\nDefault: "..defaults.profile.oUF.Boss.Power.TextureBG,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Boss.Power.TextureBG
																end,

															set = function(self, PowerTexBG)
																	db.oUF.Boss.Power.TextureBG = PowerTexBG
																	oUF_LUI_Boss.Power.bg:SetTexture(LSM:Fetch("statusbar", PowerTexBG))
																end,
															order = 2,
														},
														PowerTexBGAlpha = {
															name = "Background Alpha",
															desc = "Choose the Alpha Value for your Power Background.\nDefault: "..defaults.profile.oUF.Boss.Power.BGAlpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Boss.Power.BGAlpha end,
															set = function(_, PowerTexBGAlpha) 
																	db.oUF.Boss.Power.BGAlpha  = PowerTexBGAlpha
																	oUF_LUI_Boss.Power.bg:SetAlpha(tonumber(PowerTexBGAlpha))
																end,
															order = 3,
														},
														PowerTexBGMultiplier = {
															name = "Background Muliplier",
															desc = "Choose the Multiplier which will be used to generate the BackgroundColor.\nDefault: "..defaults.profile.oUF.Boss.Power.BGMultiplier,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Boss.Power.BGMultiplier end,
															set = function(_, PowerTexBGMultiplier) 
																	db.oUF.Boss.Power.BGMultiplier  = PowerTexBGMultiplier
																	oUF_LUI_Boss.Power.bg.multiplier = tonumber(PowerTexBGMultiplier)
																end,
															order = 4,
														},
													},
												},
											},
										},
										Full = {
											name = "Fullbar",
											type = "group",
											order = 3,
											args = {
												EnableFullbar = {
													name = "Enable",
													desc = "Wether you want to use a Fullbar or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Full.Enable end,
													set = function(self,EnableFullbar)
																db.oUF.Boss.Full.Enable = not db.oUF.Boss.Full.Enable
																if EnableFullbar == true then
																	oUF_LUI_Boss.Full:Show()
																else
																	oUF_LUI_Boss.Full:Hide()
																end
															end,
													order = 1,
												},
												General = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Full.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Height = {
															name = "Height",
															desc = "Decide the Height of your Fullbar.\n\nDefault: "..defaults.profile.oUF.Boss.Full.Height,
															type = "input",
															get = function() return db.oUF.Boss.Full.Height end,
															set = function(self,Height)
																		if Height == nil or Height == "" then
																			Height = "0"
																		end
																		db.oUF.Boss.Full.Height = Height
																		oUF_LUI_Boss.Full:SetHeight(tonumber(Height))
																	end,
															order = 1,
														},
														Padding = {
															name = "Padding",
															desc = "Choose the Padding between Health & Fullbar.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Full.Padding,
															type = "input",
															get = function() return db.oUF.Boss.Full.Padding end,
															set = function(self,Padding)
																	if Padding == nil or Padding == "" then
																		Padding = "0"
																	end
																	db.oUF.Boss.Full.Padding = Padding
																	oUF_LUI_Boss.Full:ClearAllPoints()
																	oUF_LUI_Boss.Full:SetPoint("TOPLEFT", oUF_LUI_Boss.Health, "BOTTOMLEFT", 0, tonumber(Padding))
																	oUF_LUI_Boss.Full:SetPoint("TOPRIGHT", oUF_LUI_Boss.Health, "BOTTOMRIGHT", 0, tonumber(Padding))
																end,
															order = 2,
														},
														FullTex = {
															name = "Texture",
															desc = "Choose your Fullbar Texture!\nDefault: "..defaults.profile.oUF.Boss.Full.Texture,
															type = "select",
															dialogControl = "LSM30_Statusbar",
															values = widgetLists.statusbar,
															get = function()
																	return db.oUF.Boss.Full.Texture
																end,
															set = function(self, FullTex)
																	db.oUF.Boss.Full.Texture = FullTex
																	oUF_LUI_Boss.Full:SetStatusBarTexture(LSM:Fetch("statusbar", FullTex))
																end,
															order = 3,
														},
														FullAlpha = {
															name = "Alpha",
															desc = "Choose the Alpha Value for your Fullbar!\n Default: "..defaults.profile.oUF.Boss.Full.Alpha,
															type = "range",
															min = 0,
															max = 1,
															step = 0.05,
															get = function() return db.oUF.Boss.Full.Alpha end,
															set = function(_, FullAlpha)
																	db.oUF.Boss.Full.Alpha = FullAlpha
																	oUF_LUI_Boss.Full:SetAlpha(FullAlpha)
																end,
															order = 4,
														},
														Color = {
															name = "Color",
															desc = "Choose your Fullbar Color.",
															type = "color",
															hasAlpha = true,
															get = function() return db.oUF.Boss.Full.Color.r, db.oUF.Boss.Full.Color.g, db.oUF.Boss.Full.Color.b, db.oUF.Boss.Full.Color.a end,
															set = function(_,r,g,b,a)
																	db.oUF.Boss.Full.Color.r = r
																	db.oUF.Boss.Full.Color.g = g
																	db.oUF.Boss.Full.Color.b = b
																	db.oUF.Boss.Full.Color.a = a
																	
																	oUF_LUI_Boss.Full:SetStatusBarColor(r, g, b, a)
																end,
															order = 5,
														},
													},
												},
											},
										},
									},
								},
								Texts = {
									name = "Texts",
									type = "group",
									childGroups = "tab",
									order = 6,
									disabled = function() return not db.oUF.Boss.Enable end,
									args = {
										Name = {
											name = "Name",
											type = "group",
											order = 1,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss Name or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.Name.Enable end,
													set = function(self,Enable)
																db.oUF.Boss.Texts.Name.Enable = not db.oUF.Boss.Texts.Name.Enable
																if Enable == true then
																	oUF_LUI_Boss.Info:Show()
																else
																	oUF_LUI_Boss.Info:Hide()
																end
															end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss Name Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.Name.Size,
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.Name.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.Name.Size = FontSize
																	oUF_LUI_Boss.Info:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Name.Font),db.oUF.Boss.Texts.Name.Size,db.oUF.Boss.Texts.Name.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss Name!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Font,
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.Name.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.Name.Font = Font
																	oUF_LUI_Boss.Info:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Name.Font),db.oUF.Boss.Texts.Name.Size,db.oUF.Boss.Texts.Name.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss Name.\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Outline,
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.Name.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.Name.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Info:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Name.Font),db.oUF.Boss.Texts.Name.Size,db.oUF.Boss.Texts.Name.Outline)
																end,
															order = 4,
														},
														NameX = {
															name = "X Value",
															desc = "X Value for your Boss Name.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.X end,
															set = function(self,NameX)
																		if NameX == nil or NameX == "" then
																			NameX = "0"
																		end
																		db.oUF.Boss.Texts.Name.X = NameX
																		oUF_LUI_Boss.Info:ClearAllPoints()
																		oUF_LUI_Boss.Info:SetPoint(db.oUF.Boss.Texts.Name.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Name.RelativePoint, tonumber(db.oUF.Boss.Texts.Name.X), tonumber(db.oUF.Boss.Texts.Name.Y))
																	end,
															order = 5,
														},
														NameY = {
															name = "Y Value",
															desc = "Y Value for your Boss Name.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.Y end,
															set = function(self,NameY)
																		if NameY == nil or NameY == "" then
																			NameY = "0"
																		end
																		db.oUF.Boss.Texts.Name.Y = NameY
																		oUF_LUI_Boss.Info:ClearAllPoints()
																		oUF_LUI_Boss.Info:SetPoint(db.oUF.Boss.Texts.Name.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Name.RelativePoint, tonumber(db.oUF.Boss.Texts.Name.X), tonumber(db.oUF.Boss.Texts.Name.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss Name.\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Name.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.Name.Point = positions[Point]
																	oUF_LUI_Boss.Info:ClearAllPoints()
																	oUF_LUI_Boss.Info:SetPoint(db.oUF.Boss.Texts.Name.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Name.RelativePoint, tonumber(db.oUF.Boss.Texts.Name.X), tonumber(db.oUF.Boss.Texts.Name.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss Name.\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Name.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.Name.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Info:ClearAllPoints()
																	oUF_LUI_Boss.Info:SetPoint(db.oUF.Boss.Texts.Name.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Name.RelativePoint, tonumber(db.oUF.Boss.Texts.Name.X), tonumber(db.oUF.Boss.Texts.Name.Y))
																end,
															order = 8,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
													guiInline = true,
													order = 2,
													args = {
														Format = {
															name = "Format",
															desc = "Choose the Format for your Boss Name.\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Format,
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															type = "select",
															width = "full",
															values = nameFormat,
															get = function()
																	for k, v in pairs(nameFormat) do
																		if db.oUF.Boss.Texts.Name.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Boss.Texts.Name.Format = nameFormat[Format]
																end,
															order = 1,
														},
														Length = {
															name = "Length",
															desc = "Choose the Length of your Boss Name.\n\nShort = 6 Letters\nMedium = 18 Letters\nLong = 36 Letters\n\nDefault: "..defaults.profile.oUF.Boss.Texts.Name.Length,
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															type = "select",
															values = nameLenghts,
															get = function()
																	for k, v in pairs(nameLenghts) do
																		if db.oUF.Boss.Texts.Name.Length == v then
																			return k
																		end
																	end
																end,
															set = function(self, Length)
																	db.oUF.Boss.Texts.Name.Length = nameLenghts[Length]
																end,
															order = 2,
														},
														empty = {
															order = 3,
															width = "full",
															type = "description",
															name = " ",
														},
														ColorNameByClass = {
															name = "Color Name by Class",
															desc = "Wether you want to color the Boss Name by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.ColorNameByClass end,
															set = function(self,ColorNameByClass)
																		db.oUF.Boss.Texts.Name.ColorNameByClass = not db.oUF.Boss.Texts.Name.ColorNameByClass
																	end,
															order = 4,
														},
														ColorClassByClass = {
															name = "Color Class by Class",
															desc = "Wether you want to color the Boss Class by Class or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.ColorClassByClass end,
															set = function(self,ColorClassByClass)
																		db.oUF.Boss.Texts.Name.ColorClassByClass = not db.oUF.Boss.Texts.Name.ColorClassByClass
																	end,
															order = 5,
														},
														ColorLevelByDifficulty = {
															name = "Color Level by Difficulty",
															desc = "Wether you want to color the Level by Difficulty or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.ColorLevelByDifficulty end,
															set = function(self,ColorLevelByDifficulty)
																		db.oUF.Boss.Texts.Name.ColorLevelByDifficulty = not db.oUF.Boss.Texts.Name.ColorLevelByDifficulty
																	end,
															order = 6,
														},
														ShowClassification = {
															name = "Show Classification",
															desc = "Wether you want to show Classifications like Elite, Boss, Rar or not.",
															type = "toggle",
															disabled = function() return not db.oUF.Boss.Texts.Name.Enable end,
															get = function() return db.oUF.Boss.Texts.Name.ShowClassification end,
															set = function(self,ShowClassification)
																		db.oUF.Boss.Texts.Name.ShowClassification = not db.oUF.Boss.Texts.Name.ShowClassification
																	end,
															order = 7,
														},
														ShortClassification = {
															name = "Enable Short Classification",
															desc = "Wether you want to show short Classifications or not.",
															type = "toggle",
															width = "full",
															disabled = function() return not db.oUF.Boss.Texts.Name.ShowClassification end,
															get = function() return db.oUF.Boss.Texts.Name.ShortClassification end,
															set = function(self,ShortClassification)
																		db.oUF.Boss.Texts.Name.ShortClassification = not db.oUF.Boss.Texts.Name.ShortClassification
																	end,
															order = 8,
														},
													},
												},
											},
										},
										Health = {
											name = "Health",
											type = "group",
											order = 2,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss Health or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.Health.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.Health.Enable = not db.oUF.Boss.Texts.Health.Enable
															if Enable == true then
																oUF_LUI_Boss.Health.value:Show()
															else
																oUF_LUI_Boss.Health.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss Health Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.Health.Size,
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.Health.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.Health.Size = FontSize
																	oUF_LUI_Boss.Health.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Health.Font),db.oUF.Boss.Texts.Health.Size,db.oUF.Boss.Texts.Health.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Boss Health.\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.Format,
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Boss.Texts.Health.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Boss.Texts.Health.Format = valueFormat[Format]
																	print("Boss Health Value Format will change once you gain/lose Health")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss Health!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.Font,
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.Health.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.Health.Font = Font
																	oUF_LUI_Boss.Health.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Health.Font),db.oUF.Boss.Texts.Health.Size,db.oUF.Boss.Texts.Health.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss Health.\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.Outline,
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.Health.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.Health.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Health.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Health.Font),db.oUF.Boss.Texts.Health.Size,db.oUF.Boss.Texts.Health.Outline)
																end,
															order = 4,
														},
														HealthX = {
															name = "X Value",
															desc = "X Value for your Boss Health.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															get = function() return db.oUF.Boss.Texts.Health.X end,
															set = function(self,HealthX)
																		if HealthX == nil or HealthX == "" then
																			HealthX = "0"
																		end
																		db.oUF.Boss.Texts.Health.X = HealthX
																		oUF_LUI_Boss.Health.value:ClearAllPoints()
																		oUF_LUI_Boss.Health.value:SetPoint(db.oUF.Boss.Texts.Health.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Health.RelativePoint, tonumber(db.oUF.Boss.Texts.Health.X), tonumber(db.oUF.Boss.Texts.Health.Y))
																	end,
															order = 5,
														},
														HealthY = {
															name = "Y Value",
															desc = "Y Value for your Boss Health.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															get = function() return db.oUF.Boss.Texts.Health.Y end,
															set = function(self,HealthY)
																		if HealthY == nil or HealthY == "" then
																			HealthY = "0"
																		end
																		db.oUF.Boss.Texts.Health.Y = HealthY
																		oUF_LUI_Boss.Health.value:ClearAllPoints()
																		oUF_LUI_Boss.Health.value:SetPoint(db.oUF.Boss.Texts.Health.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Health.RelativePoint, tonumber(db.oUF.Boss.Texts.Health.X), tonumber(db.oUF.Boss.Texts.Health.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss Health.\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Health.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.Health.Point = positions[Point]
																	oUF_LUI_Boss.Health.value:ClearAllPoints()
																	oUF_LUI_Boss.Health.value:SetPoint(db.oUF.Boss.Texts.Health.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Health.RelativePoint, tonumber(db.oUF.Boss.Texts.Health.X), tonumber(db.oUF.Boss.Texts.Health.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss Health.\nDefault: "..defaults.profile.oUF.Boss.Texts.Health.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Health.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.Health.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Health.value:ClearAllPoints()
																	oUF_LUI_Boss.Health.value:SetPoint(db.oUF.Boss.Texts.Health.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Health.RelativePoint, tonumber(db.oUF.Boss.Texts.Health.X), tonumber(db.oUF.Boss.Texts.Health.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Health.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Health.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.Health.ColorClass = not db.oUF.Boss.Texts.Health.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.Health.ColorGradient = false
																			db.oUF.Boss.Texts.Health.IndividualColor.Enable = false
																			
																			print("Boss Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored Health Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Health.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Boss.Texts.Health.ColorGradient = not db.oUF.Boss.Texts.Health.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Boss.Texts.Health.ColorClass = false
																			db.oUF.Boss.Texts.Health.IndividualColor.Enable = false
																			
																			print("Boss Health Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss Health Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Health.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.Health.IndividualColor.Enable = not db.oUF.Boss.Texts.Health.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.Health.ColorClass = false
																			db.oUF.Boss.Texts.Health.ColorGradient = false
																			
																			oUF_LUI_Boss.Health.value:SetTextColor(tonumber(db.oUF.Boss.Texts.Health.IndividualColor.r),tonumber(db.oUF.Boss.Texts.Health.IndividualColor.g),tonumber(db.oUF.Boss.Texts.Health.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss Health Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.Health.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.Health.IndividualColor.r, db.oUF.Boss.Texts.Health.IndividualColor.g, db.oUF.Boss.Texts.Health.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.Health.IndividualColor.r = r
																	db.oUF.Boss.Texts.Health.IndividualColor.g = g
																	db.oUF.Boss.Texts.Health.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Health.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the Health Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Boss.Texts.Health.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Boss.Texts.Health.ShowDead = not db.oUF.Boss.Texts.Health.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										Power = {
											name = "Power",
											type = "group",
											order = 3,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss Power or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.Power.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.Power.Enable = not db.oUF.Boss.Texts.Power.Enable
															if Enable == true then
																oUF_LUI_Boss.Power.value:Show()
															else
																oUF_LUI_Boss.Power.value:Hide()
															end
														end,
													order = 0,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss Power Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.Power.Size,
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.Power.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.Power.Size = FontSize
																	oUF_LUI_Boss.Power.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Power.Font),db.oUF.Boss.Texts.Power.Size,db.oUF.Boss.Texts.Power.Outline)
																end,
															order = 1,
														},
														Format = {
															name = "Format",
															desc = "Choose the Format for your Boss Power.\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.Format,
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															type = "select",
															values = valueFormat,
															get = function()
																	for k, v in pairs(valueFormat) do
																		if db.oUF.Boss.Texts.Power.Format == v then
																			return k
																		end
																	end
																end,
															set = function(self, Format)
																	db.oUF.Boss.Texts.Power.Format = valueFormat[Format]
																	print("Boss Power Value Format will change once you gain/lose Power")
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss Power!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.Font,
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.Power.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.Power.Font = Font
																	oUF_LUI_Boss.Power.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Power.Font),db.oUF.Boss.Texts.Power.Size,db.oUF.Boss.Texts.Power.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss Power.\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.Outline,
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.Power.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.Power.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Power.value:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.Power.Font),db.oUF.Boss.Texts.Power.Size,db.oUF.Boss.Texts.Power.Outline)
																end,
															order = 4,
														},
														PowerX = {
															name = "X Value",
															desc = "X Value for your Boss Power.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															get = function() return db.oUF.Boss.Texts.Power.X end,
															set = function(self,PowerX)
																		if PowerX == nil or PowerX == "" then
																			PowerX = "0"
																		end
																		db.oUF.Boss.Texts.Power.X = PowerX
																		oUF_LUI_Boss.Power.value:ClearAllPoints()
																		oUF_LUI_Boss.Power.value:SetPoint(db.oUF.Boss.Texts.Power.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Power.RelativePoint, tonumber(db.oUF.Boss.Texts.Power.X), tonumber(db.oUF.Boss.Texts.Power.Y))
																	end,
															order = 5,
														},
														PowerY = {
															name = "Y Value",
															desc = "Y Value for your Boss Power.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															get = function() return db.oUF.Boss.Texts.Power.Y end,
															set = function(self,PowerY)
																		if PowerY == nil or PowerY == "" then
																			PowerY = "0"
																		end
																		db.oUF.Boss.Texts.Power.Y = PowerY
																		oUF_LUI_Boss.Power.value:ClearAllPoints()
																		oUF_LUI_Boss.Power.value:SetPoint(db.oUF.Boss.Texts.Power.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Power.RelativePoint, tonumber(db.oUF.Boss.Texts.Power.X), tonumber(db.oUF.Boss.Texts.Power.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss Power.\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Power.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.Power.Point = positions[Point]
																	oUF_LUI_Boss.Power.value:ClearAllPoints()
																	oUF_LUI_Boss.Power.value:SetPoint(db.oUF.Boss.Texts.Power.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Power.RelativePoint, tonumber(db.oUF.Boss.Texts.Power.X), tonumber(db.oUF.Boss.Texts.Power.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss Power.\nDefault: "..defaults.profile.oUF.Boss.Texts.Power.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.Power.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.Power.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Power.value:ClearAllPoints()
																	oUF_LUI_Boss.Power.value:SetPoint(db.oUF.Boss.Texts.Power.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.Power.RelativePoint, tonumber(db.oUF.Boss.Texts.Power.X), tonumber(db.oUF.Boss.Texts.Power.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.Power.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Power.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.Power.ColorClass = not db.oUF.Boss.Texts.Power.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.Power.ColorType = false
																			db.oUF.Boss.Texts.Power.IndividualColor.Enable = false
																			
																			print("Boss Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Powertype colored Power Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Power.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Boss.Texts.Power.ColorType = not db.oUF.Boss.Texts.Power.ColorType
																		if ColorType == true then
																			db.oUF.Boss.Texts.Power.ColorClass = false
																			db.oUF.Boss.Texts.Power.IndividualColor.Enable = false
																			
																			print("Boss Power Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss Power Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.Power.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.Power.IndividualColor.Enable = not db.oUF.Boss.Texts.Power.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.Power.ColorClass = false
																			db.oUF.Boss.Texts.Power.ColorType = false
																			
																			oUF_LUI_Boss.Power.value:SetTextColor(tonumber(db.oUF.Boss.Texts.Power.IndividualColor.r),tonumber(db.oUF.Boss.Texts.Power.IndividualColor.g),tonumber(db.oUF.Boss.Texts.Power.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss Power Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.Power.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.Power.IndividualColor.r, db.oUF.Boss.Texts.Power.IndividualColor.g, db.oUF.Boss.Texts.Power.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.Power.IndividualColor.r = r
																	db.oUF.Boss.Texts.Power.IndividualColor.g = g
																	db.oUF.Boss.Texts.Power.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Power.value:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthPercent = {
											name = "HealthPercent",
											type = "group",
											order = 4,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss HealthPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.HealthPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.HealthPercent.Enable = not db.oUF.Boss.Texts.HealthPercent.Enable
															if Enable == true then
																oUF_LUI_Boss.Health.valuePercent:Show()
															else
																oUF_LUI_Boss.Health.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss HealthPercent Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.HealthPercent.Size,
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.HealthPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.HealthPercent.Size = FontSize
																	oUF_LUI_Boss.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthPercent.Font),db.oUF.Boss.Texts.HealthPercent.Size,db.oUF.Boss.Texts.HealthPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Boss HealthPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Boss.Texts.HealthPercent.ShowAlways = not db.oUF.Boss.Texts.HealthPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss HealthPercent!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.Font,
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.HealthPercent.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.HealthPercent.Font = Font
																	oUF_LUI_Boss.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthPercent.Font),db.oUF.Boss.Texts.HealthPercent.Size,db.oUF.Boss.Texts.HealthPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss HealthPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.Outline,
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.HealthPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.HealthPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Health.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthPercent.Font),db.oUF.Boss.Texts.HealthPercent.Size,db.oUF.Boss.Texts.HealthPercent.Outline)
																end,
															order = 4,
														},
														HealthPercentX = {
															name = "X Value",
															desc = "X Value for your Boss HealthPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Boss.Texts.HealthPercent.X end,
															set = function(self,HealthPercentX)
																		if HealthPercentX == nil or HealthPercentX == "" then
																			HealthPercentX = "0"
																		end
																		db.oUF.Boss.Texts.HealthPercent.X = HealthPercentX
																		oUF_LUI_Boss.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_Boss.Health.valuePercent:SetPoint(db.oUF.Boss.Texts.HealthPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthPercent.X), tonumber(db.oUF.Boss.Texts.HealthPercent.Y))
																	end,
															order = 5,
														},
														HealthPercentY = {
															name = "Y Value",
															desc = "Y Value for your Boss HealthPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															get = function() return db.oUF.Boss.Texts.HealthPercent.Y end,
															set = function(self,HealthPercentY)
																		if HealthPercentY == nil or HealthPercentY == "" then
																			HealthPercentY = "0"
																		end
																		db.oUF.Boss.Texts.HealthPercent.Y = HealthPercentY
																		oUF_LUI_Boss.Health.valuePercent:ClearAllPoints()
																		oUF_LUI_Boss.Health.valuePercent:SetPoint(db.oUF.Boss.Texts.HealthPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthPercent.X), tonumber(db.oUF.Boss.Texts.HealthPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss HealthPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.HealthPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.HealthPercent.Point = positions[Point]
																	oUF_LUI_Boss.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_Boss.Health.valuePercent:SetPoint(db.oUF.Boss.Texts.HealthPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthPercent.X), tonumber(db.oUF.Boss.Texts.HealthPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss HealthPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.HealthPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.HealthPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Health.valuePercent:ClearAllPoints()
																	oUF_LUI_Boss.Health.valuePercent:SetPoint(db.oUF.Boss.Texts.HealthPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthPercent.X), tonumber(db.oUF.Boss.Texts.HealthPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.HealthPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.HealthPercent.ColorClass = not db.oUF.Boss.Texts.HealthPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.HealthPercent.ColorGradient = false
																			db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Boss HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthPercent.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Boss.Texts.HealthPercent.ColorGradient = not db.oUF.Boss.Texts.HealthPercent.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Boss.Texts.HealthPercent.ColorClass = false
																			db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable = false
																			
																			print("Boss HealthPercent Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss HealthPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable = not db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.HealthPercent.ColorClass = false
																			db.oUF.Boss.Texts.HealthPercent.ColorGradient = false
																			
																			oUF_LUI_Boss.Health.valuePercent:SetTextColor(tonumber(db.oUF.Boss.Texts.HealthPercent.IndividualColor.r),tonumber(db.oUF.Boss.Texts.HealthPercent.IndividualColor.g),tonumber(db.oUF.Boss.Texts.HealthPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss HealthPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.HealthPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.HealthPercent.IndividualColor.r, db.oUF.Boss.Texts.HealthPercent.IndividualColor.g, db.oUF.Boss.Texts.HealthPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.HealthPercent.IndividualColor.r = r
																	db.oUF.Boss.Texts.HealthPercent.IndividualColor.g = g
																	db.oUF.Boss.Texts.HealthPercent.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Health.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
												Settings = {
													name = "Settings",
													type = "group",
													guiInline = true,
													order = 3,
													args = {
														ShowDead = {
															name = "Show Dead/AFK/Disconnected Information",
															desc = "Wether you want to switch the HealthPercent Value to Dead/AFK/Disconnected or not.",
															type = "toggle",
															width = "full",
															get = function() return db.oUF.Boss.Texts.HealthPercent.ShowDead end,
															set = function(self,ShowDead)
																		db.oUF.Boss.Texts.HealthPercent.ShowDead = not db.oUF.Boss.Texts.HealthPercent.ShowDead
																	end,
															order = 1,
														},
													},
												},
											},
										},
										PowerPercent = {
											name = "PowerPercent",
											type = "group",
											order = 5,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss PowerPercent or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.PowerPercent.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.PowerPercent.Enable = not db.oUF.Boss.Texts.PowerPercent.Enable
															if Enable == true then
																oUF_LUI_Boss.Power.valuePercent:Show()
															else
																oUF_LUI_Boss.Power.valuePercent:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss PowerPercent Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.PowerPercent.Size,
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.PowerPercent.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.PowerPercent.Size = FontSize
																	oUF_LUI_Boss.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerPercent.Font),db.oUF.Boss.Texts.PowerPercent.Size,db.oUF.Boss.Texts.PowerPercent.Outline)
																end,
															order = 1,
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Boss PowerPercent or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerPercent.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Boss.Texts.PowerPercent.ShowAlways = not db.oUF.Boss.Texts.PowerPercent.ShowAlways
																end,
															order = 2,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss PowerPercent!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.Font,
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.PowerPercent.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.PowerPercent.Font = Font
																	oUF_LUI_Boss.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerPercent.Font),db.oUF.Boss.Texts.PowerPercent.Size,db.oUF.Boss.Texts.PowerPercent.Outline)
																end,
															order = 3,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss PowerPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.Outline,
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.PowerPercent.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.PowerPercent.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Power.valuePercent:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerPercent.Font),db.oUF.Boss.Texts.PowerPercent.Size,db.oUF.Boss.Texts.PowerPercent.Outline)
																end,
															order = 4,
														},
														PowerPercentX = {
															name = "X Value",
															desc = "X Value for your Boss PowerPercent.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Boss.Texts.PowerPercent.X end,
															set = function(self,PowerPercentX)
																		if PowerPercentX == nil or PowerPercentX == "" then
																			PowerPercentX = "0"
																		end
																		db.oUF.Boss.Texts.PowerPercent.X = PowerPercentX
																		oUF_LUI_Boss.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_Boss.Power.valuePercent:SetPoint(db.oUF.Boss.Texts.PowerPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerPercent.X), tonumber(db.oUF.Boss.Texts.PowerPercent.Y))
																	end,
															order = 5,

														},
														PowerPercentY = {
															name = "Y Value",
															desc = "Y Value for your Boss PowerPercent.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															get = function() return db.oUF.Boss.Texts.PowerPercent.Y end,
															set = function(self,PowerPercentY)
																		if PowerPercentY == nil or PowerPercentY == "" then
																			PowerPercentY = "0"
																		end
																		db.oUF.Boss.Texts.PowerPercent.Y = PowerPercentY
																		oUF_LUI_Boss.Power.valuePercent:ClearAllPoints()
																		oUF_LUI_Boss.Power.valuePercent:SetPoint(db.oUF.Boss.Texts.PowerPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerPercent.X), tonumber(db.oUF.Boss.Texts.PowerPercent.Y))
																	end,
															order = 6,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss PowerPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.PowerPercent.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.PowerPercent.Point = positions[Point]
																	oUF_LUI_Boss.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_Boss.Power.valuePercent:SetPoint(db.oUF.Boss.Texts.PowerPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerPercent.X), tonumber(db.oUF.Boss.Texts.PowerPercent.Y))
																end,
															order = 7,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss PowerPercent.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerPercent.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.PowerPercent.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.PowerPercent.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Power.valuePercent:ClearAllPoints()
																	oUF_LUI_Boss.Power.valuePercent:SetPoint(db.oUF.Boss.Texts.PowerPercent.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerPercent.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerPercent.X), tonumber(db.oUF.Boss.Texts.PowerPercent.Y))
																end,
															order = 8,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.PowerPercent.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerPercent.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.PowerPercent.ColorClass = not db.oUF.Boss.Texts.PowerPercent.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.PowerPercent.ColorType = false
																			db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Boss PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerPercent Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerPercent.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Boss.Texts.PowerPercent.ColorType = not db.oUF.Boss.Texts.PowerPercent.ColorType
																		if ColorType == true then
																			db.oUF.Boss.Texts.PowerPercent.ColorClass = false
																			db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable = false
																			
																			print("Boss PowerPercent Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss PowerPercent Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable = not db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.PowerPercent.ColorClass = false
																			db.oUF.Boss.Texts.PowerPercent.ColorType = false
																			
																			oUF_LUI_Boss.Power.valuePercent:SetTextColor(tonumber(db.oUF.Boss.Texts.PowerPercent.IndividualColor.r),tonumber(db.oUF.Boss.Texts.PowerPercent.IndividualColor.g),tonumber(db.oUF.Boss.Texts.PowerPercent.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss PowerPercent Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.PowerPercent.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.PowerPercent.IndividualColor.r, db.oUF.Boss.Texts.PowerPercent.IndividualColor.g, db.oUF.Boss.Texts.PowerPercent.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.PowerPercent.IndividualColor.r = r
																	db.oUF.Boss.Texts.PowerPercent.IndividualColor.g = g
																	db.oUF.Boss.Texts.PowerPercent.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Power.valuePercent:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										HealthMissing = {
											name = "HealthMissing",
											type = "group",
											order = 6,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss HealthMissing or not.",
													type = "toggle",

													width = "full",
													get = function() return db.oUF.Boss.Texts.HealthMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.HealthMissing.Enable = not db.oUF.Boss.Texts.HealthMissing.Enable
															if Enable == true then
																oUF_LUI_Boss.Health.valueMissing:Show()
															else
																oUF_LUI_Boss.Health.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss HealthMissing Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.HealthMissing.Size,
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.HealthMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.HealthMissing.Size = FontSize
																	oUF_LUI_Boss.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthMissing.Font),db.oUF.Boss.Texts.HealthMissing.Size,db.oUF.Boss.Texts.HealthMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",
															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Boss HealthMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Boss.Texts.HealthMissing.ShowAlways = not db.oUF.Boss.Texts.HealthMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Boss.Texts.HealthMissing.ShortValue = not db.oUF.Boss.Texts.HealthMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss HealthMissing!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.Font,
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.HealthMissing.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.HealthMissing.Font = Font
																	oUF_LUI_Boss.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthMissing.Font),db.oUF.Boss.Texts.HealthMissing.Size,db.oUF.Boss.Texts.HealthMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss HealthMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.Outline,
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.HealthMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.HealthMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Health.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.HealthMissing.Font),db.oUF.Boss.Texts.HealthMissing.Size,db.oUF.Boss.Texts.HealthMissing.Outline)
																end,
															order = 6,
														},
														HealthMissingX = {
															name = "X Value",
															desc = "X Value for your Boss HealthMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Boss.Texts.HealthMissing.X end,
															set = function(self,HealthMissingX)
																		if HealthMissingX == nil or HealthMissingX == "" then
																			HealthMissingX = "0"
																		end
																		db.oUF.Boss.Texts.HealthMissing.X = HealthMissingX
																		oUF_LUI_Boss.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_Boss.Health.valueMissing:SetPoint(db.oUF.Boss.Texts.HealthMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthMissing.X), tonumber(db.oUF.Boss.Texts.HealthMissing.Y))
																	end,
															order = 7,
														},
														HealthMissingY = {
															name = "Y Value",
															desc = "Y Value for your Boss HealthMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															get = function() return db.oUF.Boss.Texts.HealthMissing.Y end,
															set = function(self,HealthMissingY)
																		if HealthMissingY == nil or HealthMissingY == "" then
																			HealthMissingY = "0"
																		end
																		db.oUF.Boss.Texts.HealthMissing.Y = HealthMissingY
																		oUF_LUI_Boss.Health.valueMissing:ClearAllPoints()
																		oUF_LUI_Boss.Health.valueMissing:SetPoint(db.oUF.Boss.Texts.HealthMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthMissing.X), tonumber(db.oUF.Boss.Texts.HealthMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss HealthMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.HealthMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.HealthMissing.Point = positions[Point]
																	oUF_LUI_Boss.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_Boss.Health.valueMissing:SetPoint(db.oUF.Boss.Texts.HealthMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthMissing.X), tonumber(db.oUF.Boss.Texts.HealthMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss HealthMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.HealthMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.HealthMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.HealthMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Health.valueMissing:ClearAllPoints()
																	oUF_LUI_Boss.Health.valueMissing:SetPoint(db.oUF.Boss.Texts.HealthMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.HealthMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.HealthMissing.X), tonumber(db.oUF.Boss.Texts.HealthMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.HealthMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.HealthMissing.ColorClass = not db.oUF.Boss.Texts.HealthMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.HealthMissing.ColorGradient = false
																			db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Boss HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 1,
														},
														ColorGradient = {
															name = "Color Gradient",
															desc = "Wether you want to use Gradient colored HealthMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthMissing.ColorGradient end,
															set = function(self,ColorGradient)
																		db.oUF.Boss.Texts.HealthMissing.ColorGradient = not db.oUF.Boss.Texts.HealthMissing.ColorGradient
																		if ColorGradient == true then
																			db.oUF.Boss.Texts.HealthMissing.ColorClass = false
																			db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable = false
																			
																			print("Boss HealthMissing Value Color will change once you gain/lose Health")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss HealthMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable = not db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.HealthMissing.ColorClass = false
																			db.oUF.Boss.Texts.HealthMissing.ColorGradient = false
																			
																			oUF_LUI_Boss.Health.valueMissing:SetTextColor(tonumber(db.oUF.Boss.Texts.HealthMissing.IndividualColor.r),tonumber(db.oUF.Boss.Texts.HealthMissing.IndividualColor.g),tonumber(db.oUF.Boss.Texts.HealthMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss HealthMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.HealthMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.HealthMissing.IndividualColor.r, db.oUF.Boss.Texts.HealthMissing.IndividualColor.g, db.oUF.Boss.Texts.HealthMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.HealthMissing.IndividualColor.r = r
																	db.oUF.Boss.Texts.HealthMissing.IndividualColor.g = g
																	db.oUF.Boss.Texts.HealthMissing.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Health.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
										PowerMissing = {
											name = "PowerMissing",
											type = "group",
											order = 7,
											args = {
												Enable = {
													name = "Enable",
													desc = "Wether you want to show the Boss PowerMissing or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Texts.PowerMissing.Enable end,
													set = function(self,Enable)
															db.oUF.Boss.Texts.PowerMissing.Enable = not db.oUF.Boss.Texts.PowerMissing.Enable
															if Enable == true then
																oUF_LUI_Boss.Power.valueMissing:Show()
															else
																oUF_LUI_Boss.Power.valueMissing:Hide()
															end
														end,
													order = 1,
												},
												FontSettings = {
													name = "Font Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 1,
													args = {
														FontSize = {
															name = "Size",
															desc = "Choose your Boss PowerMissing Fontsize!\n Default: "..defaults.profile.oUF.Boss.Texts.PowerMissing.Size,
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															type = "range",
															min = 1,
															max = 40,
															step = 1,
															get = function() return db.oUF.Boss.Texts.PowerMissing.Size end,
															set = function(_, FontSize)
																	db.oUF.Boss.Texts.PowerMissing.Size = FontSize
																	oUF_LUI_Boss.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerMissing.Font),db.oUF.Boss.Texts.PowerMissing.Size,db.oUF.Boss.Texts.PowerMissing.Outline)
																end,
															order = 1,
														},
														empty = {
															order = 2,
															width = "full",

															type = "description",
															name = " ",
														},
														ShowAlways = {
															name = "Show Always",
															desc = "Always show Boss PowerMissing or just if the Unit has no MaxHP.",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerMissing.ShowAlways end,
															set = function(self,ShowAlways)
																	db.oUF.Boss.Texts.PowerMissing.ShowAlways = not db.oUF.Boss.Texts.PowerMissing.ShowAlways
																end,
															order = 3,
														},
														ShortValue = {
															name = "Short Value",
															desc = "Show a Short or the Normal Value of the Missing HP",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerMissing.ShortValue end,
															set = function(self,ShortValue)
																	db.oUF.Boss.Texts.PowerMissing.ShortValue = not db.oUF.Boss.Texts.PowerMissing.ShortValue
																end,
															order = 4,
														},
														Font = {
															name = "Font",
															desc = "Choose your Font for Boss PowerMissing!\n\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.Font,
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															type = "select",
															dialogControl = "LSM30_Font",
															values = widgetLists.font,
															get = function() return db.oUF.Boss.Texts.PowerMissing.Font end,
															set = function(self, Font)
																	db.oUF.Boss.Texts.PowerMissing.Font = Font
																	oUF_LUI_Boss.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerMissing.Font),db.oUF.Boss.Texts.PowerMissing.Size,db.oUF.Boss.Texts.PowerMissing.Outline)
																end,
															order = 5,
														},
														FontFlag = {
															name = "Font Flag",
															desc = "Choose the Font Flag for your Boss PowerMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.Outline,
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															type = "select",
															values = fontflags,
															get = function()
																	for k, v in pairs(fontflags) do
																		if db.oUF.Boss.Texts.PowerMissing.Outline == v then
																			return k
																		end
																	end
																end,
															set = function(self, FontFlag)
																	db.oUF.Boss.Texts.PowerMissing.Outline = fontflags[FontFlag]
																	oUF_LUI_Boss.Power.valueMissing:SetFont(LSM:Fetch("font", db.oUF.Boss.Texts.PowerMissing.Font),db.oUF.Boss.Texts.PowerMissing.Size,db.oUF.Boss.Texts.PowerMissing.Outline)
																end,
															order = 6,
														},
														PowerMissingX = {
															name = "X Value",
															desc = "X Value for your Boss PowerMissing.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.X,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Boss.Texts.PowerMissing.X end,
															set = function(self,PowerMissingX)
																		if PowerMissingX == nil or PowerMissingX == "" then
																			PowerMissingX = "0"
																		end
																		db.oUF.Boss.Texts.PowerMissing.X = PowerMissingX
																		oUF_LUI_Boss.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_Boss.Power.valueMissing:SetPoint(db.oUF.Boss.Texts.PowerMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerMissing.X), tonumber(db.oUF.Boss.Texts.PowerMissing.Y))
																	end,
															order = 7,
														},
														PowerMissingY = {
															name = "Y Value",
															desc = "Y Value for your Boss PowerMissing.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.Y,
															type = "input",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															get = function() return db.oUF.Boss.Texts.PowerMissing.Y end,
															set = function(self,PowerMissingY)
																		if PowerMissingY == nil or PowerMissingY == "" then
																			PowerMissingY = "0"
																		end
																		db.oUF.Boss.Texts.PowerMissing.Y = PowerMissingY
																		oUF_LUI_Boss.Power.valueMissing:ClearAllPoints()
																		oUF_LUI_Boss.Power.valueMissing:SetPoint(db.oUF.Boss.Texts.PowerMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerMissing.X), tonumber(db.oUF.Boss.Texts.PowerMissing.Y))
																	end,
															order = 8,
														},
														Point = {
															name = "Point",
															desc = "Choose the Position for your Boss PowerMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.Point,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.PowerMissing.Point == v then
																			return k
																		end
																	end
																end,
															set = function(self, Point)
																	db.oUF.Boss.Texts.PowerMissing.Point = positions[Point]
																	oUF_LUI_Boss.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_Boss.Power.valueMissing:SetPoint(db.oUF.Boss.Texts.PowerMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerMissing.X), tonumber(db.oUF.Boss.Texts.PowerMissing.Y))
																end,
															order = 9,
														},
														RelativePoint = {
															name = "RelativePoint",
															desc = "Choose the RelativePoint for your Boss PowerMissing.\nDefault: "..defaults.profile.oUF.Boss.Texts.PowerMissing.RelativePoint,
															type = "select",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
															values = positions,
															get = function()
																	for k, v in pairs(positions) do
																		if db.oUF.Boss.Texts.PowerMissing.RelativePoint == v then
																			return k
																		end
																	end
																end,
															set = function(self, RelativePoint)
																	db.oUF.Boss.Texts.PowerMissing.RelativePoint = positions[RelativePoint]
																	oUF_LUI_Boss.Power.valueMissing:ClearAllPoints()
																	oUF_LUI_Boss.Power.valueMissing:SetPoint(db.oUF.Boss.Texts.PowerMissing.Point, oUF_LUI_Boss, db.oUF.Boss.Texts.PowerMissing.RelativePoint, tonumber(db.oUF.Boss.Texts.PowerMissing.X), tonumber(db.oUF.Boss.Texts.PowerMissing.Y))
																end,
															order = 10,
														},
													},
												},
												Colors = {
													name = "Color Settings",
													type = "group",
													disabled = function() return not db.oUF.Boss.Texts.PowerMissing.Enable end,
													guiInline = true,
													order = 2,
													args = {
														ClassColor = {
															name = "Color by Class",
															desc = "Wether you want to use class colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerMissing.ColorClass end,
															set = function(self,ClassColor)
																		db.oUF.Boss.Texts.PowerMissing.ColorClass = not db.oUF.Boss.Texts.PowerMissing.ColorClass
																		if ClassColor == true then
																			db.oUF.Boss.Texts.PowerMissing.ColorType = false
																			db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Boss PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 1,
														},
														ColorType = {
															name = "Color by Type",
															desc = "Wether you want to use Type colored PowerMissing Value or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerMissing.ColorType end,
															set = function(self,ColorType)
																		db.oUF.Boss.Texts.PowerMissing.ColorType = not db.oUF.Boss.Texts.PowerMissing.ColorType
																		if ColorType == true then
																			db.oUF.Boss.Texts.PowerMissing.ColorClass = false
																			db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable = false
																			
																			print("Boss PowerMissing Value Color will change once you gain/lose Power")
																		end
																	end,
															order = 2,
														},
														IndividualColor = {
															name = "Individual Color",
															desc = "Wether you want to use an individual Boss PowerMissing Value Color or not.",
															type = "toggle",
															get = function() return db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable end,
															set = function(self,IndividualColor)
																		db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable = not db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable
																		if IndividualColor == true then
																			db.oUF.Boss.Texts.PowerMissing.ColorClass = false
																			db.oUF.Boss.Texts.PowerMissing.ColorType = false
																			
																			oUF_LUI_Boss.Power.valueMissing:SetTextColor(tonumber(db.oUF.Boss.Texts.PowerMissing.IndividualColor.r),tonumber(db.oUF.Boss.Texts.PowerMissing.IndividualColor.g),tonumber(db.oUF.Boss.Texts.PowerMissing.IndividualColor.b))
																		end
																	end,
															order = 3,
														},
														Color = {
															name = "Individual Color",
															desc = "Choose an individual Boss PowerMissing Value Color.\n\nNote:\nYou have to reload the UI.\nType /rl",
															type = "color",
															disabled = function() return not db.oUF.Boss.Texts.PowerMissing.IndividualColor.Enable end,
															hasAlpha = false,
															get = function() return db.oUF.Boss.Texts.PowerMissing.IndividualColor.r, db.oUF.Boss.Texts.PowerMissing.IndividualColor.g, db.oUF.Boss.Texts.PowerMissing.IndividualColor.b end,
															set = function(_,r,g,b)
																	db.oUF.Boss.Texts.PowerMissing.IndividualColor.r = r
																	db.oUF.Boss.Texts.PowerMissing.IndividualColor.g = g
																	db.oUF.Boss.Texts.PowerMissing.IndividualColor.b = b
																	
																	oUF_LUI_Boss.Power.valueMissing:SetTextColor(r,g,b)
																end,
															order = 4,
														},
													},
												},
											},
										},
									},
								},
								Portrait = {
									name = "Portrait",
									disabled = function() return not db.oUF.Boss.Enable end,
									type = "group",
									order = 7,
									args = {
										EnablePortrait = {
											name = "Enable",
											desc = "Wether you want to show the Portrait or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.Boss.Portrait.Enable end,
											set = function(self,EnablePortrait)
														db.oUF.Boss.Portrait.Enable = not db.oUF.Boss.Portrait.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PortraitWidth = {
											name = "Width",
											desc = "Choose the Width for your Portrait.\nDefault: "..defaults.profile.oUF.Boss.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Boss.Portrait.Enable end,
											get = function() return db.oUF.Boss.Portrait.Width end,
											set = function(self,PortraitWidth)
														if PortraitWidth == nil or PortraitWidth == "" then
															PortraitWidth = "0"
														end
														db.oUF.Boss.Portrait.Width = PortraitWidth
														oUF_LUI_Boss.Portrait:SetWidth(tonumber(PortraitWidth))
													end,
											order = 2,
										},
										PortraitHeight = {
											name = "Height",
											desc = "Choose the Height for your Portrait.\nDefault: "..defaults.profile.oUF.Boss.Portrait.Width,
											type = "input",
											disabled = function() return not db.oUF.Boss.Portrait.Enable end,
											get = function() return db.oUF.Boss.Portrait.Height end,
											set = function(self,PortraitHeight)
														if PortraitHeight == nil or PortraitHeight == "" then
															PortraitHeight = "0"
														end
														db.oUF.Boss.Portrait.Height = PortraitHeight
														oUF_LUI_Boss.Portrait:SetHeight(tonumber(PortraitHeight))
													end,
											order = 3,
										},
										PortraitX = {
											name = "X Value",
											desc = "X Value for your Portrait.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Portrait.X,
											type = "input",
											disabled = function() return not db.oUF.Boss.Portrait.Enable end,
											get = function() return db.oUF.Boss.Portrait.X end,
											set = function(self,PortraitX)
														if PortraitX == nil or PortraitX == "" then
															PortraitX = "0"
														end
														db.oUF.Boss.Portrait.X = PortraitX
														oUF_LUI_Boss.Portrait:SetPoint("TOPLEFT", oUF_LUI_Boss.Health, "TOPLEFT", PortraitX, db.oUF.Boss.Portrait.Y)
													end,
											order = 4,
										},
										PortraitY = {
											name = "Y Value",
											desc = "Y Value for your Portrait.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Portrait.Y,
											type = "input",
											disabled = function() return not db.oUF.Boss.Portrait.Enable end,
											get = function() return db.oUF.Boss.Portrait.Y end,
											set = function(self,PortraitY)
														if PortraitY == nil or PortraitY == "" then
															PortraitY = "0"
														end
														db.oUF.Boss.Portrait.Y = PortraitY
														oUF_LUI_Boss.Portrait:SetPoint("TOPLEFT", oUF_LUI_Boss.Health, "TOPLEFT", db.oUF.Boss.Portrait.X, PortraitY)
													end,
											order = 5,
										},
									},
								},
								Icons = {
									name = "Icons",
									type = "group",
									disabled = function() return not db.oUF.Boss.Enable end,
									order = 8,
									childGroups = "tab",
									args = {
										Raid = {
											name = "RaidIcon",
											type = "group",
											order = 1,
											args = {
												RaidEnable = {
													name = "Enable",
													desc = "Wether you want to show the Raid Icon or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.Boss.Icons.Raid.Enable end,
													set = function(self,RaidEnable)
																db.oUF.Boss.Icons.Raid.Enable = not db.oUF.Boss.Icons.Raid.Enable
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												RaidX = {
													name = "X Value",
													desc = "X Value for your Raid Icon.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.Boss.Icons.Raid.X,
													type = "input",
													disabled = function() return not db.oUF.Boss.Icons.Raid.Enable end,
													get = function() return db.oUF.Boss.Icons.Raid.X end,
													set = function(self,RaidX)
																if RaidX == nil or RaidX == "" then
																	RaidX = "0"
																end

																db.oUF.Boss.Icons.Raid.X = RaidX
																oUF_LUI_Boss.RaidIcon:ClearAllPoints()
																oUF_LUI_Boss.RaidIcon:SetPoint(db.oUF.Boss.Icons.Raid.Point, oUF_LUI_Boss, db.oUF.Boss.Icons.Raid.Point, tonumber(RaidX), tonumber(db.oUF.Boss.Icons.Raid.Y))
															end,
													order = 2,
												},
												RaidY = {
													name = "Y Value",
													desc = "Y Value for your Raid Icon.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.Boss.Icons.Raid.Y,
													type = "input",
													disabled = function() return not db.oUF.Boss.Icons.Raid.Enable end,
													get = function() return db.oUF.Boss.Icons.Raid.Y end,
													set = function(self,RaidY)
																if RaidY == nil or RaidY == "" then
																	RaidY = "0"
																end
																db.oUF.Boss.Icons.Raid.Y = RaidY
																oUF_LUI_Boss.RaidIcon:ClearAllPoints()
																oUF_LUI_Boss.RaidIcon:SetPoint(db.oUF.Boss.Icons.Raid.Point, oUF_LUI_Boss, db.oUF.Boss.Icons.Raid.Point, tonumber(db.oUF.Boss.Icons.Raid.X), tonumber(RaidY))
															end,
													order = 3,
												},
												RaidPoint = {
													name = "Position",
													desc = "Choose the Position for your Raid Icon.\nDefault: "..defaults.profile.oUF.Boss.Icons.Raid.Point,
													type = "select",
													disabled = function() return not db.oUF.Boss.Icons.Raid.Enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.Boss.Icons.Raid.Point == v then
																	return k
																end
															end
														end,
													set = function(self, RaidPoint)
															db.oUF.Boss.Icons.Raid.Point = positions[RaidPoint]
															oUF_LUI_Boss.RaidIcon:ClearAllPoints()
															oUF_LUI_Boss.RaidIcon:SetPoint(db.oUF.Boss.Icons.Raid.Point, oUF_LUI_Boss, db.oUF.Boss.Icons.Raid.Point, tonumber(db.oUF.Boss.Icons.Raid.X), tonumber(db.oUF.Boss.Icons.Raid.X))
														end,
													order = 4,
												},
												RaidSize = {
													name = "Size",
													desc = "Choose a Size for your Raid Icon.\nDefault: "..defaults.profile.oUF.Boss.Icons.Raid.Size,
													type = "range",
													min = 5,
													max = 200,
													step = 5,
													disabled = function() return not db.oUF.Boss.Icons.Raid.Enable end,
													get = function() return db.oUF.Boss.Icons.Raid.Size end,
													set = function(_, RaidSize) 
															db.oUF.Boss.Icons.Raid.Size = RaidSize
															oUF_LUI_Boss.RaidIcon:SetHeight(RaidSize)
															oUF_LUI_Boss.RaidIcon:SetWidth(RaidSize)
														end,
													order = 5,
												},
												toggle = {
													order = 6,
													name = "Show/Hide",
													disabled = function() return not db.oUF.Boss.Icons.Raid.Enable end,
													desc = "Toggles the RaidIcon",
													type = 'execute',
													func = function() if oUF_LUI_Boss.RaidIcon:IsShown() then oUF_LUI_Boss.RaidIcon:Hide() else oUF_LUI_Boss.RaidIcon:Show() end end
												},
											},
										},
									},
								},
							},
						},
					},
				},
				Auras = {
					name = "Auras",
					type = "group",
					order = 2,
					args = {
						header1 = {
							name = "Auras",
							type = "header",
							order = 1,
						},
						PartyHeader = {
							order = 2,
							width = "full",
							type = "description",
							name = "\nYou can configure all different kind of Auras:\n\n  -Player Buffs/Debuffs\n  -Target Buffs/Debuffs\n  -Focus Buffs/Debuffs\n  -Party Buffs/Debuffs\n  -Pet Buffs/Debuffs\n  -ToT Buffs/Debuffs\n\nChoose any Tab on the left side.",
						},
						header2 = {
							name = "Settings",
							type = "header",
							order = 3,
						},
						AuratimerFont = {
							name = "Auratimers Font",
							desc = "Choose your Font for Auratimers!\n\nDefault: Prototype",
							type = "select",
							dialogControl = "LSM30_Font",
							values = widgetLists.font,
							get = function() return db.oUF.auras.auratimer_font end,
							set = function(self, AuratimerFont)
									db.oUF.auras.auratimer_font = AuratimerFont
									StaticPopup_Show("RELOAD_UI")
								end,
							order = 4,
						},
						AuratimerFontSize = {
							name = "Size",
							desc = "Choose your Auratimers Fontsize!\n Default: 12",
							type = "range",
							min = 5,
							max = 20,
							step = 1,
							get = function() return db.oUF.auras.auratimer_size end,
							set = function(_, AuratimerFontSize) 
									db.oUF.auras.auratimer_size = AuratimerFontSize
									StaticPopup_Show("RELOAD_UI")
								end,
							order = 5,
						},
						AuratimerFontFlag = {
							name = "Font Flag",
							desc = "Choose the Font Flag for your Auratimers.\nDefault: OUTLINE",
							type = "select",
							values = fontflags,
							get = function()
									for k, v in pairs(fontflags) do
										if db.oUF.auras.auratimer_flag == v then
											return k
										end
									end
								end,
							set = function(self, AuratimerFontFlag)
									db.oUF.auras.auratimer_flag = fontflags[AuratimerFontFlag]
									StaticPopup_Show("RELOAD_UI")
								end,
							order = 6,
						},
						Player = {
							name = "Player",
							type = "group",
							childGroups = "tab",
							order = 7,
							args = {
								Player = {
									name = "Player Auras",
									type = "group",
									childGroups = "tab",
									order = 1,
									args = {
										header1 = {
											name = "Player Auras",
											type = "header",
											order = 1,
										},
										Settings = {
											name = "Settings",
											type = "group",
											order = 3,
											args = {
												PlayerBuffsEnable = {
													name = "Enable Player Auras",
													desc = "Wether you want to show your Buffs/Debuffs or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.auras.player_auras_enable end,
													set = function(self,PlayerBuffsEnable)
																db.oUF.auras.player_auras_enable = not db.oUF.auras.player_auras_enable 
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												NumMax = {
													name = "Max Amount",
													desc = "Maximal Amount of Buffs/Debuffs.\nDefault: "..defaults.profile.oUF.auras.player.num_max,
													type = "input",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													get = function() return db.oUF.auras.player.num_max end,
													set = function(self,NumMax)
																if NumMax == nil or NumMax == "" then
																	NumMax = "0"
																end
																db.oUF.auras.player.num_max = NumMax
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 2,
												},
												NumRow = {
													name = "Amount per Row",
													desc = "Choose an Amount of Buffs/Debuffs per Row.\nDefault: "..defaults.profile.oUF.auras.player.num_row,
													type = "input",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													get = function() return db.oUF.auras.player.num_row end,
													set = function(self,NumRow)
																if NumRow == nil or NumRow == "" then
																	NumRow = "0"
																end
																db.oUF.auras.player.num_row = NumRow
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 3,
												},
												Spacing = {
													name = "Spacing",
													desc = "Spacing between your Buffs/Debuffs.\nDefault: "..defaults.profile.oUF.auras.player.spacing,
													type = "input",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													get = function() return db.oUF.auras.player.spacing end,
													set = function(self,Spacing)
																if Spacing == nil or Spacing == "" then
																	Spacing = "0"
																end
																db.oUF.auras.player.spacing = Spacing
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 4,
												},
												SpacingRow = {
													name = "Spacing between Rows",
													desc = "Spacing between your Buff Rows.\nDefault: "..defaults.profile.oUF.auras.player.spacing_row,
													type = "input",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													get = function() return db.oUF.auras.player.spacing_row end,
													set = function(self,SpacingRow)
																if SpacingRow == nil or SpacingRow == "" then
																	SpacingRow = "0"
																end
																db.oUF.auras.player.spacing_row = SpacingRow
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 5,
												},
												Anchor = {
													name = "Initial Anchor",
													desc = "Choose the initinal Anchor for your Auras.\nDefault: "..defaults.profile.oUF.auras.player.anchor,
													type = "select",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.auras.player.anchor == v then
																	return k
																end
															end
														end,
													set = function(self, Anchor)
															db.oUF.auras.player.anchor = positions[Anchor]
														end,
													order = 6,
												},
												Growth = {
													name = "Growth",
													desc = "Choose the growth direction for your Buffs/Debuffs.\nDefault: "..defaults.profile.oUF.auras.player.growth,
													type = "select",
													disabled = function() return not db.oUF.auras.player_auras_enable end,
													values = growthX,
													get = function()
															for k, v in pairs(growthX) do
																if db.oUF.auras.player.growth == v then
																	return k
																end
															end
														end,
													set = function(self, Growth)
															db.oUF.auras.player.growth = growthX[Growth]
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 7,
												},
											},
										},
										Buffs = {
											name = "Buffs",
											type = "group",
											disabled = function() return not db.oUF.auras.player_auras_enable end,
											order = 4,
											args = {
												Size = {
													name = "Size",
													desc = "Choose a Size for your Buffs\nDefault: "..defaults.profile.oUF.auras.player.buffs.size,
													type = "input",
													get = function() return db.oUF.auras.player.buffs.size end,
													set = function(self,Size)
																if Size == nil or Size == "" then
																	Size = "0"
																end
																db.oUF.auras.player.buffs.size = Size
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												emptyapb = {
													order = 3,
													width = "full",
													type = "description",
													name = " ",
												},
												BuffsX = {
													name = "X Value",
													desc = "X Value for your Player Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.auras.player.buffs.x,
													type = "input",
													get = function() return db.oUF.auras.player.buffs.x end,
													set = function(self,BuffsX)
																if BuffsX == nil or BuffsX == "" then
																	BuffsX = "0"
																end
																db.oUF.auras.player.buffs.x = BuffsX
															end,
													order = 4,
												},
												BuffsY = {
													name = "Y Value",
													desc = "Y Value for your Player Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.auras.player.buffs.y,
													type = "input",
													get = function() return db.oUF.auras.player.buffs.y end,
													set = function(self,BuffsY)
																if BuffsY == nil or BuffsY == "" then
																	BuffsY = "0"
																end
																db.oUF.auras.player.buffs.y = BuffsY
															end,
													order = 5,
												},
											},
										},
										Debuffs = {
											name = "Debuffs",
											type = "group",
											disabled = function() return not db.oUF.auras.player_auras_enable end,
											order = 5,
											args = {
												Size = {
													name = "Size",
													desc = "Choose a Size for your Debuffs\nDefault: "..defaults.profile.oUF.auras.player.debuffs.size,
													type = "input",
													get = function() return db.oUF.auras.player.debuffs.size end,
													set = function(self,Size)
																if Size == nil or Size == "" then
																	Size = "0"
																end
																db.oUF.auras.player.debuffs.size = Size
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												emptyapb = {
													order = 3,
													width = "full",
													type = "description",
													name = " ",
												},
												DebuffsX = {
													name = "Debuffs X Value",
													desc = "X Value for your Player Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.oUF.auras.player.debuffs.x,
													type = "input",
													get = function() return db.oUF.auras.player.debuffs.x end,
													set = function(self,DebuffsX)
																if DebuffsX == nil or DebuffsX == "" then
																	DebuffsX = "0"
																end
																db.oUF.auras.player.debuffs.x = DebuffsX
															end,
													order = 4,
												},
												DebuffsY = {
													name = "Debuffs Y Value",
													desc = "Y Value for your Player Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.oUF.auras.player.debuffs.y,
													type = "input",
													get = function() return db.oUF.auras.player.debuffs.y end,
													set = function(self,DebuffsY)
																if DebuffsY == nil or DebuffsY == "" then
																	DebuffsY = "0"
																end
																db.oUF.auras.player.debuffs.y = DebuffsY
															end,
													order = 5,
												},
											},
										},
									},
								},
								oUF = {
									name = "UnitFrame Auras",
									type = "group",
									order = 2,
									childGroups = "tab",
									args = {
										header1 = {
											name = "Player UnitFrame Auras",
											type = "header",
											order = 1,
										},
										PlayerBuffs = {
											name = "Buffs",
											type = "group",
											order = 2,
											args = {
												PlayerBuffsEnable = {
													name = "Enable Player Buffs",
													desc = "Wether you want to show Player Buffs or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.auras.player2.buffs_enable end,
													set = function(self,PlayerBuffsEnable)
																db.oUF.auras.player2.buffs_enable = not db.oUF.auras.player2.buffs_enable 
															end,
													order = 0,
												},
												PlayerBuffsAuratimer = {
													name = "Enable Auratimer",
													desc = "Wether you want to show Auratimers or not.",
													type = "toggle",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffs_auratimer end,
													set = function(self,PlayerBuffsAuratimer)
																db.oUF.auras.player2.buffs_auratimer = not db.oUF.auras.player2.buffs_auratimer
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PlayerBuffsPlayerBuffsOnly = {
													name = "Player Buffs Only",
													desc = "Wether you want to show only your Buffs on Player or not.",
													type = "toggle",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffs_playeronly end,
													set = function(self,PlayerBuffsPlayerBuffsOnly)
																db.oUF.auras.player2.buffs_playeronly = not db.oUF.auras.player2.buffs_playeronly
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 2,
												},
												PlayerBuffsNum = {
													name = "Amount",
													desc = "Amount of your Player Buffs.\nDefault: 36",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffs_num end,
													set = function(self,PlayerBuffsNum)
																if PlayerBuffsNum == nil or PlayerBuffsNum == "" then
																	PlayerBuffsNum = "0"
																end
																db.oUF.auras.player2.buffs_num = PlayerBuffsNum
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 3,
												},
												emptyq1 = {
													name = "   ",
													width = "full",
													type = "description",
													order = 4,
												},
												PlayerBuffsSize = {
													name = "Size",
													desc = "Size for your Player Buffs.\nDefault: 26",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffs_size end,
													set = function(self,PlayerBuffsSize)
																if PlayerBuffsSize == nil or PlayerBuffsSize == "" then
																	PlayerBuffsSize = "0"
																end
																db.oUF.auras.player2.buffs_size = PlayerBuffsSize
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 5,
												},
												PlayerBuffsSpacing = {
													name = "Spacing",
													desc = "Spacing between your Player Buffs.\nDefault: 2",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffs_spacing end,
													set = function(self,PlayerBuffsSpacing)
																if PlayerBuffsSpacing == nil or PlayerBuffsSpacing == "" then
																	PlayerBuffsSpacing = "0"
																end
																db.oUF.auras.player2.buffs_spacing = PlayerBuffsSpacing
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 6,
												},
												PlayerBuffsX = {
													name = "X Value",
													desc = "X Value for your Player Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffsX end,
													set = function(self,PlayerBuffsX)
																if PlayerBuffsX == nil or PlayerBuffsX == "" then
																	PlayerBuffsX = "0"
																end
																db.oUF.auras.player2.buffsX = PlayerBuffsX
																oUF_LUI_player.Buffs:SetPoint(db.oUF.auras.player2.buffs_initialAnchor, oUF_LUI_player, db.oUF.auras.player2.buffs_initialAnchor, PlayerBuffsX, db.oUF.auras.player2.buffsY)
															end,
													order = 7,
												},
												PlayerBuffsY = {
													name = "Y Value",
													desc = "Y Value for your Player Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 32",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													get = function() return db.oUF.auras.player2.buffsY end,
													set = function(self,PlayerBuffsY)
																if PlayerBuffsY == nil or PlayerBuffsY == "" then
																	PlayerBuffsY = "0"
																end
																db.oUF.auras.player2.buffsY = PlayerBuffsY
																oUF_LUI_player.Buffs:SetPoint(db.oUF.auras.player2.buffs_initialAnchor, oUF_LUI_player, db.oUF.auras.player2.buffs_initialAnchor, db.oUF.auras.player2.buffsX, PlayerBuffsY)
															end,
													order = 8,
												},
												PlayerBuffsGrowthY = {
													name = "Growth Y",
													desc = "Choose the growth Y direction for your Player Buffs.\nDefault: UP",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													values = growthY,
													get = function()
															for k, v in pairs(growthY) do
																if db.oUF.auras.player2.buffs_growthY == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerBuffsGrowthY)
															db.oUF.auras.player2.buffs_growthY = growthY[PlayerBuffsGrowthY]
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 9,
												},
												PlayerBuffsGrowthX = {
													name = "Growth X",
													desc = "Choose the growth X direction for your Player Buffs.\nDefault: RIGHT",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													values = growthX,
													get = function()
															for k, v in pairs(growthX) do
																if db.oUF.auras.player2.buffs_growthX == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerBuffsGrowthX)
															db.oUF.auras.player2.buffs_growthX = growthX[PlayerBuffsGrowthX]
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 10,
												},
												PlayerBuffsAnchor = {
													name = "Initial Anchor",
													desc = "Choose the initinal Anchor for your Player Buffs.\nDefault: TOPLEFT",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.buffs_enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.auras.player2.buffs_initialAnchor == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerBuffsAnchor)
															db.oUF.auras.player2.buffs_initialAnchor = positions[PlayerBuffsAnchor]
															oUF_LUI_player.Buffs:SetPoint(positions[PlayerBuffsAnchor], oUF_LUI_player, positions[PlayerBuffsAnchor], db.oUF.auras.player2.buffsX, db.oUF.auras.player2.buffsY)
														end,
													order = 11,
												},
											},
										},
										PlayerDebuffs = {
											name = "Debuffs",
											type = "group",
											order = 3,
											args = {
												PlayerDebuffsEnable = {
													name = "Enable Player Debuffs",
													desc = "Wether you want to show Player Debuffs or not.",
													type = "toggle",
													width = "full",
													get = function() return db.oUF.auras.player2.debuffs_enable end,
													set = function(self,PlayerDebuffsEnable)
																db.oUF.auras.player2.debuffs_enable = not db.oUF.auras.player2.debuffs_enable 
															end,
													order = 0,
												},
												PlayerDebuffsAuratimer = {
													name = "Enable Auratimer",
													desc = "Wether you want to show Auratimers or not.\nDefault: Off",
													type = "toggle",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_auratimer end,
													set = function(self,PlayerDebuffsAuratimer)
																db.oUF.auras.player2.debuffs_auratimer = not db.oUF.auras.player2.debuffs_auratimer
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 1,
												},
												PlayerDebuffsPlayerDebuffsOnly = {
													name = "Player Debuffs Only",
													desc = "Wether you want to show only your Debuffs on Player or not.",
													type = "toggle",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_playeronly end,
													set = function(self,PlayerDebuffsPlayerDebuffsOnly)
																db.oUF.auras.player2.debuffs_playeronly = not db.oUF.auras.player2.debuffs_playeronly
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 2,
												},
												PlayerDebuffsColorByType = {
													name = "Color by Type",
													desc = "Wether you want to color Player Debuffs by Type or not.",
													type = "toggle",
													width = "full",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_colorbytype end,
													set = function(self,PlayerDebuffsColorByType)
																db.oUF.auras.player2.debuffs_colorbytype = not db.oUF.auras.player2.debuffs_colorbytype
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 3,
												},
												PlayerDebuffsNum = {
													name = "Amount",
													desc = "Amount of your Player Debuffs.\nDefault: 36",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_num end,
													set = function(self,PlayerDebuffsNum)
																if PlayerDebuffsNum == nil or PlayerDebuffsNum == "" then
																	PlayerDebuffsNum = "0"
																end
																db.oUF.auras.player2.debuffs_num = PlayerDebuffsNum
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 4,
												},
												emptyq1 = {
													name = "   ",
													width = "full",
													type = "description",
													order = 5,
												},
												PlayerDebuffsSize = {
													name = "Size",
													desc = "Size for your Player Debuffs.\nDefault: 26",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_size end,
													set = function(self,PlayerDebuffsSize)
																if PlayerDebuffsSize == nil or PlayerDebuffsSize == "" then
																	PlayerDebuffsSize = "0"
																end
																db.oUF.auras.player2.debuffs_size = PlayerDebuffsSize
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 6,
												},
												PlayerDebuffsSpacing = {
													name = "Spacing",
													desc = "Spacing between your Player Debuffs.\nDefault: 2",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffs_spacing end,
													set = function(self,PlayerDebuffsSpacing)
																if PlayerDebuffsSpacing == nil or PlayerDebuffsSpacing == "" then
																	PlayerDebuffsSpacing = "0"
																end
																db.oUF.auras.player2.debuffs_spacing = PlayerDebuffsSpacing
																StaticPopup_Show("RELOAD_UI")
															end,
													order = 7,
												},
												PlayerDebuffsX = {
													name = "X Value",
													desc = "X Value for your Player Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffsX end,
													set = function(self,PlayerDebuffsX)
																if PlayerDebuffsX == nil or PlayerDebuffsX == "" then
																	PlayerDebuffsX = "0"
																end
																db.oUF.auras.player2.debuffsX = PlayerDebuffsX
																oUF_LUI_player.Debuffs:SetPoint(db.oUF.auras.player2.debuffs_initialAnchor, oUF_LUI_player, db.oUF.auras.player2.debuffs_initialAnchor, PlayerDebuffsX, db.oUF.auras.player2.debuffsY)
															end,
													order = 8,
												},
												PlayerDebuffsY = {
													name = "Y Value",
													desc = "Y Value for your Player Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 60",
													type = "input",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													get = function() return db.oUF.auras.player2.debuffsY end,
													set = function(self,PlayerDebuffsY)
																if PlayerDebuffsY == nil or PlayerDebuffsY == "" then
																	PlayerDebuffsY = "0"
																end
																db.oUF.auras.player2.debuffsY = PlayerDebuffsY
																oUF_LUI_player.Debuffs:SetPoint(db.oUF.auras.player2.debuffs_initialAnchor, oUF_LUI_player, db.oUF.auras.player2.debuffs_initialAnchor, db.oUF.auras.player2.debuffsX, PlayerDebuffsY)
															end,
													order = 9,
												},
												PlayerDebuffsGrowthY = {
													name = "Growth Y",
													desc = "Choose the growth Y direction for your Player Debuffs.\nDefault: UP",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													values = growthY,
													get = function()
															for k, v in pairs(growthY) do
																if db.oUF.auras.player2.debuffs_growthY == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerDebuffsGrowthY)
															db.oUF.auras.player2.debuffs_growthY = growthY[PlayerDebuffsGrowthY]
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 10,
												},
												PlayerDebuffsGrowthX = {
													name = "Growth X",
													desc = "Choose the growth X direction for your Player Debuffs.\nDefault: LEFT",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													values = growthX,
													get = function()
															for k, v in pairs(growthX) do
																if db.oUF.auras.player2.debuffs_growthX == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerDebuffsGrowthX)
															db.oUF.auras.player2.debuffs_growthX = growthX[PlayerDebuffsGrowthX]
															StaticPopup_Show("RELOAD_UI")
														end,
													order = 11,
												},
												PlayerDebuffsAnchor = {
													name = "Initial Anchor",
													desc = "Choose the initinal Anchor for your Player Debuffs.\nDefault: TOPRIGHT",
													type = "select",
													disabled = function() return not db.oUF.auras.player2.debuffs_enable end,
													values = positions,
													get = function()
															for k, v in pairs(positions) do
																if db.oUF.auras.player2.debuffs_initialAnchor == v then
																	return k
																end
															end
														end,
													set = function(self, PlayerDebuffsAnchor)
															db.oUF.auras.player2.debuffs_initialAnchor = positions[PlayerDebuffsAnchor]
															oUF_LUI_player.Debuffs:SetPoint(positions[PlayerDebuffsAnchor], oUF_LUI_player, positions[PlayerDebuffsAnchor], db.oUF.auras.player2.debuffsX, db.oUF.auras.target.debuffsY)
														end,
													order = 12,
												},
											},
										},
									},
								},
							},
						},
						Target = {
							name = "Target",
							type = "group",
							childGroups = "tab",
							order = 8,
							args = {
								header1 = {
									name = "Target Auras",
									type = "header",
									order = 1,
								},
								TargetBuffs = {
									name = "Buffs",
									type = "group",
									order = 2,
									args = {
										TargetBuffsEnable = {
											name = "Enable Target Buffs",
											desc = "Wether you want to show Target Buffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.target.buffs_enable end,
											set = function(self,TargetBuffsEnable)
														db.oUF.auras.target.buffs_enable = not db.oUF.auras.target.buffs_enable 
													end,
											order = 0,
										},
										TargetBuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffs_auratimer end,
											set = function(self,TargetBuffsAuratimer)
														db.oUF.auras.target.buffs_auratimer = not db.oUF.auras.target.buffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										TargetBuffsPlayerBuffsOnly = {
											name = "Player Buffs Only",
											desc = "Wether you want to show only your Buffs on Target or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffs_playeronly end,
											set = function(self,TargetBuffsPlayerBuffsOnly)
														db.oUF.auras.target.buffs_playeronly = not db.oUF.auras.target.buffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										TargetBuffsNum = {
											name = "Amount",
											desc = "Amount of your Target Buffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffs_num end,
											set = function(self,TargetBuffsNum)
														if TargetBuffsNum == nil or TargetBuffsNum == "" then
															TargetBuffsNum = "0"
														end
														db.oUF.auras.target.buffs_num = TargetBuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										TargetBuffsSize = {
											name = "Size",
											desc = "Size for your Target Buffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffs_size end,
											set = function(self,TargetBuffsSize)
														if TargetBuffsSize == nil or TargetBuffsSize == "" then
															TargetBuffsSize = "0"
														end
														db.oUF.auras.target.buffs_size = TargetBuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										TargetBuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Target Buffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffs_spacing end,
											set = function(self,TargetBuffsSpacing)
														if TargetBuffsSpacing == nil or TargetBuffsSpacing == "" then
															TargetBuffsSpacing = "0"
														end
														db.oUF.auras.target.buffs_spacing = TargetBuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										TargetBuffsX = {
											name = "X Value",
											desc = "X Value for your Target Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffsX end,
											set = function(self,TargetBuffsX)
														if TargetBuffsX == nil or TargetBuffsX == "" then
															TargetBuffsX = "0"
														end
														db.oUF.auras.target.buffsX = TargetBuffsX
														oUF_LUI_target.Buffs:SetPoint(db.oUF.auras.target.buffs_initialAnchor, oUF_LUI_target, db.oUF.auras.target.buffs_initialAnchor, TargetBuffsX, db.oUF.auras.target.buffsY)
													end,
											order = 6,
										},
										TargetBuffsY = {
											name = "Y Value",
											desc = "Y Value for your Target Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 32",
											type = "input",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											get = function() return db.oUF.auras.target.buffsY end,
											set = function(self,TargetBuffsY)
														if TargetBuffsY == nil or TargetBuffsY == "" then
															TargetBuffsY = "0"
														end
														db.oUF.auras.target.buffsY = TargetBuffsY
														oUF_LUI_target.Buffs:SetPoint(db.oUF.auras.target.buffs_initialAnchor, oUF_LUI_target, db.oUF.auras.target.buffs_initialAnchor, db.oUF.auras.target.buffsX, TargetBuffsY)
													end,
											order = 7,
										},
										TargetBuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Target Buffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.target.buffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, TargetBuffsGrowthY)
													db.oUF.auras.target.buffs_growthY = growthY[TargetBuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										TargetBuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Target Buffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.target.buffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, TargetBuffsGrowthX)
													db.oUF.auras.target.buffs_growthX = growthX[TargetBuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										TargetBuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Target Buffs.\nDefault: TOPLEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.target.buffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.target.buffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, TargetBuffsAnchor)
													db.oUF.auras.target.buffs_initialAnchor = positions[TargetBuffsAnchor]
													oUF_LUI_target.Buffs:SetPoint(positions[TargetBuffsAnchor], oUF_LUI_target, positions[TargetBuffsAnchor], db.oUF.auras.target.buffsX, db.oUF.auras.target.buffsY)
												end,
											order = 10,
										},
									},
								},
								TargetDebuffs = {
									name = "Debuffs",
									type = "group",
									order = 3,
									args = {
										TargetDebuffsEnable = {
											name = "Enable Target Debuffs",
											desc = "Wether you want to show Target Debuffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.target.debuffs_enable end,
											set = function(self,TargetDebuffsEnable)
														db.oUF.auras.target.debuffs_enable = not db.oUF.auras.target.debuffs_enable 
													end,
											order = 0,
										},
										TargetDebuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.\nDefault: Off",
											type = "toggle",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_auratimer end,
											set = function(self,TargetDebuffsAuratimer)
														db.oUF.auras.target.debuffs_auratimer = not db.oUF.auras.target.debuffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										TargetDebuffsPlayerDebuffsOnly = {
											name = "Player Debuffs Only",
											desc = "Wether you want to show only your Debuffs on Target or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_playeronly end,
											set = function(self,TargetDebuffsPlayerDebuffsOnly)
														db.oUF.auras.target.debuffs_playeronly = not db.oUF.auras.target.debuffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										TargetDebuffsColorByType = {
											name = "Color by Type",
											desc = "Wether you want to color Target Debuffs by Type or not.",
											type = "toggle",
											width = "full",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_colorbytype end,
											set = function(self,TargetDebuffsColorByType)
														db.oUF.auras.target.debuffs_colorbytype = not db.oUF.auras.target.debuffs_colorbytype
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										TargetDebuffsNum = {
											name = "Amount",
											desc = "Amount of your Target Debuffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_num end,
											set = function(self,TargetDebuffsNum)
														if TargetDebuffsNum == nil or TargetDebuffsNum == "" then
															TargetDebuffsNum = "0"
														end
														db.oUF.auras.target.debuffs_num = TargetDebuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										TargetDebuffsSize = {
											name = "Size",
											desc = "Size for your Target Debuffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_size end,
											set = function(self,TargetDebuffsSize)
														if TargetDebuffsSize == nil or TargetDebuffsSize == "" then
															TargetDebuffsSize = "0"
														end
														db.oUF.auras.target.debuffs_size = TargetDebuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										TargetDebuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Target Debuffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffs_spacing end,
											set = function(self,TargetDebuffsSpacing)
														if TargetDebuffsSpacing == nil or TargetDebuffsSpacing == "" then
															TargetDebuffsSpacing = "0"
														end
														db.oUF.auras.target.debuffs_spacing = TargetDebuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 6,
										},
										TargetDebuffsX = {
											name = "X Value",
											desc = "X Value for your Target Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffsX end,
											set = function(self,TargetDebuffsX)
														if TargetDebuffsX == nil or TargetDebuffsX == "" then
															TargetDebuffsX = "0"
														end
														db.oUF.auras.target.debuffsX = TargetDebuffsX
														oUF_LUI_target.Debuffs:SetPoint(db.oUF.auras.target.debuffs_initialAnchor, oUF_LUI_target, db.oUF.auras.target.debuffs_initialAnchor, TargetDebuffsX, db.oUF.auras.target.debuffsY)
													end,
											order = 7,
										},
										TargetDebuffsY = {
											name = "Y Value",
											desc = "Y Value for your Target Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 60",
											type = "input",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											get = function() return db.oUF.auras.target.debuffsY end,
											set = function(self,TargetDebuffsY)
														if TargetDebuffsY == nil or TargetDebuffsY == "" then
															TargetDebuffsY = "0"
														end
														db.oUF.auras.target.debuffsY = TargetDebuffsY
														oUF_LUI_target.Debuffs:SetPoint(db.oUF.auras.target.debuffs_initialAnchor, oUF_LUI_target, db.oUF.auras.target.debuffs_initialAnchor, db.oUF.auras.target.debuffsX, TargetDebuffsY)
													end,
											order = 8,
										},
										TargetDebuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Target Debuffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.target.debuffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, TargetDebuffsGrowthY)
													db.oUF.auras.target.debuffs_growthY = growthY[TargetDebuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										TargetDebuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Target Debuffs.\nDefault: LEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.target.debuffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, TargetDebuffsGrowthX)
													db.oUF.auras.target.debuffs_growthX = growthX[TargetDebuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 10,
										},
										TargetDebuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Target Debuffs.\nDefault: TOPRIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.target.debuffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.target.debuffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, TargetDebuffsAnchor)
													db.oUF.auras.target.debuffs_initialAnchor = positions[TargetDebuffsAnchor]
													oUF_LUI_target.Debuffs:SetPoint(positions[TargetDebuffsAnchor], oUF_LUI_target, positions[TargetDebuffsAnchor], db.oUF.auras.target.debuffsX, db.oUF.auras.target.debuffsY)
												end,
											order = 11,
										},
									},
								},
							},
						},
						Focus = {
							name = "Focus",
							type = "group",
							order = 9,
							disabled = function() return not db.oUF.Focus.Enable end,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Focus Auras",
									type = "header",
									order = 1,
								},
								FocusBuffs = {
									name = "Buffs",
									type = "group",
									order = 2,
									args = {
										FocusBuffsEnable = {
											name = "Enable Focus Buffs",
											desc = "Wether you want to show Focus Buffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.focus.buffs_enable end,
											set = function(self,FocusBuffsEnable)
														db.oUF.auras.focus.buffs_enable = not db.oUF.auras.focus.buffs_enable 
													end,
											order = 0,
										},
										FocusBuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffs_auratimer end,
											set = function(self,FocusBuffsAuratimer)
														db.oUF.auras.focus.buffs_auratimer = not db.oUF.auras.focus.buffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										FocusBuffsPlayerBuffsOnly = {
											name = "Player Buffs Only",
											desc = "Wether you want to show only your Buffs on Focus or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffs_playeronly end,
											set = function(self,FocusBuffsPlayerBuffsOnly)
														db.oUF.auras.focus.buffs_playeronly = not db.oUF.auras.focus.buffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										FocusBuffsNum = {
											name = "Amount",
											desc = "Amount of your Focus Buffs.\nDefault: 8",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffs_num end,
											set = function(self,FocusBuffsNum)
														if FocusBuffsNum == nil or FocusBuffsNum == "" then
															FocusBuffsNum = "0"
														end
														db.oUF.auras.focus.buffs_num = FocusBuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										FocusBuffsSize = {
											name = "Size",
											desc = "Size for your Focus Buffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffs_size end,
											set = function(self,FocusBuffsSize)
														if FocusBuffsSize == nil or FocusBuffsSize == "" then
															FocusBuffsSize = "0"
														end
														db.oUF.auras.focus.buffs_size = FocusBuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										FocusBuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Focus Buffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffs_spacing end,
											set = function(self,FocusBuffsSpacing)
														if FocusBuffsSpacing == nil or FocusBuffsSpacing == "" then
															FocusBuffsSpacing = "0"
														end
														db.oUF.auras.focus.buffs_spacing = FocusBuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										FocusBuffsX = {
											name = "X Value",
											desc = "X Value for your Focus Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffsX end,
											set = function(self,FocusBuffsX)
														if FocusBuffsX == nil or FocusBuffsX == "" then
															FocusBuffsX = "0"
														end
														db.oUF.auras.focus.buffsX = FocusBuffsX
														oUF_LUI_focus.Buffs:SetPoint(db.oUF.auras.focus.buffs_initialAnchor, oUF_LUI_focus, db.oUF.auras.focus.buffs_initialAnchor, FocusBuffsX, db.oUF.auras.focus.buffsY)
													end,
											order = 6,
										},
										FocusBuffsY = {
											name = "Y Value",
											desc = "Y Value for your Focus Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 32",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											get = function() return db.oUF.auras.focus.buffsY end,
											set = function(self,FocusBuffsY)
														if FocusBuffsY == nil or FocusBuffsY == "" then
															FocusBuffsY = "0"
														end
														db.oUF.auras.focus.buffsY = FocusBuffsY
														oUF_LUI_focus.Buffs:SetPoint(db.oUF.auras.focus.buffs_initialAnchor, oUF_LUI_focus, db.oUF.auras.focus.buffs_initialAnchor, db.oUF.auras.focus.buffsX, FocusBuffsY)
													end,
											order = 7,
										},
										FocusBuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Focus Buffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.focus.buffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, FocusBuffsGrowthY)
													db.oUF.auras.focus.buffs_growthY = growthY[FocusBuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										FocusBuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Focus Buffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.focus.buffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, FocusBuffsGrowthX)
													db.oUF.auras.focus.buffs_growthX = growthX[FocusBuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										FocusBuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Focus Buffs.\nDefault: TOPLEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.buffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.focus.buffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, FocusBuffsAnchor)
													db.oUF.auras.focus.buffs_initialAnchor = positions[FocusBuffsAnchor]
													oUF_LUI_focus.Buffs:SetPoint(positions[FocusBuffsAnchor], oUF_LUI_focus, positions[FocusBuffsAnchor], db.oUF.auras.focus.buffsX, db.oUF.auras.focus.buffsY)
												end,
											order = 10,
										},
									},
								},
								FocusDebuffs = {
									name = "Debuffs",
									type = "group",
									order = 3,
									args = {
										FocusDebuffsEnable = {
											name = "Enable Focus Debuffs",
											desc = "Wether you want to show Focus Debuffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.focus.debuffs_enable end,
											set = function(self,FocusDebuffsEnable)
														db.oUF.auras.focus.debuffs_enable = not db.oUF.auras.focus.debuffs_enable 
													end,
											order = 0,
										},
										FocusDebuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.\nDefault: Off",
											type = "toggle",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_auratimer end,
											set = function(self,FocusDebuffsAuratimer)
														db.oUF.auras.focus.debuffs_auratimer = not db.oUF.auras.focus.debuffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										FocusDebuffsPlayerDebuffsOnly = {
											name = "Player Debuffs Only",
											desc = "Wether you want to show only your Debuffs on Focus or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_playeronly end,
											set = function(self,FocusDebuffsPlayerDebuffsOnly)
														db.oUF.auras.focus.debuffs_playeronly = not db.oUF.auras.focus.debuffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										FocusDebuffsColorByType = {
											name = "Color by Type",
											desc = "Wether you want to color Focus Debuffs by Type or not.",
											type = "toggle",
											width = "full",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_colorbytype end,
											set = function(self,FocusDebuffsColorByType)
														db.oUF.auras.focus.debuffs_colorbytype = not db.oUF.auras.focus.debuffs_colorbytype
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										FocusDebuffsNum = {
											name = "Amount",
											desc = "Amount of your Focus Debuffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_num end,
											set = function(self,FocusDebuffsNum)
														if FocusDebuffsNum == nil or FocusDebuffsNum == "" then
															FocusDebuffsNum = "0"
														end
														db.oUF.auras.focus.debuffs_num = FocusDebuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										FocusDebuffsSize = {
											name = "Size",
											desc = "Size for your Focus Debuffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_size end,
											set = function(self,FocusDebuffsSize)
														if FocusDebuffsSize == nil or FocusDebuffsSize == "" then
															FocusDebuffsSize = "0"
														end
														db.oUF.auras.focus.debuffs_size = FocusDebuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										FocusDebuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Focus Debuffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffs_spacing end,
											set = function(self,FocusDebuffsSpacing)
														if FocusDebuffsSpacing == nil or FocusDebuffsSpacing == "" then
															FocusDebuffsSpacing = "0"
														end
														db.oUF.auras.focus.debuffs_spacing = FocusDebuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 6,
										},
										FocusDebuffsX = {
											name = "X Value",
											desc = "X Value for your Focus Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffsX end,
											set = function(self,FocusDebuffsX)
														if FocusDebuffsX == nil or FocusDebuffsX == "" then
															FocusDebuffsX = "0"
														end
														db.oUF.auras.focus.debuffsX = FocusDebuffsX
														oUF_LUI_focus.Debuffs:SetPoint(db.oUF.auras.focus.debuffs_initialAnchor, oUF_LUI_focus, db.oUF.auras.focus.debuffs_initialAnchor, FocusDebuffsX, db.oUF.auras.focus.debuffsY)
													end,
											order = 7,
										},
										FocusDebuffsY = {
											name = "Y Value",
											desc = "Y Value for your Focus Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 60",
											type = "input",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											get = function() return db.oUF.auras.focus.debuffsY end,
											set = function(self,FocusDebuffsY)
														if FocusDebuffsY == nil or FocusDebuffsY == "" then
															FocusDebuffsY = "0"
														end
														db.oUF.auras.focus.debuffsY = FocusDebuffsY
														oUF_LUI_focus.Debuffs:SetPoint(db.oUF.auras.focus.debuffs_initialAnchor, oUF_LUI_focus, db.oUF.auras.focus.debuffs_initialAnchor, db.oUF.auras.focus.debuffsX, FocusDebuffsY)
													end,
											order = 8,
										},
										FocusDebuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Focus Debuffs.\nDefault: DOWN",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.focus.debuffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, FocusDebuffsGrowthY)
													db.oUF.auras.focus.debuffs_growthY = growthY[FocusDebuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										FocusDebuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Focus Debuffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.focus.debuffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, FocusDebuffsGrowthX)
													db.oUF.auras.focus.debuffs_growthX = growthX[FocusDebuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 10,
										},
										FocusDebuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Focus Debuffs.\nDefault: BOTTOMLET",
											type = "select",
											disabled = function() return not db.oUF.auras.focus.debuffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.focus.debuffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, FocusDebuffsAnchor)
													db.oUF.auras.focus.debuffs_initialAnchor = positions[FocusDebuffsAnchor]
													oUF_LUI_focus.Debuffs:SetPoint(positions[FocusDebuffsAnchor], oUF_LUI_focus, positions[FocusDebuffsAnchor], db.oUF.auras.focus.debuffsX, db.oUF.auras.focus.debuffsY)
												end,
											order = 11,
										},
									},
								},
							},
						},
						Party = {
							name = "Party",
							type = "group",
							order = 10,
							childGroups = "tab",
							disabled = function() return not db.oUF.Party.Enable end,
							args = {
								header1 = {
									name = "Party Auras",
									type = "header",
									order = 1,
								},
								PartyBuffs = {
									name = "Buffs",
									type = "group",
									order = 2,
									args = {
										PartyBuffsEnable = {
											name = "Enable Party Buffs",
											desc = "Wether you want to show Party Buffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.party.buffs_enable end,
											set = function(self,PartyBuffsEnable)
														db.oUF.auras.party.buffs_enable = not db.oUF.auras.party.buffs_enable 
													end,
											order = 0,
										},
										PartyBuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffs_auratimer end,
											set = function(self,PartyBuffsAuratimer)
														db.oUF.auras.party.buffs_auratimer = not db.oUF.auras.party.buffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PartyBuffsPlayerBuffsOnly = {
											name = "Player Buffs Only",
											desc = "Wether you want to show only your Buffs on Partymembers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffs_playeronly end,
											set = function(self,PartyBuffsPlayerBuffsOnly)
														db.oUF.auras.party.buffs_playeronly = not db.oUF.auras.party.buffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										PartyBuffsNum = {
											name = "Amount",
											desc = "Amount of your Party Buffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffs_num end,
											set = function(self,PartyBuffsNum)
														if PartyBuffsNum == nil or PartyBuffsNum == "" then
															PartyBuffsNum = "0"
														end
														db.oUF.auras.party.buffs_num = PartyBuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										PartyBuffsSize = {
											name = "Size",
											desc = "Size for your Party Buffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffs_size end,
											set = function(self,PartyBuffsSize)
														if PartyBuffsSize == nil or PartyBuffsSize == "" then
															PartyBuffsSize = "0"
														end
														db.oUF.auras.party.buffs_size = PartyBuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										PartyBuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Party Buffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffs_spacing end,
											set = function(self,PartyBuffsSpacing)
														if PartyBuffsSpacing == nil or PartyBuffsSpacing == "" then
															PartyBuffsSpacing = "0"
														end
														db.oUF.auras.party.buffs_spacing = PartyBuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										PartyBuffsX = {
											name = "X Value",
											desc = "X Value for your Party Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: 30",
											type = "input",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffsX end,
											set = function(self,PartyBuffsX)
														if PartyBuffsX == nil or PartyBuffsX == "" then
															PartyBuffsX = "0"
														end
														db.oUF.auras.party.buffsX = PartyBuffsX
														oUF_LUI_partyUnitButton1_buffs:SetPoint(db.oUF.auras.party.buffs_initialAnchor, oUF_LUI_partyUnitButton1.Health, db.oUF.auras.party.buffs_initialAnchor, PartyBuffsX, db.oUF.auras.party.buffsY)
													end,
											order = 6,
										},
										PartyBuffsY = {
											name = "Y Value",
											desc = "Y Value for your Party Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 30",
											type = "input",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											get = function() return db.oUF.auras.party.buffsY end,
											set = function(self,PartyBuffsY)
														if PartyBuffsY == nil or PartyBuffsY == "" then
															PartyBuffsY = "0"
														end
														db.oUF.auras.party.buffsY = PartyBuffsY
														oUF_LUI_partyUnitButton1_buffs:SetPoint(db.oUF.auras.party.buffs_initialAnchor, oUF_LUI_partyUnitButton1.Health, db.oUF.auras.party.buffs_initialAnchor, db.oUF.auras.party.buffsX, PartyBuffsY)
													end,
											order = 7,
										},
										PartyBuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Party Buffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.party.buffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, PartyBuffsGrowthY)
													db.oUF.auras.party.buffs_growthY = growthY[PartyBuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										PartyBuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Party Buffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.party.buffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, PartyBuffsGrowthX)
													db.oUF.auras.party.buffs_growthX = growthX[PartyBuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										PartyBuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Party Buffs.\nDefault: LEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.party.buffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.party.buffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, PartyBuffsAnchor)
													db.oUF.auras.party.buffs_initialAnchor = positions[PartyBuffsAnchor]
													oUF_LUI_partyUnitButton1_buffs:SetPoint(positions[PartyBuffsAnchor], oUF_LUI_partyUnitButton1.Health, positions[PartyBuffsAnchor], db.oUF.auras.party.buffsX, db.oUF.auras.party.buffsY)
												end,
											order = 10,
										},
									},
								},
								PartyDebuffs = {
									name = "Debuffs",
									type = "group",
									order = 3,
									args = {
										PartyDebuffsEnable = {
											name = "Enable Party Debuffs",
											desc = "Wether you want to show Party Debuffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.party.debuffs_enable end,
											set = function(self,PartyDebuffsEnable)
														db.oUF.auras.party.debuffs_enable = not db.oUF.auras.party.debuffs_enable 
													end,
											order = 0,
										},
										PartyDebuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.\nDefault: Off",
											type = "toggle",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffs_auratimer end,
											set = function(self,PartyDebuffsAuratimer)
														db.oUF.auras.party.debuffs_auratimer = not db.oUF.auras.party.debuffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PartyDebuffsColorByType = {
											name = "Color by Type",
											desc = "Wether you want to color Party Debuffs by Type or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffs_colorbytype end,
											set = function(self,PartyDebuffsColorByType)
														db.oUF.auras.party.debuffs_colorbytype = not db.oUF.auras.party.debuffs_colorbytype
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										PartyDebuffsNum = {
											name = "Amount",
											desc = "Amount of your Party Debuffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffs_num end,
											set = function(self,PartyDebuffsNum)
														if PartyDebuffsNum == nil or PartyDebuffsNum == "" then
															PartyDebuffsNum = "0"
														end
														db.oUF.auras.party.debuffs_num = PartyDebuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										PartyDebuffsSize = {
											name = "Size",
											desc = "Size for your Party Debuffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffs_size end,
											set = function(self,PartyDebuffsSize)
														if PartyDebuffsSize == nil or PartyDebuffsSize == "" then
															PartyDebuffsSize = "0"
														end
														db.oUF.auras.party.debuffs_size = PartyDebuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										PartyDebuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Party Debuffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffs_spacing end,
											set = function(self,PartyDebuffsSpacing)
														if PartyDebuffsSpacing == nil or PartyDebuffsSpacing == "" then
															PartyDebuffsSpacing = "0"
														end
														db.oUF.auras.party.debuffs_spacing = PartyDebuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										PartyDebuffsX = {
											name = "X Value",
											desc = "X Value for your Party Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: 30",
											type = "input",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffsX end,
											set = function(self,PartyDebuffsX)
														if PartyDebuffsX == nil or PartyDebuffsX == "" then
															PartyDebuffsX = "0"
														end
														db.oUF.auras.party.debuffsX = PartyDebuffsX
														oUF_LUI_partyUnitButton1_debuffs:SetPoint(db.oUF.auras.party.debuffs_initialAnchor, oUF_LUI_partyUnitButton1.Health, db.oUF.auras.party.debuffs_initialAnchor, PartyDebuffsX, db.oUF.auras.party.debuffsY)
													end,
											order = 6,
										},
										PartyDebuffsY = {
											name = "Y Value",
											desc = "Y Value for your Party Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 30",
											type = "input",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											get = function() return db.oUF.auras.party.debuffsY end,
											set = function(self,PartyDebuffsY)
														if PartyDebuffsY == nil or PartyDebuffsY == "" then
															PartyDebuffsY = "0"
														end
														db.oUF.auras.party.debuffsY = PartyDebuffsY
														oUF_LUI_partyUnitButton1_debuffs:SetPoint(db.oUF.auras.party.debuffs_initialAnchor, oUF_LUI_partyUnitButton1.Health, db.oUF.auras.party.debuffs_initialAnchor, db.oUF.auras.party.debuffsX, PartyDebuffsY)
													end,
											order = 7,
										},
										PartyDebuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Party Debuffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.party.debuffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, PartyDebuffsGrowthY)
													db.oUF.auras.party.debuffs_growthY = growthY[PartyDebuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										PartyDebuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Party Debuffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.party.debuffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, PartyDebuffsGrowthX)
													db.oUF.auras.party.debuffs_growthX = growthX[PartyDebuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										PartyDebuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Party Debuffs.\nDefault: LEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.party.debuffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.party.debuffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, PartyDebuffsAnchor)
													db.oUF.auras.party.debuffs_initialAnchor = positions[PartyDebuffsAnchor]
													oUF_LUI_partyUnitButton1_debuffs:SetPoint(positions[PartyDebuffsAnchor], oUF_LUI_partyUnitButton1.Health, positions[PartyDebuffsAnchor], db.oUF.auras.party.debuffsX, db.oUF.auras.party.debuffsY)
												end,
											order = 10,
										},
									},
								},
							},
						},
						Pet = {
							name = "Pet",
							type = "group",
							order = 11,
							disabled = function() return not db.oUF.Pet.Enable end,
							childGroups = "tab",
							args = {
								header1 = {
									name = "Pet Auras",
									type = "header",
									order = 1,
								},
								PetBuffs = {
									name = "Buffs",
									type = "group",
									order = 2,
									args = {
										PetBuffsEnable = {
											name = "Enable Pet Buffs",
											desc = "Wether you want to show Pet Buffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.pet.buffs_enable end,
											set = function(self,PetBuffsEnable)
														db.oUF.auras.pet.buffs_enable = not db.oUF.auras.pet.buffs_enable 
													end,
											order = 0,
										},
										PetBuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffs_auratimer end,
											set = function(self,PetBuffsAuratimer)
														db.oUF.auras.pet.buffs_auratimer = not db.oUF.auras.pet.buffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PetBuffsPlayerBuffsOnly = {
											name = "Player Buffs Only",
											desc = "Wether you want to show only your Buffs on Pet or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffs_playeronly end,
											set = function(self,PetBuffsPlayerBuffsOnly)
														db.oUF.auras.pet.buffs_playeronly = not db.oUF.auras.pet.buffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										PetBuffsNum = {
											name = "Amount",
											desc = "Amount of your Pet Buffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffs_num end,
											set = function(self,PetBuffsNum)
														if PetBuffsNum == nil or PetBuffsNum == "" then
															PetBuffsNum = "0"
														end
														db.oUF.auras.pet.buffs_num = PetBuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										PetBuffsSize = {
											name = "Size",
											desc = "Size for your Pet Buffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffs_size end,
											set = function(self,PetBuffsSize)
														if PetBuffsSize == nil or PetBuffsSize == "" then
															PetBuffsSize = "0"
														end
														db.oUF.auras.pet.buffs_size = PetBuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										PetBuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Pet Buffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffs_spacing end,
											set = function(self,PetBuffsSpacing)
														if PetBuffsSpacing == nil or PetBuffsSpacing == "" then
															PetBuffsSpacing = "0"
														end
														db.oUF.auras.pet.buffs_spacing = PetBuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										PetBuffsX = {
											name = "X Value",
											desc = "X Value for your Pet Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffsX end,
											set = function(self,PetBuffsX)
														if PetBuffsX == nil or PetBuffsX == "" then
															PetBuffsX = "0"
														end
														db.oUF.auras.pet.buffsX = PetBuffsX
														oUF_LUI_pet.Buffs:SetPoint(db.oUF.auras.pet.buffs_initialAnchor, oUF_LUI_pet, db.oUF.auras.pet.buffs_initialAnchor, PetBuffsX, db.oUF.auras.pet.buffsY)
													end,
											order = 6,
										},
										PetBuffsY = {
											name = "Y Value",
											desc = "Y Value for your Pet Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 32",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											get = function() return db.oUF.auras.pet.buffsY end,
											set = function(self,PetBuffsY)
														if PetBuffsY == nil or PetBuffsY == "" then
															PetBuffsY = "0"
														end
														db.oUF.auras.pet.buffsY = PetBuffsY
														oUF_LUI_pet.Buffs:SetPoint(db.oUF.auras.pet.buffs_initialAnchor, oUF_LUI_pet, db.oUF.auras.pet.buffs_initialAnchor, db.oUF.auras.pet.buffsX, PetBuffsY)
													end,
											order = 7,
										},
										PetBuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Pet Buffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.pet.buffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, PetBuffsGrowthY)
													db.oUF.auras.pet.buffs_growthY = growthY[PetBuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										PetBuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Pet Buffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.pet.buffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, PetBuffsGrowthX)
													db.oUF.auras.pet.buffs_growthX = growthX[PetBuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										PetBuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Pet Buffs.\nDefault: TOPLEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.buffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.pet.buffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, PetBuffsAnchor)
													db.oUF.auras.pet.buffs_initialAnchor = positions[PetBuffsAnchor]
													oUF_LUI_pet.Buffs:SetPoint(positions[PetBuffsAnchor], oUF_LUI_pet, positions[PetBuffsAnchor], db.oUF.auras.pet.buffsX, db.oUF.auras.pet.buffsY)
												end,
											order = 10,
										},
									},
								},
								PetDebuffs = {
									name = "Debuffs",
									type = "group",
									order = 3,
									args = {
										PetDebuffsEnable = {
											name = "Enable Pet Debuffs",
											desc = "Wether you want to show Pet Debuffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.pet.debuffs_enable end,
											set = function(self,PetDebuffsEnable)
														db.oUF.auras.pet.debuffs_enable = not db.oUF.auras.pet.debuffs_enable 
													end,
											order = 0,
										},
										PetDebuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.\nDefault: Off",
											type = "toggle",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffs_auratimer end,
											set = function(self,PetDebuffsAuratimer)
														db.oUF.auras.pet.debuffs_auratimer = not db.oUF.auras.pet.debuffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										PetDebuffsColorByType = {
											name = "Color by Type",
											desc = "Wether you want to color Pet Debuffs by Type or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffs_colorbytype end,
											set = function(self,PetDebuffsColorByType)
														db.oUF.auras.pet.debuffs_colorbytype = not db.oUF.auras.pet.debuffs_colorbytype
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										PetDebuffsNum = {
											name = "Amount",
											desc = "Amount of your Pet Debuffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffs_num end,
											set = function(self,PetDebuffsNum)
														if PetDebuffsNum == nil or PetDebuffsNum == "" then
															PetDebuffsNum = "0"
														end
														db.oUF.auras.pet.debuffs_num = PetDebuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										PetDebuffsSize = {
											name = "Size",
											desc = "Size for your Pet Debuffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffs_size end,
											set = function(self,PetDebuffsSize)
														if PetDebuffsSize == nil or PetDebuffsSize == "" then
															PetDebuffsSize = "0"
														end
														db.oUF.auras.pet.debuffs_size = PetDebuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										PetDebuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your Pet Debuffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffs_spacing end,
											set = function(self,PetDebuffsSpacing)
														if PetDebuffsSpacing == nil or PetDebuffsSpacing == "" then
															PetDebuffsSpacing = "0"
														end
														db.oUF.auras.pet.debuffs_spacing = PetDebuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										PetDebuffsX = {
											name = "X Value",
											desc = "X Value for your Pet Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffsX end,
											set = function(self,PetDebuffsX)
														if PetDebuffsX == nil or PetDebuffsX == "" then
															PetDebuffsX = "0"
														end
														db.oUF.auras.pet.debuffsX = PetDebuffsX
														oUF_LUI_pet.Debuffs:SetPoint(db.oUF.auras.pet.debuffs_initialAnchor, oUF_LUI_pet, db.oUF.auras.pet.debuffs_initialAnchor, PetDebuffsX, db.oUF.auras.pet.debuffsY)
													end,
											order = 6,
										},
										PetDebuffsY = {
											name = "Y Value",
											desc = "Y Value for your Pet Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 60",
											type = "input",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											get = function() return db.oUF.auras.pet.debuffsY end,
											set = function(self,PetDebuffsY)
														if PetDebuffsY == nil or PetDebuffsY == "" then
															PetDebuffsY = "0"
														end
														db.oUF.auras.pet.debuffsY = PetDebuffsY
														oUF_LUI_pet.Debuffs:SetPoint(db.oUF.auras.pet.debuffs_initialAnchor, oUF_LUI_pet, db.oUF.auras.pet.debuffs_initialAnchor, db.oUF.auras.pet.debuffsX, PetDebuffsY)
													end,
											order = 7,
										},
										PetDebuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your Pet Debuffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.pet.debuffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, PetDebuffsGrowthY)
													db.oUF.auras.pet.debuffs_growthY = growthY[PetDebuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										PetDebuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your Pet Debuffs.\nDefault: LEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.pet.debuffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, PetDebuffsGrowthX)
													db.oUF.auras.pet.debuffs_growthX = growthX[PetDebuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										PetDebuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your Pet Debuffs.\nDefault: TOPRIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.pet.debuffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.pet.debuffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, PetDebuffsAnchor)
													db.oUF.auras.pet.debuffs_initialAnchor = positions[PetDebuffsAnchor]
													oUF_LUI_pet.Debuffs:SetPoint(positions[PetDebuffsAnchor], oUF_LUI_pet, positions[PetDebuffsAnchor], db.oUF.auras.pet.debuffsX, db.oUF.auras.pet.debuffsY)
												end,
											order = 10,
										},
									},
								},
							},
						},
						ToT = {
							name = "ToT",
							type = "group",
							order = 12,
							disabled = function() return not db.oUF.ToT.Enable end,
							childGroups = "tab",
							args = {
								header1 = {
									name = "ToT Auras",
									type = "header",
									order = 1,
								},
								ToTBuffs = {
									name = "Buffs",
									type = "group",
									order = 2,
									args = {
										ToTBuffsEnable = {
											name = "Enable ToT Buffs",
											desc = "Wether you want to show Target's Target Buffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.tot.buffs_enable end,
											set = function(self,ToTBuffsEnable)
														db.oUF.auras.tot.buffs_enable = not db.oUF.auras.tot.buffs_enable
													end,
											order = 0,
										},
										ToTBuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffs_auratimer end,
											set = function(self,ToTBuffsAuratimer)
														db.oUF.auras.tot.buffs_auratimer = not db.oUF.auras.tot.buffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										ToTBuffsPlayerBuffsOnly = {
											name = "Player Buffs Only",
											desc = "Wether you want to show only your Buffs on ToT or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffs_playeronly end,
											set = function(self,ToTBuffsPlayerBuffsOnly)
														db.oUF.auras.tot.buffs_playeronly = not db.oUF.auras.tot.buffs_playeronly
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										ToTBuffsNum = {
											name = "Amount",
											desc = "Amount of your ToT Buffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffs_num end,
											set = function(self,ToTBuffsNum)
														if ToTBuffsNum == nil or ToTBuffsNum == "" then
															ToTBuffsNum = "0"
														end
														db.oUF.auras.tot.buffs_num = ToTBuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										ToTBuffsSize = {
											name = "Size",
											desc = "Size for your ToT Buffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffs_size end,
											set = function(self,ToTBuffsSize)
														if ToTBuffsSize == nil or ToTBuffsSize == "" then
															ToTBuffsSize = "0"
														end
														db.oUF.auras.tot.buffs_size = ToTBuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										ToTBuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your ToT Buffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffs_spacing end,
											set = function(self,ToTBuffsSpacing)
														if ToTBuffsSpacing == nil or ToTBuffsSpacing == "" then
															ToTBuffsSpacing = "0"
														end
														db.oUF.auras.tot.buffs_spacing = ToTBuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										ToTBuffsX = {
											name = "X Value",
											desc = "X Value for your ToT Buffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffsX end,
											set = function(self,ToTBuffsX)
														if ToTBuffsX == nil or ToTBuffsX == "" then
															ToTBuffsX = "0"
														end
														db.oUF.auras.tot.buffsX = ToTBuffsX
														oUF_LUI_targettarget.Buffs:SetPoint(db.oUF.auras.tot.buffs_initialAnchor, oUF_LUI_targettarget, db.oUF.auras.tot.buffs_initialAnchor, ToTBuffsX, db.oUF.auras.tot.buffsY)
													end,
											order = 6,
										},
										ToTBuffsY = {
											name = "Y Value",
											desc = "Y Value for your ToT Buffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 32",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											get = function() return db.oUF.auras.tot.buffsY end,
											set = function(self,ToTBuffsY)
														if ToTBuffsY == nil or ToTBuffsY == "" then
															ToTBuffsY = "0"
														end
														db.oUF.auras.tot.buffsY = ToTBuffsY
														oUF_LUI_targettarget.Buffs:SetPoint(db.oUF.auras.tot.buffs_initialAnchor, oUF_LUI_targettarget, db.oUF.auras.tot.buffs_initialAnchor, db.oUF.auras.tot.buffsX, ToTBuffsY)
													end,
											order = 7,
										},
										ToTBuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your ToT Buffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.tot.buffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, ToTBuffsGrowthY)
													db.oUF.auras.tot.buffs_growthY = growthY[ToTBuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										ToTBuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your ToT Buffs.\nDefault: RIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.tot.buffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, ToTBuffsGrowthX)
													db.oUF.auras.tot.buffs_growthX = growthX[ToTBuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										ToTBuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your ToT Buffs.\nDefault: TOPLEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.buffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.tot.buffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, ToTBuffsAnchor)
													db.oUF.auras.tot.buffs_initialAnchor = positions[ToTBuffsAnchor]
													oUF_LUI_targettarget.Buffs:SetPoint(positions[ToTBuffsAnchor], oUF_LUI_targettarget, positions[ToTBuffsAnchor], db.oUF.auras.tot.buffsX, db.oUF.auras.tot.buffsY)
												end,
											order = 10,
										},
									},
								},
								ToTDebuffs = {
									name = "Debuffs",
									type = "group",
									order = 3,
									args = {
										ToTDebuffsEnable = {
											name = "Enable ToT Debuffs",
											desc = "Wether you want to show Target's Target Debuffs or not.",
											type = "toggle",
											width = "full",
											get = function() return db.oUF.auras.tot.debuffs_enable end,
											set = function(self,ToTDebuffsEnable)
														db.oUF.auras.tot.debuffs_enable = not db.oUF.auras.tot.debuffs_enable
													end,
											order = 0,
										},
										ToTDebuffsAuratimer = {
											name = "Enable Auratimer",
											desc = "Wether you want to show Auratimers or not.\nDefault: Off",
											type = "toggle",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffs_auratimer end,
											set = function(self,ToTDebuffsAuratimer)
														db.oUF.auras.tot.debuffs_auratimer = not db.oUF.auras.tot.debuffs_auratimer
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										ToTDebuffsColorByType = {
											name = "Color by Type",
											desc = "Wether you want to color ToT Debuffs by Type or not.",
											type = "toggle",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffs_colorbytype end,
											set = function(self,ToTDebuffsColorByType)
														db.oUF.auras.tot.debuffs_colorbytype = not db.oUF.auras.tot.debuffs_colorbytype
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 2,
										},
										ToTDebuffsNum = {
											name = "Amount",
											desc = "Amount of your ToT Debuffs.\nDefault: 36",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffs_num end,
											set = function(self,ToTDebuffsNum)
														if ToTDebuffsNum == nil or ToTDebuffsNum == "" then
															ToTDebuffsNum = "0"
														end
														db.oUF.auras.tot.debuffs_num = ToTDebuffsNum
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 3,
										},
										ToTDebuffsSize = {
											name = "Size",
											desc = "Size for your ToT Debuffs.\nDefault: 26",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffs_size end,
											set = function(self,ToTDebuffsSize)
														if ToTDebuffsSize == nil or ToTDebuffsSize == "" then
															ToTDebuffsSize = "0"
														end
														db.oUF.auras.tot.debuffs_size = ToTDebuffsSize
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 4,
										},
										ToTDebuffsSpacing = {
											name = "Spacing",
											desc = "Spacing between your ToT Debuffs.\nDefault: 2",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffs_spacing end,
											set = function(self,ToTDebuffsSpacing)
														if ToTDebuffsSpacing == nil or ToTDebuffsSpacing == "" then
															ToTDebuffsSpacing = "0"
														end
														db.oUF.auras.tot.debuffs_spacing = ToTDebuffsSpacing
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 5,
										},
										ToTDebuffsX = {
											name = "X Value",
											desc = "X Value for your ToT Debuffs.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: -0.5",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffsX end,
											set = function(self,ToTDebuffsX)
														if ToTDebuffsX == nil or ToTDebuffsX == "" then
															ToTDebuffsX = "0"
														end
														db.oUF.auras.tot.debuffsX = ToTDebuffsX
														oUF_LUI_targettarget.Debuffs:SetPoint(db.oUF.auras.tot.debuffs_initialAnchor, oUF_LUI_targettarget, db.oUF.auras.tot.debuffs_initialAnchor, ToTDebuffsX, db.oUF.auras.tot.debuffsY)
													end,
											order = 6,
										},
										ToTDebuffsY = {
											name = "Y Value",
											desc = "Y Value for your ToT Debuffs.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: 60",
											type = "input",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											get = function() return db.oUF.auras.tot.debuffsY end,
											set = function(self,ToTDebuffsY)
														if ToTDebuffsY == nil or ToTDebuffsY == "" then
															ToTDebuffsY = "0"
														end
														db.oUF.auras.tot.debuffsY = ToTDebuffsY
														oUF_LUI_targettarget.Debuffs:SetPoint(db.oUF.auras.tot.debuffs_initialAnchor, oUF_LUI_targettarget, db.oUF.auras.tot.debuffs_initialAnchor, db.oUF.auras.tot.debuffsX, ToTDebuffsY)
													end,
											order = 7,
										},
										ToTDebuffsGrowthY = {
											name = "Growth Y",
											desc = "Choose the growth Y direction for your ToT Debuffs.\nDefault: UP",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											values = growthY,
											get = function()
													for k, v in pairs(growthY) do
														if db.oUF.auras.tot.debuffs_growthY == v then
															return k
														end
													end
												end,
											set = function(self, ToTDebuffsGrowthY)
													db.oUF.auras.tot.debuffs_growthY = growthY[ToTDebuffsGrowthY]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 8,
										},
										ToTDebuffsGrowthX = {
											name = "Growth X",
											desc = "Choose the growth X direction for your ToT Debuffs.\nDefault: LEFT",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											values = growthX,
											get = function()
													for k, v in pairs(growthX) do
														if db.oUF.auras.tot.debuffs_growthX == v then
															return k
														end
													end
												end,
											set = function(self, ToTDebuffsGrowthX)
													db.oUF.auras.tot.debuffs_growthX = growthX[ToTDebuffsGrowthX]
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 9,
										},
										ToTDebuffsAnchor = {
											name = "Initial Anchor",
											desc = "Choose the initinal Anchor for your ToT Debuffs.\nDefault: TOPRIGHT",
											type = "select",
											disabled = function() return not db.oUF.auras.tot.debuffs_enable end,
											values = positions,
											get = function()
													for k, v in pairs(positions) do
														if db.oUF.auras.tot.debuffs_initialAnchor == v then
															return k
														end
													end
												end,
											set = function(self, ToTDebuffsAnchor)
													db.oUF.auras.tot.debuffs_initialAnchor = positions[ToTDebuffsAnchor]
													oUF_LUI_targettarget.Debuffs:SetPoint(positions[ToTDebuffsAnchor], oUF_LUI_targettarget, positions[ToTDebuffsAnchor], db.oUF.auras.tot.debuffsX, db.oUF.auras.tot.debuffsY)
												end,
											order = 10,
										},
									},
								},
							},
						},
					},
				},
				Chat = {
					name = "Chat",
					type = "group",
					order = 7,
					childGroups = "tab",
					args = {
						header8 = {
							name = "Chat",
							type = "header",
							order = 1,
						},
						ChatSettings = {
							name = "General",
							type = "group",
							childGroups = "tab",
							order = 2,
							args = {
								Settings = {
									name = "Settings",
									type = "group",
									order = 1,
									args = {
										Enable = {
											name = "Enable",
											desc = "Enable LUI Chat Improvements.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Enable end,
											set = function()
													db.Chat.Enable = not db.Chat.Enable
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 1,
										},
										ShortChannelNames = {
											name = "Short Channel Names",
											desc = "Whether you want to show short Channelnames or not.\n",
											type = "toggle",
											disabled = function() return not db.Chat.Enable end,
											width = "full",
											get = function() return db.Chat.ShortChannelNames end,
											set = function()
													db.Chat.ShortChannelNames = not db.Chat.ShortChannelNames
												end,
											order = 2,
										},
										ShowItemTooltips = {
											name = "Show Item Tooltips",
											desc = "Whether you want to show Item Tooltips or not.\n",
											type = "toggle",
											disabled = function() return not db.Chat.Enable end,
											width = "full",
											get = function() return db.Chat.ShowItemTooltips end,
											set = function()
													db.Chat.ShowItemTooltips = not db.Chat.ShowItemTooltips
													StaticPopup_Show("RELOAD_UI")
												end,
											order = 3,
										},
										Fading = {
											name = "Enable Chat Fading",
											desc = "Whether you want to enable Fading or not.\n",
											type = "toggle",
											disabled = function() return not db.Chat.Enable end,
											width = "full",
											get = function() return db.Chat.Fading end,
											set = function()
													db.Chat.Fading = not db.Chat.Fading
													SetChatFading()
												end,
											order = 4,
										},
										SecondChatFrameSettings = {
											name = "Second ChatFrame Texture",
											type = "group",
											order = 5,
											inline = true,
											args = {
												SecondChatFrame = {
													name = "Enable",
													desc = "Whether you want to show your second ChatFrame or not.\n",
													type = "toggle",
													disabled = function() return not db.Chat.Enable end,
													width = "full",
													get = function() return db.Chat.SecondChatFrame end,
													set = function(self, SecondChatFrame)
															db.Chat.SecondChatFrame = not db.Chat.SecondChatFrame
															CheckSecondChatFrame()
														end,
													order = 1,
												},
												TextureAnchor = {
													name = "Choose ChatFrame",
													desc = "Choose the Anchor for your Second ChatFrame Texture.\nDefault: "..defaults.profile.Chat.SecondChatAnchor,
													type = "select",
													values = chatTextureAnchors,
													get = function()
															for k, v in pairs(chatTextureAnchors) do
																if db.Chat.SecondChatAnchor == v then
																	return k
																end
															end
														end,
													set = function(self, TextureAnchor)
															db.Chat.SecondChatAnchor = chatTextureAnchors[TextureAnchor]
															SetSecondChatAnchor()
														end,
													order = 2,
												},
												ChatJustify = {
													name = "Choose Alignment",
													desc = "Choose the Alignment for your Second ChatFrame Texture.\nDefault: "..defaults.profile.Chat.Justify,
													type = "select",
													values = chatAlignments,
													get = function()
															for k, v in pairs(chatAlignments) do
																if db.Chat.Justify == v then
																	return k
																end
															end
														end,
													set = function(self, ChatJustify)
															db.Chat.Justify = chatAlignments[ChatJustify]
															SetChatJustify()
														end,
													order = 3,
												},
											},
										},
									},
								},
								Font = {
									name = "Font",
									type = "group",
									order = 2,
									disabled = function() return not db.Chat.Enable end,
									args = {
										Font = {
											name = "Font",
											desc = "Choose your Font!\nDefault: "..defaults.profile.Chat.Font,
											type = "select",
											dialogControl = "LSM30_Font",
											values = widgetLists.font,
											get = function()
													return db.Chat.Font
												end,
											set = function(self, font)
													db.Chat.Font = font
													SetChatFont()
												end,
											order = 1,
										},
										Fontsize = {
											name = "Fontsize",
											desc = "Choose your Fontsize!\nDefault: "..defaults.profile.Chat.Size,
											type = "range",
											min = 6,
											max = 20,
											step = 1,
											get = function() return db.Chat.Size end,
											set = function(_, Fontsize) 
														db.Chat.Size = Fontsize
														SetChatFont()
													end,
											order = 2,
										},
										FontFlag = {
											name = "Outline",
											desc = "Choose the Font Flag for your Chat.\nDefault: "..defaults.profile.Chat.Flag,
											type = "select",
											values = fontflags,
											get = function()
													for k, v in pairs(fontflags) do
														if db.Chat.Flag == v then
															return k
														end
													end
												end,
											set = function(self, FontFlag)
													db.Chat.Flag = fontflags[FontFlag]
													SetChatFont()
												end,
											order = 3,
										},
									},
								},
								MouseWheel = {
									name = "Mouse Wheel",
									type = "group",
									disabled = function() return not db.Chat.Enable end,
									order = 3,
									args = {
										desc = {
											name = "Check if MouseWheel is enabled within Blizzard Interface Options -> Social\n\n|cff3399ffExplanation:|r\nSHIFT+ScrollUp = Scroll to the top\nSHIFT+ScrollDown = Scroll to the bottom\nCTRL+Scroll = Use fast Scrollspeed",
											width = "full",
											type = "description",
											order = 1,
										},
										NormalScroll = {
											name = "Normal Scroll Speed",
											desc = "Value for the normal Scroll Speed\nDefault: "..defaults.profile.Chat.MouseWheel.NormalSpeed,
											type = "input",
											get = function() return db.Chat.MouseWheel.NormalSpeed end,
											set = function(self,NormalScroll)
													if NormalScroll == nil or NormalScroll == "" then
														NormalScroll = "0"
													end
													db.Chat.MouseWheel.NormalSpeed = NormalScroll
												end,
											order = 2,
										},
										empty = {
											name = " ",
											width = "full",
											type = "description",
											order = 3,
										},
										CTRLScroll = {
											name = "CTRL Scroll Speed",
											desc = "Value for the CTRL Scroll Speed\nDefault: "..defaults.profile.Chat.MouseWheel.CTRLSpeed,
											type = "input",
											get = function() return db.Chat.MouseWheel.CTRLSpeed end,
											set = function(self,CTRLScroll)
													if CTRLScroll == nil or CTRLScroll == "" then
														CTRLScroll = "0"
													end
													db.Chat.MouseWheel.CTRLSpeed = CTRLScroll
												end,
											order = 4,
										},
									},
								},
								ChatDefaults = {
									name = "Defaults",
									type = "group",
									disabled = function() return not db.Chat.Enable end,
									order = 4,
									args = {
										header1 = {
											name = "Size",
											type = "header",
											width = "full",
											order = 1,
										},
										Width = {
											name = "Width",
											desc = "Choose the Width of your ChatFrame1.\nDefault: "..defaults.profile.Chat.Width,
											type = "input",
											get = function() return db.Chat.Width end,
											set = function(self,Width)
													if Width == nil or Width == "" then
														Width = "0"
													end
													db.Chat.Width = Width
													SetChatPosition()
												end,
											order = 2,
										},
										Height = {
											name = "Height",
											desc = "Choose the Height of your ChatFrame1.\nDefault: "..defaults.profile.Chat.Height,
											type = "input",
											get = function() return db.Chat.Height end,
											set = function(self,Height)
													if Height == nil or Height == "" then
														Height = "0"
													end
													db.Chat.Height = Height
													SetChatPosition()
												end,
											order = 3,
										},
										header2 = {
											name = "Position",
											type = "header",
											width = "full",
											order = 4,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your ChatFrame1.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.X,
											type = "input",
											get = function() return db.Chat.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.X = PosX
													SetChatPosition()
												end,
											order = 5,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your ChatFrame1.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Y,
											type = "input",
											get = function() return db.Chat.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Y = PosY
													SetChatPosition()
												end,
											order = 6,
										},
									},
								},
							},
						},
						EditboxSettings = {
							name = "Editbox",
							type = "group",
							childGroups = "tab",
							disabled = function() return not db.Chat.Enable end,
							order = 3,
							args = {
								Settings = {
									name = "Settings",
									type = "group",
									order = 1,
									args = {
										ColorByChannel = {
											name = "Color by Channel",
											desc = "Whether you want to color your Editbox by Channel or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Editbox.ColorByChannel end,
											set = function()
														db.Chat.Editbox.ColorByChannel = not db.Chat.Editbox.ColorByChannel
													end,
											order = 1,
										},
										IndividualEditBoxColor = {
											name = "Individual Editbox Color",
											desc = "Whether you want to use an individual Editbox color or not.",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Editbox.Color.Enable end,
											set = function(self,IndividualEditBoxColor)
														db.Chat.Editbox.Color.Enable = not db.Chat.Editbox.Color.Enable
														Position:SetEditBoxColor()
													end,
											order = 2,
										},
										EditBoxColor = {
											name = "Editbox Color",
											desc = "Choose any Editbox Color.",
											type = "color",
											width = "full",
											hasAlpha = true,
											disabled = function() return not db.Chat.Editbox.Color.Enable end,
											get = function() return db.Chat.Editbox.Color.r, db.Chat.Editbox.Color.g, db.Chat.Editbox.Color.b, db.Chat.Editbox.Color.a end,
											set = function(_,r,g,b,a)
													db.Chat.Editbox.Color.r = r
													db.Chat.Editbox.Color.g = g
													db.Chat.Editbox.Color.b = b
													db.Chat.Editbox.Color.a = a
													
													Position:SetEditBoxColor()
												end,
											order = 3,
										},
									},
								},
								Font = {
									name = "Font",
									type = "group",
									order = 2,
									args = {
										Font = {
											name = "Font",
											desc = "Choose your Font!\nDefault: "..defaults.profile.Chat.Editbox.Font,
											type = "select",
											dialogControl = "LSM30_Font",
											values = widgetLists.font,
											get = function()
													return db.Chat.Editbox.Font
												end,
											set = function(self, font)
													db.Chat.Editbox.Font = font
													SetChatFont()
												end,
											order = 1,
										},
										Fontsize = {
											name = "Fontsize",
											desc = "Choose your Fontsize!\nDefault: "..defaults.profile.Chat.Editbox.Size,
											type = "range",
											min = 6,
											max = 20,
											step = 1,
											get = function() return db.Chat.Editbox.Size end,
											set = function(_, Fontsize) 
														db.Chat.Editbox.Size = Fontsize
														SetChatFont()
													end,
											order = 2,
										},
										FontFlag = {
											name = "Outline",
											desc = "Choose the Font Flag for your Chat.\nDefault: "..defaults.profile.Chat.Editbox.Flag,
											type = "select",
											values = fontflags,
											get = function()
													for k, v in pairs(fontflags) do
														if db.Chat.Editbox.Flag == v then
															return k
														end
													end
												end,
											set = function(self, FontFlag)
													db.Chat.Editbox.Flag = fontflags[FontFlag]
													SetChatFont()
												end,
											order = 3,
										},
									},
								},
								Border = {
									name = "Border",
									type = "group",
									order = 3,
									args = {
										BorderTexture = {
											name = "Texture",
											desc = "Choose your Editbox Border Texture!\nDefault: "..defaults.profile.Chat.Editbox.Border.Texture,
											type = "select",
											dialogControl = "LSM30_Border",
											values = widgetLists.border,
											get = function() return db.Chat.Editbox.Border.Texture end,
											set = function(self, BorderTexture)
													db.Chat.Editbox.Border.Texture = BorderTexture
													SetEditBoxBackdrop()
													Position:SetEditBoxColor()
												end,
											order = 1,
										},
										BorderThickness = {
											name = "Edge Size",
											desc = "Value for your Editbox Border Edge Size.\nDefault: "..defaults.profile.Chat.Editbox.Border.Thickness,
											type = "input",
											width = "half",
											get = function() return db.Chat.Editbox.Border.Thickness end,
											set = function(self,BorderThickness)
														if BorderThickness == nil or BorderThickness == "" then
															BorderThickness = "0"
														end
														db.Chat.Editbox.Border.Thickness = BorderThickness
														SetEditBoxBackdrop()
														Position:SetEditBoxColor()
													end,
											order = 2,
										},
										empty = {
											name = "   ",
											width = "full",
											type = "description",
											order = 3,
										},
										InsetLeft = {
											name = "Left",
											desc = "Value for the Left Border Inset\nDefault: "..defaults.profile.Chat.Editbox.Border.Inset.left,
											type = "input",
											width = "half",
											get = function() return db.Chat.Editbox.Border.Inset.left end,
											set = function(self,InsetLeft)
													if InsetLeft == nil or InsetLeft == "" then
														InsetLeft = "0"
													end
													db.Chat.Editbox.Border.Inset.left = InsetLeft
													SetEditBoxBackdrop()
													Position:SetEditBoxColor()
												end,
											order = 4,
										},
										InsetRight = {
											name = "Right",
											desc = "Value for the Right Border Inset\nDefault: "..defaults.profile.Chat.Editbox.Border.Inset.right,
											type = "input",
											width = "half",
											get = function() return db.Chat.Editbox.Border.Inset.right end,
											set = function(self,InsetRight)
													if InsetRight == nil or InsetRight == "" then
														InsetRight = "0"
													end
													db.Chat.Editbox.Border.Inset.right = InsetRight
													SetEditBoxBackdrop()
													Position:SetEditBoxColor()
												end,
											order = 5,
										},
										InsetTop = {
											name = "Top",
											desc = "Value for the Top Border Inset\nDefault: "..defaults.profile.Chat.Editbox.Border.Inset.top,
											type = "input",
											width = "half",
											get = function() return db.Chat.Editbox.Border.Inset.top end,
											set = function(self,InsetTop)
													if InsetTop == nil or InsetTop == "" then
														InsetTop = "0"
													end
													db.Chat.Editbox.Border.Inset.top = InsetTop
													SetEditBoxBackdrop()
													Position:SetEditBoxColor()
												end,
											order = 6,
										},
										InsetBottom = {
											name = "Bottom",
											desc = "Value for the Bottom Border Inset\nDefault: "..defaults.profile.Chat.Editbox.Border.Inset.bottom,
											type = "input",
											width = "half",
											get = function() return db.Chat.Editbox.Border.Inset.bottom end,
											set = function(self,InsetBottom)
													if InsetBottom == nil or InsetBottom == "" then
														InsetBottom = "0"
													end
													db.Chat.Editbox.Border.Inset.bottom = InsetBottom
													SetEditBoxBackdrop()
													Position:SetEditBoxColor()
												end,
											order = 7,
										},
									},
								},
								Position = {
									name = "Position",
									type = "group",
									order = 4,
									args = {
										Anchor = {
											name = "Position",
											desc = "Choose the Position for your Editbox .\nDefault: "..defaults.profile.Chat.Editbox.Position.Anchor,
											type = "select",
											values = editboxanchors,
											get = function()
													for k, v in pairs(editboxanchors) do
														if db.Chat.Editbox.Position.Anchor == v then
															return k
														end
													end
												end,
											set = function(self, Anchor)
													db.Chat.Editbox.Position.Anchor = editboxanchors[Anchor]
													SetEditBoxPosition()
												end,
											order = 1,
										},
										empty = {
											name = "   ",
											width = "full",
											type = "description",
											order = 2,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Editbox.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Editbox.Position.X,
											type = "input",
											disabled = function()
												if db.Chat.Editbox.Position.Anchor == "INDIVIDUAL" then
													return false
												else
													return true
												end
											end,
											width = "half",
											get = function() return db.Chat.Editbox.Position.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Editbox.Position.X = PosX
													SetEditBoxPosition()
												end,
											order = 3,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Editbox.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Editbox.Position.Y,
											type = "input",
											disabled = function()
												if db.Chat.Editbox.Position.Anchor == "INDIVIDUAL" then
													return false
												else
													return true
												end
											end,
											width = "half",
											get = function() return db.Chat.Editbox.Position.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Editbox.Position.Y = PosY
													SetEditBoxPosition()
												end,
											order = 4,
										},
									},
								},
							},
						},
						ButtonSettings = {
							name = "Buttons",
							type = "group",
							order = 4,
							disabled = function() return not db.Chat.Enable end,
							args = {
								Enable = {
									name = "Enable",
									desc = "Enable Blizzard Chat Buttons.\n",
									type = "toggle",
									width = "full",
									get = function() return db.Chat.Buttons.Enable end,
									set = function(self, Enable)
												db.Chat.Buttons.Enable = not db.Chat.Buttons.Enable
												CheckChatButtons()
												
												if Enable == true then
													db.Chat.Buttons.MenuButton.Enable = true
													db.Chat.Buttons.SocialButton.Enable = true
													CheckChatMenuButton()
													CheckSocialButton()
												else
													db.Chat.Buttons.MenuButton.Enable = false
													db.Chat.Buttons.SocialButton.Enable = false
													CheckChatMenuButton()
													CheckSocialButton()
												end
											end,
									order = 0,
								},
								Arrows = {
									name = "Arrows",
									type = "group",
									order = 1,
									disabled = function() return not db.Chat.Buttons.Enable end,
									args = {
										Enable = {
											name = "Enable",
											desc = "Enable Chat Arrows or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.Arrows.Enable end,
											set = function()
														db.Chat.Buttons.Arrows.Enable = not db.Chat.Buttons.Arrows.Enable
														CheckChatArrows()
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Chat Arrows.\nDefault: "..defaults.profile.Chat.Buttons.Arrows.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.Arrows.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.Arrows.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.Arrows.AlphaOut = AlphaOut
														CheckChatArrows()
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any MouseOver Alpha Value for your Chat Arrows.\nDefault: "..defaults.profile.Chat.Buttons.Arrows.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.Arrows.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.Arrows.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.Arrows.AlphaIn = AlphaIn
														CheckChatArrows()
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Chat Arrows.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.Arrows.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.Arrows.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.Arrows.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.Arrows.X = PosX
													CheckChatArrows()
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Chat Arrows.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.Arrows.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.Arrows.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.Arrows.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.Arrows.Y = PosY
													CheckChatArrows()
												end,
											order = 5,
										},
									},
								},
								BottomButton = {
									name = "Scroll Down Button",
									type = "group",
									order = 2,
									disabled = function() return not db.Chat.Buttons.Enable end,
									args = {
										Enable = {
											name = "Enable",
											desc = "Show Scroll Down Button or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.BottomButton.Enable end,
											set = function()
														db.Chat.Buttons.BottomButton.Enable = not db.Chat.Buttons.BottomButton.Enable
														CheckChatBottomButton()
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Scroll Down Button.\nDefault: "..defaults.profile.Chat.Buttons.BottomButton.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.BottomButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.BottomButton.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.BottomButton.AlphaOut = AlphaOut
														CheckChatBottomButton()
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any MouseOver Alpha Value for your Scroll Down Button.\nDefault: "..defaults.profile.Chat.Buttons.BottomButton.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.BottomButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.BottomButton.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.BottomButton.AlphaIn = AlphaIn
														CheckChatBottomButton()
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Scroll Down Button.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.BottomButton.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.BottomButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.BottomButton.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.BottomButton.X = PosX
													CheckChatBottomButton()
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Scroll Down Button.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.BottomButton.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.BottomButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.BottomButton.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.BottomButton.Y = PosY
													CheckChatBottomButton()
												end,
											order = 5,
										},
									},
								},
								MenuButton = {
									name = "Menu Button",
									type = "group",
									order = 3,
									disabled = function() return not db.Chat.Buttons.Enable end,
									args = {
										Enable = {
											name = "Enable",
											desc = "Show Menu Button or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.MenuButton.Enable end,
											set = function()
														db.Chat.Buttons.MenuButton.Enable = not db.Chat.Buttons.MenuButton.Enable
														CheckChatMenuButton()
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Menu Button.\nDefault: "..defaults.profile.Chat.Buttons.MenuButton.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.MenuButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.MenuButton.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.MenuButton.AlphaOut = AlphaOut
														CheckChatMenuButton()
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any MouseOver Alpha Value for your Menu Button.\nDefault: "..defaults.profile.Chat.Buttons.MenuButton.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.MenuButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.MenuButton.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.MenuButton.AlphaIn = AlphaIn
														CheckChatMenuButton()
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Menu Button.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.MenuButton.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.MenuButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.MenuButton.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.MenuButton.X = PosX
													CheckChatMenuButton()
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Menu Button.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.MenuButton.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.MenuButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.MenuButton.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.MenuButton.Y = PosY
													CheckChatMenuButton()
												end,
											order = 5,
										},
									},
								},
								MinimizeButton = {
									name = "Minimize Button",
									type = "group",
									order = 3,
									disabled = function() return not db.Chat.Buttons.Enable end,
									args = {
										Enable = {
											name = "Enable",
											desc = "Show Minimize Button or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.MinimizeButton.Enable end,
											set = function()
														db.Chat.Buttons.MinimizeButton.Enable = not db.Chat.Buttons.MinimizeButton.Enable
														CheckChatMinimizeButton()
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Minimize Button.\nDefault: "..defaults.profile.Chat.Buttons.MinimizeButton.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.MinimizeButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.MinimizeButton.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.MinimizeButton.AlphaOut = AlphaOut
														CheckChatMinimizeButton()
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any MouseOver Alpha Value for your Minimize Button.\nDefault: "..defaults.profile.Chat.Buttons.MinimizeButton.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.MinimizeButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.MinimizeButton.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.MinimizeButton.AlphaIn = AlphaIn
														CheckChatMinimizeButton()
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Minimize Button.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.MinimizeButton.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.MinimizeButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.MinimizeButton.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.MinimizeButton.X = PosX
													CheckChatMinimizeButton()
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Minimize Button.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.MinimizeButton.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.MinimizeButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.MinimizeButton.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.MinimizeButton.Y = PosY
													CheckChatMinimizeButton()
												end,
											order = 5,
										},
									},
								},
								Social = {
									name = "Social Button",
									type = "group",
									order = 4,
									disabled = function() return not db.Chat.Buttons.Enable end,
									args = {
										Enable = {
											name = "Enable",
											desc = "Enable Social Button or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.SocialButton.Enable end,
											set = function()
														db.Chat.Buttons.SocialButton.Enable = not db.Chat.Buttons.SocialButton.Enable
														CheckSocialButton()
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Social Button.\nDefault: "..defaults.profile.Chat.Buttons.SocialButton.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.SocialButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.SocialButton.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.SocialButton.AlphaOut = AlphaOut
														CheckSocialButton()
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any MouseOver Alpha Value for your Social Button.\nDefault: "..defaults.profile.Chat.Buttons.SocialButton.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.SocialButton.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.SocialButton.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.SocialButton.AlphaIn = AlphaIn
														CheckSocialButton()
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Social Button.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.SocialButton.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.SocialButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.SocialButton.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.SocialButton.X = PosX
													CheckSocialButton()
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Social Button.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.SocialButton.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.SocialButton.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.SocialButton.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.SocialButton.Y = PosY
													CheckSocialButton()
												end,
											order = 5,
										},
									},
								},
								Copy = {
									name = "Copy Text Button",
									type = "group",
									order = 5,
									args = {
										Enable = {
											name = "Enable",
											desc = "Enable Chat Copy Text Button or not.\n",
											type = "toggle",
											width = "full",
											get = function() return db.Chat.Buttons.Copy.Enable end,
											set = function()
														db.Chat.Buttons.Copy.Enable = not db.Chat.Buttons.Copy.Enable
														StaticPopup_Show("RELOAD_UI")
													end,
											order = 1,
										},
										AlphaOut = {
											name = "Alpha Value",
											desc = "Choose any Alpha Value for your Copy Text Button.\nDefault: "..defaults.profile.Chat.Buttons.Copy.AlphaOut,
											type = "range",
											disabled = function() return not db.Chat.Buttons.Copy.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.Copy.AlphaOut end,
											set = function(_, AlphaOut) 
														db.Chat.Buttons.Copy.AlphaOut = AlphaOut
													end,
											order = 2,
										},
										AlphaIn = {
											name = "Alpha Hover Value",
											desc = "Choose any Alpha Hover Value for your Copy Text Button.\nDefault: "..defaults.profile.Chat.Buttons.Copy.AlphaIn,
											type = "range",
											disabled = function() return not db.Chat.Buttons.Copy.Enable end,
											min = 0,
											max = 1,
											step = 0.05,
											get = function() return db.Chat.Buttons.Copy.AlphaIn end,
											set = function(_, AlphaIn) 
														db.Chat.Buttons.Copy.AlphaIn = AlphaIn
													end,
											order = 3,
										},
										PosX = {
											name = "X Value",
											desc = "X Value for your Copy Text Button.\n\nNote:\nPositive values = right\nNegativ values = left\nDefault: "..defaults.profile.Chat.Buttons.Copy.X,
											type = "input",
											disabled = function() return not db.Chat.Buttons.Copy.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.Copy.X end,
											set = function(self,PosX)
													if PosX == nil or PosX == "" then
														PosX = "0"
													end
													db.Chat.Buttons.Copy.X = PosX
												end,
											order = 4,
										},
										PosY = {
											name = "Y Value",
											desc = "Y Value for your Copy Text Button.\n\nNote:\nPositive values = up\nNegativ values = down\nDefault: "..defaults.profile.Chat.Buttons.Copy.Y,
											type = "input",
											disabled = function() return not db.Chat.Buttons.Copy.Enable end,
											width = "half",
											get = function() return db.Chat.Buttons.Copy.Y end,
											set = function(self,PosY)
													if PosY == nil or PosY == "" then
														PosY = "0"
													end
													db.Chat.Buttons.Copy.Y = PosY
												end,
											order = 5,
										},
										desc = {
											order = 6,
											width = "full",
											type = "description",
											name = "|cff3399ffImportant:|r\nSettings will change after Mouse-Over.",
										},
									},
								},
							},
						},
						TabSettings = {
							name = "Tabs",
							type = "group",
							order = 5,
							disabled = function() return not db.Chat.Enable end,
							args = {
								LockDockedTabs = {
									name = "Lock Docked Tabs",
									desc = "Do you want to lock Docked Tabs or not.\n",
									type = "toggle",
									width = "full",
									get = function() return db.Chat.Tabs.LockDockedTabs end,
									set = function()
												db.Chat.Tabs.LockDockedTabs = not db.Chat.Tabs.LockDockedTabs
												StaticPopup_Show("RELOAD_UI")
											end,
									order = 1,
								},
								ActiveAlpha = {
									name = "Active Alpha Value",
									desc = "Choose any active Alpha Value for your Tabs.\nDefault: "..defaults.profile.Chat.Tabs.ActiveAlpha,
									type = "range",
									min = 0,
									max = 1,
									step = 0.05,
									get = function() return db.Chat.Tabs.ActiveAlpha end,
									set = function(_, ActiveAlpha) 
												db.Chat.Tabs.ActiveAlpha = ActiveAlpha
											end,
									order = 2,
								},
								NotActiveAlpha = {
									name = "Non Active Alpha Value",
									desc = "Choose any non active Alpha Value for your Tabs.\nDefault: "..defaults.profile.Chat.Tabs.NotActiveAlpha,
									type = "range",
									min = 0,
									max = 1,
									step = 0.05,
									get = function() return db.Chat.Tabs.NotActiveAlpha end,
									set = function(_, NotActiveAlpha) 
												db.Chat.Tabs.NotActiveAlpha = NotActiveAlpha
											end,
									order = 3,
								},
							},
						},
					},
				},
				FAQ = {
					name = "FAQ",
					type = "group",
					order = 8,
					args = {
						header10 = {
							name = "FAQ",
							type = "header",
							order = 1,
						},
						question1 = {
							order = 2,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r Can i update all Addons like i always do?",
						},
						answer1 = {
							order = 3,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r Yes but please DO NOT update Recount.\nFor more information please visit |cff8080ffhttp://www.wow-lui.com|r",
						},
						emptyq1 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 4,
						},
						question2 = {
							order = 5,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r The Spelltimer above my PlayerFrame and the CooldownLine above my Mainbars... what Addon is that?",
						},
						answer2 = {
							order = 6,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r This Addon is called FortExorcist. Type /fx to open the OptionPanel.",
						},
						emptyq2 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 7,
						},
						question3 = {
							order = 8,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r There are too may Spells on my Spelltimer and CooldownLine... any suggestion?",
						},
						answer3 = {
							order = 9,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r Type /fx and choose the spelltimer/cooldowntimer tab at the bottom. Now go to Coloring/Filtering and type in the Spellname. Set it on Ignore or do other stuff.",
						},
						emptyq3 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 10,
						},
						question4 = {
							order = 11,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r You are using Bartender. Which Bars are allowed to edit?",
						},
						answer4 = {
							order = 12,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r Bar 1,2,3 are the Mainbars.\nBar 9 is the Left Sidebar\nBar 10 is the Right Sidebar.\nYou can edit all other Bars like you want.",
						},
						emptyq4 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 13,
						},
						question5 = {
							order = 14,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r I installed several other Addons and now there are some Icons and Texts at the middle of the Screen. Whats that?",
						},
						answer5 = {
							order = 15,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r This is the Broker Display Addon called StatBlockCore. Type /sbc to open the Optionpanel.",
						},
						emptyq5 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 16,
						},
						question6 = {
							order = 17,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r Several Blizzard Frames and Fonts are too smale and everything looks too tiny. What should i do?",
						},
						answer6 = {
							order = 18,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r Press ESC, go to Video Options and choose a different UIScale. Type /rl after you choose on.",
						},
						emptyq6 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 19,
						},
						question7 = {
							order = 20,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r Where are the Stances? I don't see/find them!",
						},
						answer7 = {
							order = 21,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r Use Keybindings! You can alos put your Stances from the Spellbook into on of your Bartender Bars.\ Or type /bt and enable/position the original BT StanceBar.",
						},
						emptyq7 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 22,
						},
						question8 = {
							order = 23,
							width = "full",
							type = "description",
							name = "|cffFF0000Q:|r Do i have to use all your Addons? I don't like some of them!",
						},
						answer8 = {
							order = 24,
							width = "full",
							type = "description",
							name = "|cff3399ffA:|r You have to use Bartender and LUI. All other addons are optional. You can replace them like you want but there will be no support from my side for your addon choices.",
						},
						emptyq30 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 40,
						},
						emptyq31 = {
							name = "   ",
							width = "full",
							type = "description",
							order = 41,
						},
						faqfooter = {
							order = 42,
							width = "full",
							type = "description",
							name = "For all other Questions, Problems or Wishes regarding LUI v3\nplease visit |cff8080ffhttp://www.wow-lui.com|r\n\nThanks!",
						},
					},
				},
			},
		}
		LUI.options.args.profiles = LibStub("AceDBOptions-3.0"):GetOptionsTable(LUI.db)
		LUI.options.args.profiles.order = 9
	
		for k,v in pairs(moduleOptions) do
			options.args[k] = (type(v) == "function") and v() or v
		end
	end
	
	return LUI.options
end

------------------------------------------------------
-- / SETUP LUI / --
------------------------------------------------------
function LUI:OnEnable()
	db_ = self.db.profile
	local isAllShown = false

	SLASH_RELOADUI1 = "/rl"
	SlashCmdList.RELOADUI = ReloadUI
	
	fdir = "Interface\\AddOns\\LUI\\textures\\transparent\\"
	
	LUICONFIG = LUICONFIG or {}
	if LUICONFIG.IsConfigured == nil then
		LUICONFIG.IsConfigured = false
	end
	
	LUIGold = LUIGold or {}
	
	if LUICONFIG.Versions == nil then
		versiondefaults = {
			lui = 0,
			omnicc = 0,
			grid = 0,
			pminimap = 0,
			recount = 0,
			omen = 0,
			bartender = 0,
			xloot = 0,
			forte = 0,
			tiptop = 0,
			sbc = 0,
			stuffing = 0,
		}
	
		LUICONFIG.Versions = versiondefaults
	end
	
	local CharName = UnitName("player")
	
	if IsAddOnLoaded("Forte_Core") and IsAddOnLoaded("Forte_Timer") then
		if FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Enable"] ~= nil then
			if FC_Saved.Profiles[FC_Saved.PROFILE]["Timer"]["Enable"] == true then
				isForteTimerLoaded = true
			end
		end
	end
	
	if IsAddOnLoaded("Forte_Core") and IsAddOnLoaded("Forte_Cooldown") then
		if FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["Enable"] ~= nil then
			if FC_Saved.Profiles[FC_Saved.PROFILE]["Cooldown"]["Enable"] == true then
				isForteCooldownLoaded = true
			end
		end
	end
	
	--if isForteTimerLoaded or isForteCooldownLoaded then
		--function FW:SetPosition(frame,x,y)
			--OVERLOAD FUNCTION
		--end
	--end

	if IsAddOnLoaded("Forte_Core") then
		function FW:Show(msg,r,g,b,a)
			--OVERLOAD FUNCTION
		end
	end

	if LUICONFIG.IsConfigured == false then
		self.db:SetProfile(UnitName("player"))
		Configure()
	else
		if LUICONFIG.Versions.lui ~= versions.lui then
			Update()
		else
			local CharName = UnitName("player")
			if Bartender4.db:GetCurrentProfile() ~= CharName then
				Bartender4.db:SetProfile(CharName)
			end
			
			SetColors()
			SetOrbVariables()
			SetNavigationFrames()
			SetMinimap()
			SetRightSidebar()
			SetLeftSidebar()
			SetChat()
			SetOmen()
			SetBars()
			SetRecount()
			SetGrid()
			SetForte()
			SetInfoPanelLeft()
			SetInfoPanelRight()
			SetInfoPanelTop()
			SetGMTicket()
			CheckFrames()
			SetMicroMenu()
			SetPallyPower()
			SetPortals()
			SetLockSummons()
			SetInfoText()
			SetDamageFont:ApplyDamageFont()
			SetAura()
			SetBartender()
			SetAutoInvite()
			SetAutoAcceptInvite()
			
			local LoginMsg = true
			if(LoginMsg==true) then
				print(" ")
				print("Welcome on |c0090ffffLUI v3|r for Patch 3.3.5 !")
				print("For more Information visit www.wow-lui.com")
			end
		end
	end
end

function LUI:OnInitialize()
	CheckResolution()
	self.db = LibStub("AceDB-3.0"):New("LUIDB", defaults, true)
	db_ = self.db.profile
	
	self.db.RegisterCallback(self, "OnProfileChanged", "Refresh")
	self.db.RegisterCallback(self, "OnProfileCopied", "Refresh")
	self.db.RegisterCallback(self, "OnProfileReset", "Refresh")
	
	self.elementsToHide = {}
	
	self:SetupOptions()
	
	StaticPopupDialogs["RELOAD_UI"] = {
	  text = "The UI needs to be reloaded!",
	  button1 = ACCEPT,
	  button2 = CANCEL,
	  OnAccept = ReloadUI,
	  timeout = 0,
	  whileDead = 1,
	  hideOnEscape = 1
	}
	
	StaticPopupDialogs["RESTORE_DETAULTS"] = {
	  text = "Do you really want to restore all defaults. All your settings will be lost!",
	  button1 = ACCEPT,
	  button2 = CANCEL,
	  OnAccept = Configure,
	  timeout = 0,
	  whileDead = 1,
	  hideOnEscape = 1
	}
end

function LUI:Refresh()
	db_ = self.db.profile

	for k,v in self:IterateModules() do
		if k ~= "Position" then
			if self:GetModuleEnabled(k) and not v:IsEnabled() then
				self:EnableModule(k)
			elseif not self:GetModuleEnabled(k) and v:IsEnabled() then
				self:DisableModule(k)
			end
			if type(v.Refresh) == "function" then
				v:Refresh()
			end
		end
	end
end

function LUI:ChatCommand(input)
	if not input or input:trim() == "" then
		LibStub("AceConfigDialog-3.0"):Open("LUI")
	else
		LibStub("AceConfigCmd-3.0").HandleCommand(LUI, "lui", "LUI", input)
	end
end

function LUI:SetupOptions()
	self.optionsFrames = {}
	LibStub("AceConfig-3.0"):RegisterOptionsTable("LUI", getOptions)
	
	AceConfigDialog:SetDefaultSize("LUI", 680,525)
	self:RegisterChatCommand( "lui", "ChatCommand")
	self:RegisterChatCommand( "LUI", "ChatCommand")
end

local CombatCheck = CreateFrame("Frame", "CombatCheck", UIParent)

CombatCheck:RegisterEvent("PLAYER_REGEN_DISABLED")
CombatCheck:RegisterEvent("PLAYER_REGEN_ENABLED")

CombatCheck:SetScript("OnEvent", function(self, event)
	if event == "PLAYER_REGEN_DISABLED" then
		isLocked = true
	elseif event == "PLAYER_REGEN_ENABLED" then
		isLocked = false
	end
end)

local SidebarCheck = CreateFrame("Frame", "SidebarCheck", UIParent)

SidebarCheck:RegisterEvent("PLAYER_ENTERING_WORLD")

SidebarCheck:SetScript("OnEvent", function(self)
	if db.SidebarRight.Enable == true then
		if db.SidebarRight.IsOpen == true then
			rightSidebarOpen = 1
			fsidebar_SlideOut:Show()
			fsidebar_AlphaIn:Show()
			fsidebar_bt_block:Hide()
		end
	end
	
	if db.SidebarLeft.Enable == true then
		if db.SidebarLeft.IsOpen == true then
			leftSidebarOpen = 1
			fsidebar2_SlideOut:Show()
			fsidebar2_AlphaIn:Show()
			fsidebar2_bt_block:Hide()
		end
	end
end)